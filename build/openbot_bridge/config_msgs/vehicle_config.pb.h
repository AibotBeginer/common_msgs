// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/config_msgs/vehicle_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "openbot_bridge/basic_msgs/header.pb.h"
#include "openbot_bridge/basic_msgs/geometry.pb.h"
#include "openbot_bridge/basic_msgs/vehicle_id.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
namespace openbot_bridge {
namespace config_msgs {
class Extrinsics;
class ExtrinsicsDefaultTypeInternal;
extern ExtrinsicsDefaultTypeInternal _Extrinsics_default_instance_;
class LatencyParam;
class LatencyParamDefaultTypeInternal;
extern LatencyParamDefaultTypeInternal _LatencyParam_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class VehicleConfig;
class VehicleConfigDefaultTypeInternal;
extern VehicleConfigDefaultTypeInternal _VehicleConfig_default_instance_;
class VehicleParam;
class VehicleParamDefaultTypeInternal;
extern VehicleParamDefaultTypeInternal _VehicleParam_default_instance_;
}  // namespace config_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::openbot_bridge::config_msgs::Extrinsics* Arena::CreateMaybeMessage<::openbot_bridge::config_msgs::Extrinsics>(Arena*);
template<> ::openbot_bridge::config_msgs::LatencyParam* Arena::CreateMaybeMessage<::openbot_bridge::config_msgs::LatencyParam>(Arena*);
template<> ::openbot_bridge::config_msgs::Transform* Arena::CreateMaybeMessage<::openbot_bridge::config_msgs::Transform>(Arena*);
template<> ::openbot_bridge::config_msgs::VehicleConfig* Arena::CreateMaybeMessage<::openbot_bridge::config_msgs::VehicleConfig>(Arena*);
template<> ::openbot_bridge::config_msgs::VehicleParam* Arena::CreateMaybeMessage<::openbot_bridge::config_msgs::VehicleParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openbot_bridge {
namespace config_msgs {

enum VehicleBrand : int {
  LINCOLN_MKZ = 0,
  GEM = 1,
  LEXUS = 2,
  TRANSIT = 3,
  GE3 = 4,
  WEY = 5,
  ZHONGYUN = 6,
  CH = 7,
  DKIT = 8,
  NEOLIX = 9,
  VehicleBrand_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VehicleBrand_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VehicleBrand_IsValid(int value);
constexpr VehicleBrand VehicleBrand_MIN = LINCOLN_MKZ;
constexpr VehicleBrand VehicleBrand_MAX = NEOLIX;
constexpr int VehicleBrand_ARRAYSIZE = VehicleBrand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleBrand_descriptor();
template<typename T>
inline const std::string& VehicleBrand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleBrand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleBrand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleBrand_descriptor(), enum_t_value);
}
inline bool VehicleBrand_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VehicleBrand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleBrand>(
    VehicleBrand_descriptor(), name, value);
}
// ===================================================================

class Transform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.config_msgs.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  virtual ~Transform();

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform& default_instance();

  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return CreateMaybeMessage<Transform>(nullptr);
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.config_msgs.Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFrameFieldNumber = 1,
    kTargetFrameFieldNumber = 2,
    kTranslationFieldNumber = 3,
    kRotationFieldNumber = 4,
  };
  // bytes source_frame = 1;
  void clear_source_frame();
  const std::string& source_frame() const;
  void set_source_frame(const std::string& value);
  void set_source_frame(std::string&& value);
  void set_source_frame(const char* value);
  void set_source_frame(const void* value, size_t size);
  std::string* mutable_source_frame();
  std::string* release_source_frame();
  void set_allocated_source_frame(std::string* source_frame);
  private:
  const std::string& _internal_source_frame() const;
  void _internal_set_source_frame(const std::string& value);
  std::string* _internal_mutable_source_frame();
  public:

  // bytes target_frame = 2;
  void clear_target_frame();
  const std::string& target_frame() const;
  void set_target_frame(const std::string& value);
  void set_target_frame(std::string&& value);
  void set_target_frame(const char* value);
  void set_target_frame(const void* value, size_t size);
  std::string* mutable_target_frame();
  std::string* release_target_frame();
  void set_allocated_target_frame(std::string* target_frame);
  private:
  const std::string& _internal_target_frame() const;
  void _internal_set_target_frame(const std::string& value);
  std::string* _internal_mutable_target_frame();
  public:

  // .openbot_bridge.basic_msgs.Point3D translation = 3;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::openbot_bridge::basic_msgs::Point3D& translation() const;
  ::openbot_bridge::basic_msgs::Point3D* release_translation();
  ::openbot_bridge::basic_msgs::Point3D* mutable_translation();
  void set_allocated_translation(::openbot_bridge::basic_msgs::Point3D* translation);
  private:
  const ::openbot_bridge::basic_msgs::Point3D& _internal_translation() const;
  ::openbot_bridge::basic_msgs::Point3D* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::openbot_bridge::basic_msgs::Point3D* translation);
  ::openbot_bridge::basic_msgs::Point3D* unsafe_arena_release_translation();

  // .openbot_bridge.basic_msgs.Quaternion rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::openbot_bridge::basic_msgs::Quaternion& rotation() const;
  ::openbot_bridge::basic_msgs::Quaternion* release_rotation();
  ::openbot_bridge::basic_msgs::Quaternion* mutable_rotation();
  void set_allocated_rotation(::openbot_bridge::basic_msgs::Quaternion* rotation);
  private:
  const ::openbot_bridge::basic_msgs::Quaternion& _internal_rotation() const;
  ::openbot_bridge::basic_msgs::Quaternion* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::openbot_bridge::basic_msgs::Quaternion* rotation);
  ::openbot_bridge::basic_msgs::Quaternion* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:openbot_bridge.config_msgs.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_frame_;
  ::openbot_bridge::basic_msgs::Point3D* translation_;
  ::openbot_bridge::basic_msgs::Quaternion* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Extrinsics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.config_msgs.Extrinsics) */ {
 public:
  inline Extrinsics() : Extrinsics(nullptr) {}
  virtual ~Extrinsics();

  Extrinsics(const Extrinsics& from);
  Extrinsics(Extrinsics&& from) noexcept
    : Extrinsics() {
    *this = ::std::move(from);
  }

  inline Extrinsics& operator=(const Extrinsics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extrinsics& operator=(Extrinsics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Extrinsics& default_instance();

  static inline const Extrinsics* internal_default_instance() {
    return reinterpret_cast<const Extrinsics*>(
               &_Extrinsics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Extrinsics& a, Extrinsics& b) {
    a.Swap(&b);
  }
  inline void Swap(Extrinsics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extrinsics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extrinsics* New() const final {
    return CreateMaybeMessage<Extrinsics>(nullptr);
  }

  Extrinsics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extrinsics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extrinsics& from);
  void MergeFrom(const Extrinsics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extrinsics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.config_msgs.Extrinsics";
  }
  protected:
  explicit Extrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTansformsFieldNumber = 1,
  };
  // repeated .openbot_bridge.config_msgs.Transform tansforms = 1;
  int tansforms_size() const;
  private:
  int _internal_tansforms_size() const;
  public:
  void clear_tansforms();
  ::openbot_bridge::config_msgs::Transform* mutable_tansforms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::config_msgs::Transform >*
      mutable_tansforms();
  private:
  const ::openbot_bridge::config_msgs::Transform& _internal_tansforms(int index) const;
  ::openbot_bridge::config_msgs::Transform* _internal_add_tansforms();
  public:
  const ::openbot_bridge::config_msgs::Transform& tansforms(int index) const;
  ::openbot_bridge::config_msgs::Transform* add_tansforms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::config_msgs::Transform >&
      tansforms() const;

  // @@protoc_insertion_point(class_scope:openbot_bridge.config_msgs.Extrinsics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::config_msgs::Transform > tansforms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LatencyParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.config_msgs.LatencyParam) */ {
 public:
  inline LatencyParam() : LatencyParam(nullptr) {}
  virtual ~LatencyParam();

  LatencyParam(const LatencyParam& from);
  LatencyParam(LatencyParam&& from) noexcept
    : LatencyParam() {
    *this = ::std::move(from);
  }

  inline LatencyParam& operator=(const LatencyParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyParam& operator=(LatencyParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LatencyParam& default_instance();

  static inline const LatencyParam* internal_default_instance() {
    return reinterpret_cast<const LatencyParam*>(
               &_LatencyParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LatencyParam& a, LatencyParam& b) {
    a.Swap(&b);
  }
  inline void Swap(LatencyParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatencyParam* New() const final {
    return CreateMaybeMessage<LatencyParam>(nullptr);
  }

  LatencyParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatencyParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LatencyParam& from);
  void MergeFrom(const LatencyParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.config_msgs.LatencyParam";
  }
  protected:
  explicit LatencyParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeadTimeFieldNumber = 1,
    kRiseTimeFieldNumber = 2,
    kPeakTimeFieldNumber = 3,
    kSettlingTimeFieldNumber = 4,
  };
  // double dead_time = 1;
  void clear_dead_time();
  double dead_time() const;
  void set_dead_time(double value);
  private:
  double _internal_dead_time() const;
  void _internal_set_dead_time(double value);
  public:

  // double rise_time = 2;
  void clear_rise_time();
  double rise_time() const;
  void set_rise_time(double value);
  private:
  double _internal_rise_time() const;
  void _internal_set_rise_time(double value);
  public:

  // double peak_time = 3;
  void clear_peak_time();
  double peak_time() const;
  void set_peak_time(double value);
  private:
  double _internal_peak_time() const;
  void _internal_set_peak_time(double value);
  public:

  // double settling_time = 4;
  void clear_settling_time();
  double settling_time() const;
  void set_settling_time(double value);
  private:
  double _internal_settling_time() const;
  void _internal_set_settling_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.config_msgs.LatencyParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dead_time_;
  double rise_time_;
  double peak_time_;
  double settling_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VehicleParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.config_msgs.VehicleParam) */ {
 public:
  inline VehicleParam() : VehicleParam(nullptr) {}
  virtual ~VehicleParam();

  VehicleParam(const VehicleParam& from);
  VehicleParam(VehicleParam&& from) noexcept
    : VehicleParam() {
    *this = ::std::move(from);
  }

  inline VehicleParam& operator=(const VehicleParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleParam& operator=(VehicleParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleParam& default_instance();

  static inline const VehicleParam* internal_default_instance() {
    return reinterpret_cast<const VehicleParam*>(
               &_VehicleParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VehicleParam& a, VehicleParam& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleParam* New() const final {
    return CreateMaybeMessage<VehicleParam>(nullptr);
  }

  VehicleParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleParam& from);
  void MergeFrom(const VehicleParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.config_msgs.VehicleParam";
  }
  protected:
  explicit VehicleParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleIdFieldNumber = 2,
    kSteeringLatencyParamFieldNumber = 22,
    kThrottleLatencyParamFieldNumber = 23,
    kBrakeLatencyParamFieldNumber = 24,
    kFrontEdgeToCenterFieldNumber = 3,
    kBackEdgeToCenterFieldNumber = 4,
    kLeftEdgeToCenterFieldNumber = 5,
    kRightEdgeToCenterFieldNumber = 6,
    kLengthFieldNumber = 7,
    kWidthFieldNumber = 8,
    kHeightFieldNumber = 9,
    kMinTurnRadiusFieldNumber = 10,
    kBrandFieldNumber = 1,
    kMaxAbsSpeedWhenStoppedFieldNumber = 19,
    kMaxAccelerationFieldNumber = 11,
    kMaxDecelerationFieldNumber = 12,
    kMaxSteerAngleFieldNumber = 13,
    kMaxSteerAngleRateFieldNumber = 14,
    kMinSteerAngleRateFieldNumber = 15,
    kSteerRatioFieldNumber = 16,
    kWheelBaseFieldNumber = 17,
    kWheelRollingRadiusFieldNumber = 18,
    kBrakeDeadzoneFieldNumber = 20,
    kThrottleDeadzoneFieldNumber = 21,
  };
  // .openbot_bridge.basic_msgs.VehicleID vehicle_id = 2;
  bool has_vehicle_id() const;
  private:
  bool _internal_has_vehicle_id() const;
  public:
  void clear_vehicle_id();
  const ::openbot_bridge::basic_msgs::VehicleID& vehicle_id() const;
  ::openbot_bridge::basic_msgs::VehicleID* release_vehicle_id();
  ::openbot_bridge::basic_msgs::VehicleID* mutable_vehicle_id();
  void set_allocated_vehicle_id(::openbot_bridge::basic_msgs::VehicleID* vehicle_id);
  private:
  const ::openbot_bridge::basic_msgs::VehicleID& _internal_vehicle_id() const;
  ::openbot_bridge::basic_msgs::VehicleID* _internal_mutable_vehicle_id();
  public:
  void unsafe_arena_set_allocated_vehicle_id(
      ::openbot_bridge::basic_msgs::VehicleID* vehicle_id);
  ::openbot_bridge::basic_msgs::VehicleID* unsafe_arena_release_vehicle_id();

  // .openbot_bridge.config_msgs.LatencyParam steering_latency_param = 22;
  bool has_steering_latency_param() const;
  private:
  bool _internal_has_steering_latency_param() const;
  public:
  void clear_steering_latency_param();
  const ::openbot_bridge::config_msgs::LatencyParam& steering_latency_param() const;
  ::openbot_bridge::config_msgs::LatencyParam* release_steering_latency_param();
  ::openbot_bridge::config_msgs::LatencyParam* mutable_steering_latency_param();
  void set_allocated_steering_latency_param(::openbot_bridge::config_msgs::LatencyParam* steering_latency_param);
  private:
  const ::openbot_bridge::config_msgs::LatencyParam& _internal_steering_latency_param() const;
  ::openbot_bridge::config_msgs::LatencyParam* _internal_mutable_steering_latency_param();
  public:
  void unsafe_arena_set_allocated_steering_latency_param(
      ::openbot_bridge::config_msgs::LatencyParam* steering_latency_param);
  ::openbot_bridge::config_msgs::LatencyParam* unsafe_arena_release_steering_latency_param();

  // .openbot_bridge.config_msgs.LatencyParam throttle_latency_param = 23;
  bool has_throttle_latency_param() const;
  private:
  bool _internal_has_throttle_latency_param() const;
  public:
  void clear_throttle_latency_param();
  const ::openbot_bridge::config_msgs::LatencyParam& throttle_latency_param() const;
  ::openbot_bridge::config_msgs::LatencyParam* release_throttle_latency_param();
  ::openbot_bridge::config_msgs::LatencyParam* mutable_throttle_latency_param();
  void set_allocated_throttle_latency_param(::openbot_bridge::config_msgs::LatencyParam* throttle_latency_param);
  private:
  const ::openbot_bridge::config_msgs::LatencyParam& _internal_throttle_latency_param() const;
  ::openbot_bridge::config_msgs::LatencyParam* _internal_mutable_throttle_latency_param();
  public:
  void unsafe_arena_set_allocated_throttle_latency_param(
      ::openbot_bridge::config_msgs::LatencyParam* throttle_latency_param);
  ::openbot_bridge::config_msgs::LatencyParam* unsafe_arena_release_throttle_latency_param();

  // .openbot_bridge.config_msgs.LatencyParam brake_latency_param = 24;
  bool has_brake_latency_param() const;
  private:
  bool _internal_has_brake_latency_param() const;
  public:
  void clear_brake_latency_param();
  const ::openbot_bridge::config_msgs::LatencyParam& brake_latency_param() const;
  ::openbot_bridge::config_msgs::LatencyParam* release_brake_latency_param();
  ::openbot_bridge::config_msgs::LatencyParam* mutable_brake_latency_param();
  void set_allocated_brake_latency_param(::openbot_bridge::config_msgs::LatencyParam* brake_latency_param);
  private:
  const ::openbot_bridge::config_msgs::LatencyParam& _internal_brake_latency_param() const;
  ::openbot_bridge::config_msgs::LatencyParam* _internal_mutable_brake_latency_param();
  public:
  void unsafe_arena_set_allocated_brake_latency_param(
      ::openbot_bridge::config_msgs::LatencyParam* brake_latency_param);
  ::openbot_bridge::config_msgs::LatencyParam* unsafe_arena_release_brake_latency_param();

  // double front_edge_to_center = 3;
  void clear_front_edge_to_center();
  double front_edge_to_center() const;
  void set_front_edge_to_center(double value);
  private:
  double _internal_front_edge_to_center() const;
  void _internal_set_front_edge_to_center(double value);
  public:

  // double back_edge_to_center = 4;
  void clear_back_edge_to_center();
  double back_edge_to_center() const;
  void set_back_edge_to_center(double value);
  private:
  double _internal_back_edge_to_center() const;
  void _internal_set_back_edge_to_center(double value);
  public:

  // double left_edge_to_center = 5;
  void clear_left_edge_to_center();
  double left_edge_to_center() const;
  void set_left_edge_to_center(double value);
  private:
  double _internal_left_edge_to_center() const;
  void _internal_set_left_edge_to_center(double value);
  public:

  // double right_edge_to_center = 6;
  void clear_right_edge_to_center();
  double right_edge_to_center() const;
  void set_right_edge_to_center(double value);
  private:
  double _internal_right_edge_to_center() const;
  void _internal_set_right_edge_to_center(double value);
  public:

  // double length = 7;
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // double width = 8;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 9;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double min_turn_radius = 10;
  void clear_min_turn_radius();
  double min_turn_radius() const;
  void set_min_turn_radius(double value);
  private:
  double _internal_min_turn_radius() const;
  void _internal_set_min_turn_radius(double value);
  public:

  // .openbot_bridge.config_msgs.VehicleBrand brand = 1;
  void clear_brand();
  ::openbot_bridge::config_msgs::VehicleBrand brand() const;
  void set_brand(::openbot_bridge::config_msgs::VehicleBrand value);
  private:
  ::openbot_bridge::config_msgs::VehicleBrand _internal_brand() const;
  void _internal_set_brand(::openbot_bridge::config_msgs::VehicleBrand value);
  public:

  // float max_abs_speed_when_stopped = 19;
  void clear_max_abs_speed_when_stopped();
  float max_abs_speed_when_stopped() const;
  void set_max_abs_speed_when_stopped(float value);
  private:
  float _internal_max_abs_speed_when_stopped() const;
  void _internal_set_max_abs_speed_when_stopped(float value);
  public:

  // double max_acceleration = 11;
  void clear_max_acceleration();
  double max_acceleration() const;
  void set_max_acceleration(double value);
  private:
  double _internal_max_acceleration() const;
  void _internal_set_max_acceleration(double value);
  public:

  // double max_deceleration = 12;
  void clear_max_deceleration();
  double max_deceleration() const;
  void set_max_deceleration(double value);
  private:
  double _internal_max_deceleration() const;
  void _internal_set_max_deceleration(double value);
  public:

  // double max_steer_angle = 13;
  void clear_max_steer_angle();
  double max_steer_angle() const;
  void set_max_steer_angle(double value);
  private:
  double _internal_max_steer_angle() const;
  void _internal_set_max_steer_angle(double value);
  public:

  // double max_steer_angle_rate = 14;
  void clear_max_steer_angle_rate();
  double max_steer_angle_rate() const;
  void set_max_steer_angle_rate(double value);
  private:
  double _internal_max_steer_angle_rate() const;
  void _internal_set_max_steer_angle_rate(double value);
  public:

  // double min_steer_angle_rate = 15;
  void clear_min_steer_angle_rate();
  double min_steer_angle_rate() const;
  void set_min_steer_angle_rate(double value);
  private:
  double _internal_min_steer_angle_rate() const;
  void _internal_set_min_steer_angle_rate(double value);
  public:

  // double steer_ratio = 16;
  void clear_steer_ratio();
  double steer_ratio() const;
  void set_steer_ratio(double value);
  private:
  double _internal_steer_ratio() const;
  void _internal_set_steer_ratio(double value);
  public:

  // double wheel_base = 17;
  void clear_wheel_base();
  double wheel_base() const;
  void set_wheel_base(double value);
  private:
  double _internal_wheel_base() const;
  void _internal_set_wheel_base(double value);
  public:

  // double wheel_rolling_radius = 18;
  void clear_wheel_rolling_radius();
  double wheel_rolling_radius() const;
  void set_wheel_rolling_radius(double value);
  private:
  double _internal_wheel_rolling_radius() const;
  void _internal_set_wheel_rolling_radius(double value);
  public:

  // double brake_deadzone = 20;
  void clear_brake_deadzone();
  double brake_deadzone() const;
  void set_brake_deadzone(double value);
  private:
  double _internal_brake_deadzone() const;
  void _internal_set_brake_deadzone(double value);
  public:

  // double throttle_deadzone = 21;
  void clear_throttle_deadzone();
  double throttle_deadzone() const;
  void set_throttle_deadzone(double value);
  private:
  double _internal_throttle_deadzone() const;
  void _internal_set_throttle_deadzone(double value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.config_msgs.VehicleParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::basic_msgs::VehicleID* vehicle_id_;
  ::openbot_bridge::config_msgs::LatencyParam* steering_latency_param_;
  ::openbot_bridge::config_msgs::LatencyParam* throttle_latency_param_;
  ::openbot_bridge::config_msgs::LatencyParam* brake_latency_param_;
  double front_edge_to_center_;
  double back_edge_to_center_;
  double left_edge_to_center_;
  double right_edge_to_center_;
  double length_;
  double width_;
  double height_;
  double min_turn_radius_;
  int brand_;
  float max_abs_speed_when_stopped_;
  double max_acceleration_;
  double max_deceleration_;
  double max_steer_angle_;
  double max_steer_angle_rate_;
  double min_steer_angle_rate_;
  double steer_ratio_;
  double wheel_base_;
  double wheel_rolling_radius_;
  double brake_deadzone_;
  double throttle_deadzone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VehicleConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.config_msgs.VehicleConfig) */ {
 public:
  inline VehicleConfig() : VehicleConfig(nullptr) {}
  virtual ~VehicleConfig();

  VehicleConfig(const VehicleConfig& from);
  VehicleConfig(VehicleConfig&& from) noexcept
    : VehicleConfig() {
    *this = ::std::move(from);
  }

  inline VehicleConfig& operator=(const VehicleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleConfig& operator=(VehicleConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleConfig& default_instance();

  static inline const VehicleConfig* internal_default_instance() {
    return reinterpret_cast<const VehicleConfig*>(
               &_VehicleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VehicleConfig& a, VehicleConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleConfig* New() const final {
    return CreateMaybeMessage<VehicleConfig>(nullptr);
  }

  VehicleConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleConfig& from);
  void MergeFrom(const VehicleConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.config_msgs.VehicleConfig";
  }
  protected:
  explicit VehicleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kVehicleParamFieldNumber = 2,
    kExtrinsicsFieldNumber = 3,
  };
  // .openbot_bridge.basic_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::basic_msgs::Header& header() const;
  ::openbot_bridge::basic_msgs::Header* release_header();
  ::openbot_bridge::basic_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::basic_msgs::Header* header);
  private:
  const ::openbot_bridge::basic_msgs::Header& _internal_header() const;
  ::openbot_bridge::basic_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::basic_msgs::Header* header);
  ::openbot_bridge::basic_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.config_msgs.VehicleParam vehicle_param = 2;
  bool has_vehicle_param() const;
  private:
  bool _internal_has_vehicle_param() const;
  public:
  void clear_vehicle_param();
  const ::openbot_bridge::config_msgs::VehicleParam& vehicle_param() const;
  ::openbot_bridge::config_msgs::VehicleParam* release_vehicle_param();
  ::openbot_bridge::config_msgs::VehicleParam* mutable_vehicle_param();
  void set_allocated_vehicle_param(::openbot_bridge::config_msgs::VehicleParam* vehicle_param);
  private:
  const ::openbot_bridge::config_msgs::VehicleParam& _internal_vehicle_param() const;
  ::openbot_bridge::config_msgs::VehicleParam* _internal_mutable_vehicle_param();
  public:
  void unsafe_arena_set_allocated_vehicle_param(
      ::openbot_bridge::config_msgs::VehicleParam* vehicle_param);
  ::openbot_bridge::config_msgs::VehicleParam* unsafe_arena_release_vehicle_param();

  // .openbot_bridge.config_msgs.Extrinsics extrinsics = 3;
  bool has_extrinsics() const;
  private:
  bool _internal_has_extrinsics() const;
  public:
  void clear_extrinsics();
  const ::openbot_bridge::config_msgs::Extrinsics& extrinsics() const;
  ::openbot_bridge::config_msgs::Extrinsics* release_extrinsics();
  ::openbot_bridge::config_msgs::Extrinsics* mutable_extrinsics();
  void set_allocated_extrinsics(::openbot_bridge::config_msgs::Extrinsics* extrinsics);
  private:
  const ::openbot_bridge::config_msgs::Extrinsics& _internal_extrinsics() const;
  ::openbot_bridge::config_msgs::Extrinsics* _internal_mutable_extrinsics();
  public:
  void unsafe_arena_set_allocated_extrinsics(
      ::openbot_bridge::config_msgs::Extrinsics* extrinsics);
  ::openbot_bridge::config_msgs::Extrinsics* unsafe_arena_release_extrinsics();

  // @@protoc_insertion_point(class_scope:openbot_bridge.config_msgs.VehicleConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::basic_msgs::Header* header_;
  ::openbot_bridge::config_msgs::VehicleParam* vehicle_param_;
  ::openbot_bridge::config_msgs::Extrinsics* extrinsics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transform

// bytes source_frame = 1;
inline void Transform::clear_source_frame() {
  source_frame_.ClearToEmpty();
}
inline const std::string& Transform::source_frame() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.Transform.source_frame)
  return _internal_source_frame();
}
inline void Transform::set_source_frame(const std::string& value) {
  _internal_set_source_frame(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.Transform.source_frame)
}
inline std::string* Transform::mutable_source_frame() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.config_msgs.Transform.source_frame)
  return _internal_mutable_source_frame();
}
inline const std::string& Transform::_internal_source_frame() const {
  return source_frame_.Get();
}
inline void Transform::_internal_set_source_frame(const std::string& value) {
  
  source_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transform::set_source_frame(std::string&& value) {
  
  source_frame_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.config_msgs.Transform.source_frame)
}
inline void Transform::set_source_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.config_msgs.Transform.source_frame)
}
inline void Transform::set_source_frame(const void* value,
    size_t size) {
  
  source_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.config_msgs.Transform.source_frame)
}
inline std::string* Transform::_internal_mutable_source_frame() {
  
  return source_frame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transform::release_source_frame() {
  // @@protoc_insertion_point(field_release:openbot_bridge.config_msgs.Transform.source_frame)
  return source_frame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transform::set_allocated_source_frame(std::string* source_frame) {
  if (source_frame != nullptr) {
    
  } else {
    
  }
  source_frame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_frame,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.config_msgs.Transform.source_frame)
}

// bytes target_frame = 2;
inline void Transform::clear_target_frame() {
  target_frame_.ClearToEmpty();
}
inline const std::string& Transform::target_frame() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.Transform.target_frame)
  return _internal_target_frame();
}
inline void Transform::set_target_frame(const std::string& value) {
  _internal_set_target_frame(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.Transform.target_frame)
}
inline std::string* Transform::mutable_target_frame() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.config_msgs.Transform.target_frame)
  return _internal_mutable_target_frame();
}
inline const std::string& Transform::_internal_target_frame() const {
  return target_frame_.Get();
}
inline void Transform::_internal_set_target_frame(const std::string& value) {
  
  target_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transform::set_target_frame(std::string&& value) {
  
  target_frame_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.config_msgs.Transform.target_frame)
}
inline void Transform::set_target_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.config_msgs.Transform.target_frame)
}
inline void Transform::set_target_frame(const void* value,
    size_t size) {
  
  target_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.config_msgs.Transform.target_frame)
}
inline std::string* Transform::_internal_mutable_target_frame() {
  
  return target_frame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transform::release_target_frame() {
  // @@protoc_insertion_point(field_release:openbot_bridge.config_msgs.Transform.target_frame)
  return target_frame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transform::set_allocated_target_frame(std::string* target_frame) {
  if (target_frame != nullptr) {
    
  } else {
    
  }
  target_frame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_frame,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.config_msgs.Transform.target_frame)
}

// .openbot_bridge.basic_msgs.Point3D translation = 3;
inline bool Transform::_internal_has_translation() const {
  return this != internal_default_instance() && translation_ != nullptr;
}
inline bool Transform::has_translation() const {
  return _internal_has_translation();
}
inline const ::openbot_bridge::basic_msgs::Point3D& Transform::_internal_translation() const {
  const ::openbot_bridge::basic_msgs::Point3D* p = translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::basic_msgs::Point3D&>(
      ::openbot_bridge::basic_msgs::_Point3D_default_instance_);
}
inline const ::openbot_bridge::basic_msgs::Point3D& Transform::translation() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.Transform.translation)
  return _internal_translation();
}
inline void Transform::unsafe_arena_set_allocated_translation(
    ::openbot_bridge::basic_msgs::Point3D* translation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.config_msgs.Transform.translation)
}
inline ::openbot_bridge::basic_msgs::Point3D* Transform::release_translation() {
  
  ::openbot_bridge::basic_msgs::Point3D* temp = translation_;
  translation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::basic_msgs::Point3D* Transform::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:openbot_bridge.config_msgs.Transform.translation)
  
  ::openbot_bridge::basic_msgs::Point3D* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::openbot_bridge::basic_msgs::Point3D* Transform::_internal_mutable_translation() {
  
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::basic_msgs::Point3D>(GetArena());
    translation_ = p;
  }
  return translation_;
}
inline ::openbot_bridge::basic_msgs::Point3D* Transform::mutable_translation() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.config_msgs.Transform.translation)
  return _internal_mutable_translation();
}
inline void Transform::set_allocated_translation(::openbot_bridge::basic_msgs::Point3D* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation)->GetArena();
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.config_msgs.Transform.translation)
}

// .openbot_bridge.basic_msgs.Quaternion rotation = 4;
inline bool Transform::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool Transform::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::openbot_bridge::basic_msgs::Quaternion& Transform::_internal_rotation() const {
  const ::openbot_bridge::basic_msgs::Quaternion* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::basic_msgs::Quaternion&>(
      ::openbot_bridge::basic_msgs::_Quaternion_default_instance_);
}
inline const ::openbot_bridge::basic_msgs::Quaternion& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.Transform.rotation)
  return _internal_rotation();
}
inline void Transform::unsafe_arena_set_allocated_rotation(
    ::openbot_bridge::basic_msgs::Quaternion* rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.config_msgs.Transform.rotation)
}
inline ::openbot_bridge::basic_msgs::Quaternion* Transform::release_rotation() {
  
  ::openbot_bridge::basic_msgs::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::basic_msgs::Quaternion* Transform::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:openbot_bridge.config_msgs.Transform.rotation)
  
  ::openbot_bridge::basic_msgs::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::openbot_bridge::basic_msgs::Quaternion* Transform::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::basic_msgs::Quaternion>(GetArena());
    rotation_ = p;
  }
  return rotation_;
}
inline ::openbot_bridge::basic_msgs::Quaternion* Transform::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.config_msgs.Transform.rotation)
  return _internal_mutable_rotation();
}
inline void Transform::set_allocated_rotation(::openbot_bridge::basic_msgs::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation)->GetArena();
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.config_msgs.Transform.rotation)
}

// -------------------------------------------------------------------

// Extrinsics

// repeated .openbot_bridge.config_msgs.Transform tansforms = 1;
inline int Extrinsics::_internal_tansforms_size() const {
  return tansforms_.size();
}
inline int Extrinsics::tansforms_size() const {
  return _internal_tansforms_size();
}
inline void Extrinsics::clear_tansforms() {
  tansforms_.Clear();
}
inline ::openbot_bridge::config_msgs::Transform* Extrinsics::mutable_tansforms(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.config_msgs.Extrinsics.tansforms)
  return tansforms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::config_msgs::Transform >*
Extrinsics::mutable_tansforms() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.config_msgs.Extrinsics.tansforms)
  return &tansforms_;
}
inline const ::openbot_bridge::config_msgs::Transform& Extrinsics::_internal_tansforms(int index) const {
  return tansforms_.Get(index);
}
inline const ::openbot_bridge::config_msgs::Transform& Extrinsics::tansforms(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.Extrinsics.tansforms)
  return _internal_tansforms(index);
}
inline ::openbot_bridge::config_msgs::Transform* Extrinsics::_internal_add_tansforms() {
  return tansforms_.Add();
}
inline ::openbot_bridge::config_msgs::Transform* Extrinsics::add_tansforms() {
  // @@protoc_insertion_point(field_add:openbot_bridge.config_msgs.Extrinsics.tansforms)
  return _internal_add_tansforms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::config_msgs::Transform >&
Extrinsics::tansforms() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.config_msgs.Extrinsics.tansforms)
  return tansforms_;
}

// -------------------------------------------------------------------

// LatencyParam

// double dead_time = 1;
inline void LatencyParam::clear_dead_time() {
  dead_time_ = 0;
}
inline double LatencyParam::_internal_dead_time() const {
  return dead_time_;
}
inline double LatencyParam::dead_time() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.LatencyParam.dead_time)
  return _internal_dead_time();
}
inline void LatencyParam::_internal_set_dead_time(double value) {
  
  dead_time_ = value;
}
inline void LatencyParam::set_dead_time(double value) {
  _internal_set_dead_time(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.LatencyParam.dead_time)
}

// double rise_time = 2;
inline void LatencyParam::clear_rise_time() {
  rise_time_ = 0;
}
inline double LatencyParam::_internal_rise_time() const {
  return rise_time_;
}
inline double LatencyParam::rise_time() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.LatencyParam.rise_time)
  return _internal_rise_time();
}
inline void LatencyParam::_internal_set_rise_time(double value) {
  
  rise_time_ = value;
}
inline void LatencyParam::set_rise_time(double value) {
  _internal_set_rise_time(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.LatencyParam.rise_time)
}

// double peak_time = 3;
inline void LatencyParam::clear_peak_time() {
  peak_time_ = 0;
}
inline double LatencyParam::_internal_peak_time() const {
  return peak_time_;
}
inline double LatencyParam::peak_time() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.LatencyParam.peak_time)
  return _internal_peak_time();
}
inline void LatencyParam::_internal_set_peak_time(double value) {
  
  peak_time_ = value;
}
inline void LatencyParam::set_peak_time(double value) {
  _internal_set_peak_time(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.LatencyParam.peak_time)
}

// double settling_time = 4;
inline void LatencyParam::clear_settling_time() {
  settling_time_ = 0;
}
inline double LatencyParam::_internal_settling_time() const {
  return settling_time_;
}
inline double LatencyParam::settling_time() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.LatencyParam.settling_time)
  return _internal_settling_time();
}
inline void LatencyParam::_internal_set_settling_time(double value) {
  
  settling_time_ = value;
}
inline void LatencyParam::set_settling_time(double value) {
  _internal_set_settling_time(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.LatencyParam.settling_time)
}

// -------------------------------------------------------------------

// VehicleParam

// .openbot_bridge.config_msgs.VehicleBrand brand = 1;
inline void VehicleParam::clear_brand() {
  brand_ = 0;
}
inline ::openbot_bridge::config_msgs::VehicleBrand VehicleParam::_internal_brand() const {
  return static_cast< ::openbot_bridge::config_msgs::VehicleBrand >(brand_);
}
inline ::openbot_bridge::config_msgs::VehicleBrand VehicleParam::brand() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.brand)
  return _internal_brand();
}
inline void VehicleParam::_internal_set_brand(::openbot_bridge::config_msgs::VehicleBrand value) {
  
  brand_ = value;
}
inline void VehicleParam::set_brand(::openbot_bridge::config_msgs::VehicleBrand value) {
  _internal_set_brand(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.brand)
}

// .openbot_bridge.basic_msgs.VehicleID vehicle_id = 2;
inline bool VehicleParam::_internal_has_vehicle_id() const {
  return this != internal_default_instance() && vehicle_id_ != nullptr;
}
inline bool VehicleParam::has_vehicle_id() const {
  return _internal_has_vehicle_id();
}
inline const ::openbot_bridge::basic_msgs::VehicleID& VehicleParam::_internal_vehicle_id() const {
  const ::openbot_bridge::basic_msgs::VehicleID* p = vehicle_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::basic_msgs::VehicleID&>(
      ::openbot_bridge::basic_msgs::_VehicleID_default_instance_);
}
inline const ::openbot_bridge::basic_msgs::VehicleID& VehicleParam::vehicle_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.vehicle_id)
  return _internal_vehicle_id();
}
inline void VehicleParam::unsafe_arena_set_allocated_vehicle_id(
    ::openbot_bridge::basic_msgs::VehicleID* vehicle_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_id_);
  }
  vehicle_id_ = vehicle_id;
  if (vehicle_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.config_msgs.VehicleParam.vehicle_id)
}
inline ::openbot_bridge::basic_msgs::VehicleID* VehicleParam::release_vehicle_id() {
  
  ::openbot_bridge::basic_msgs::VehicleID* temp = vehicle_id_;
  vehicle_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::basic_msgs::VehicleID* VehicleParam::unsafe_arena_release_vehicle_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.config_msgs.VehicleParam.vehicle_id)
  
  ::openbot_bridge::basic_msgs::VehicleID* temp = vehicle_id_;
  vehicle_id_ = nullptr;
  return temp;
}
inline ::openbot_bridge::basic_msgs::VehicleID* VehicleParam::_internal_mutable_vehicle_id() {
  
  if (vehicle_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::basic_msgs::VehicleID>(GetArena());
    vehicle_id_ = p;
  }
  return vehicle_id_;
}
inline ::openbot_bridge::basic_msgs::VehicleID* VehicleParam::mutable_vehicle_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.config_msgs.VehicleParam.vehicle_id)
  return _internal_mutable_vehicle_id();
}
inline void VehicleParam::set_allocated_vehicle_id(::openbot_bridge::basic_msgs::VehicleID* vehicle_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_id_);
  }
  if (vehicle_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_id)->GetArena();
    if (message_arena != submessage_arena) {
      vehicle_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_id, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_id_ = vehicle_id;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.config_msgs.VehicleParam.vehicle_id)
}

// double front_edge_to_center = 3;
inline void VehicleParam::clear_front_edge_to_center() {
  front_edge_to_center_ = 0;
}
inline double VehicleParam::_internal_front_edge_to_center() const {
  return front_edge_to_center_;
}
inline double VehicleParam::front_edge_to_center() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.front_edge_to_center)
  return _internal_front_edge_to_center();
}
inline void VehicleParam::_internal_set_front_edge_to_center(double value) {
  
  front_edge_to_center_ = value;
}
inline void VehicleParam::set_front_edge_to_center(double value) {
  _internal_set_front_edge_to_center(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.front_edge_to_center)
}

// double back_edge_to_center = 4;
inline void VehicleParam::clear_back_edge_to_center() {
  back_edge_to_center_ = 0;
}
inline double VehicleParam::_internal_back_edge_to_center() const {
  return back_edge_to_center_;
}
inline double VehicleParam::back_edge_to_center() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.back_edge_to_center)
  return _internal_back_edge_to_center();
}
inline void VehicleParam::_internal_set_back_edge_to_center(double value) {
  
  back_edge_to_center_ = value;
}
inline void VehicleParam::set_back_edge_to_center(double value) {
  _internal_set_back_edge_to_center(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.back_edge_to_center)
}

// double left_edge_to_center = 5;
inline void VehicleParam::clear_left_edge_to_center() {
  left_edge_to_center_ = 0;
}
inline double VehicleParam::_internal_left_edge_to_center() const {
  return left_edge_to_center_;
}
inline double VehicleParam::left_edge_to_center() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.left_edge_to_center)
  return _internal_left_edge_to_center();
}
inline void VehicleParam::_internal_set_left_edge_to_center(double value) {
  
  left_edge_to_center_ = value;
}
inline void VehicleParam::set_left_edge_to_center(double value) {
  _internal_set_left_edge_to_center(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.left_edge_to_center)
}

// double right_edge_to_center = 6;
inline void VehicleParam::clear_right_edge_to_center() {
  right_edge_to_center_ = 0;
}
inline double VehicleParam::_internal_right_edge_to_center() const {
  return right_edge_to_center_;
}
inline double VehicleParam::right_edge_to_center() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.right_edge_to_center)
  return _internal_right_edge_to_center();
}
inline void VehicleParam::_internal_set_right_edge_to_center(double value) {
  
  right_edge_to_center_ = value;
}
inline void VehicleParam::set_right_edge_to_center(double value) {
  _internal_set_right_edge_to_center(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.right_edge_to_center)
}

// double length = 7;
inline void VehicleParam::clear_length() {
  length_ = 0;
}
inline double VehicleParam::_internal_length() const {
  return length_;
}
inline double VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.length)
  return _internal_length();
}
inline void VehicleParam::_internal_set_length(double value) {
  
  length_ = value;
}
inline void VehicleParam::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.length)
}

// double width = 8;
inline void VehicleParam::clear_width() {
  width_ = 0;
}
inline double VehicleParam::_internal_width() const {
  return width_;
}
inline double VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.width)
  return _internal_width();
}
inline void VehicleParam::_internal_set_width(double value) {
  
  width_ = value;
}
inline void VehicleParam::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.width)
}

// double height = 9;
inline void VehicleParam::clear_height() {
  height_ = 0;
}
inline double VehicleParam::_internal_height() const {
  return height_;
}
inline double VehicleParam::height() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.height)
  return _internal_height();
}
inline void VehicleParam::_internal_set_height(double value) {
  
  height_ = value;
}
inline void VehicleParam::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.height)
}

// double min_turn_radius = 10;
inline void VehicleParam::clear_min_turn_radius() {
  min_turn_radius_ = 0;
}
inline double VehicleParam::_internal_min_turn_radius() const {
  return min_turn_radius_;
}
inline double VehicleParam::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.min_turn_radius)
  return _internal_min_turn_radius();
}
inline void VehicleParam::_internal_set_min_turn_radius(double value) {
  
  min_turn_radius_ = value;
}
inline void VehicleParam::set_min_turn_radius(double value) {
  _internal_set_min_turn_radius(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.min_turn_radius)
}

// double max_acceleration = 11;
inline void VehicleParam::clear_max_acceleration() {
  max_acceleration_ = 0;
}
inline double VehicleParam::_internal_max_acceleration() const {
  return max_acceleration_;
}
inline double VehicleParam::max_acceleration() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.max_acceleration)
  return _internal_max_acceleration();
}
inline void VehicleParam::_internal_set_max_acceleration(double value) {
  
  max_acceleration_ = value;
}
inline void VehicleParam::set_max_acceleration(double value) {
  _internal_set_max_acceleration(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.max_acceleration)
}

// double max_deceleration = 12;
inline void VehicleParam::clear_max_deceleration() {
  max_deceleration_ = 0;
}
inline double VehicleParam::_internal_max_deceleration() const {
  return max_deceleration_;
}
inline double VehicleParam::max_deceleration() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.max_deceleration)
  return _internal_max_deceleration();
}
inline void VehicleParam::_internal_set_max_deceleration(double value) {
  
  max_deceleration_ = value;
}
inline void VehicleParam::set_max_deceleration(double value) {
  _internal_set_max_deceleration(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.max_deceleration)
}

// double max_steer_angle = 13;
inline void VehicleParam::clear_max_steer_angle() {
  max_steer_angle_ = 0;
}
inline double VehicleParam::_internal_max_steer_angle() const {
  return max_steer_angle_;
}
inline double VehicleParam::max_steer_angle() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.max_steer_angle)
  return _internal_max_steer_angle();
}
inline void VehicleParam::_internal_set_max_steer_angle(double value) {
  
  max_steer_angle_ = value;
}
inline void VehicleParam::set_max_steer_angle(double value) {
  _internal_set_max_steer_angle(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.max_steer_angle)
}

// double max_steer_angle_rate = 14;
inline void VehicleParam::clear_max_steer_angle_rate() {
  max_steer_angle_rate_ = 0;
}
inline double VehicleParam::_internal_max_steer_angle_rate() const {
  return max_steer_angle_rate_;
}
inline double VehicleParam::max_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.max_steer_angle_rate)
  return _internal_max_steer_angle_rate();
}
inline void VehicleParam::_internal_set_max_steer_angle_rate(double value) {
  
  max_steer_angle_rate_ = value;
}
inline void VehicleParam::set_max_steer_angle_rate(double value) {
  _internal_set_max_steer_angle_rate(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.max_steer_angle_rate)
}

// double min_steer_angle_rate = 15;
inline void VehicleParam::clear_min_steer_angle_rate() {
  min_steer_angle_rate_ = 0;
}
inline double VehicleParam::_internal_min_steer_angle_rate() const {
  return min_steer_angle_rate_;
}
inline double VehicleParam::min_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.min_steer_angle_rate)
  return _internal_min_steer_angle_rate();
}
inline void VehicleParam::_internal_set_min_steer_angle_rate(double value) {
  
  min_steer_angle_rate_ = value;
}
inline void VehicleParam::set_min_steer_angle_rate(double value) {
  _internal_set_min_steer_angle_rate(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.min_steer_angle_rate)
}

// double steer_ratio = 16;
inline void VehicleParam::clear_steer_ratio() {
  steer_ratio_ = 0;
}
inline double VehicleParam::_internal_steer_ratio() const {
  return steer_ratio_;
}
inline double VehicleParam::steer_ratio() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.steer_ratio)
  return _internal_steer_ratio();
}
inline void VehicleParam::_internal_set_steer_ratio(double value) {
  
  steer_ratio_ = value;
}
inline void VehicleParam::set_steer_ratio(double value) {
  _internal_set_steer_ratio(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.steer_ratio)
}

// double wheel_base = 17;
inline void VehicleParam::clear_wheel_base() {
  wheel_base_ = 0;
}
inline double VehicleParam::_internal_wheel_base() const {
  return wheel_base_;
}
inline double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.wheel_base)
  return _internal_wheel_base();
}
inline void VehicleParam::_internal_set_wheel_base(double value) {
  
  wheel_base_ = value;
}
inline void VehicleParam::set_wheel_base(double value) {
  _internal_set_wheel_base(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.wheel_base)
}

// double wheel_rolling_radius = 18;
inline void VehicleParam::clear_wheel_rolling_radius() {
  wheel_rolling_radius_ = 0;
}
inline double VehicleParam::_internal_wheel_rolling_radius() const {
  return wheel_rolling_radius_;
}
inline double VehicleParam::wheel_rolling_radius() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.wheel_rolling_radius)
  return _internal_wheel_rolling_radius();
}
inline void VehicleParam::_internal_set_wheel_rolling_radius(double value) {
  
  wheel_rolling_radius_ = value;
}
inline void VehicleParam::set_wheel_rolling_radius(double value) {
  _internal_set_wheel_rolling_radius(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.wheel_rolling_radius)
}

// float max_abs_speed_when_stopped = 19;
inline void VehicleParam::clear_max_abs_speed_when_stopped() {
  max_abs_speed_when_stopped_ = 0;
}
inline float VehicleParam::_internal_max_abs_speed_when_stopped() const {
  return max_abs_speed_when_stopped_;
}
inline float VehicleParam::max_abs_speed_when_stopped() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.max_abs_speed_when_stopped)
  return _internal_max_abs_speed_when_stopped();
}
inline void VehicleParam::_internal_set_max_abs_speed_when_stopped(float value) {
  
  max_abs_speed_when_stopped_ = value;
}
inline void VehicleParam::set_max_abs_speed_when_stopped(float value) {
  _internal_set_max_abs_speed_when_stopped(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.max_abs_speed_when_stopped)
}

// double brake_deadzone = 20;
inline void VehicleParam::clear_brake_deadzone() {
  brake_deadzone_ = 0;
}
inline double VehicleParam::_internal_brake_deadzone() const {
  return brake_deadzone_;
}
inline double VehicleParam::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.brake_deadzone)
  return _internal_brake_deadzone();
}
inline void VehicleParam::_internal_set_brake_deadzone(double value) {
  
  brake_deadzone_ = value;
}
inline void VehicleParam::set_brake_deadzone(double value) {
  _internal_set_brake_deadzone(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.brake_deadzone)
}

// double throttle_deadzone = 21;
inline void VehicleParam::clear_throttle_deadzone() {
  throttle_deadzone_ = 0;
}
inline double VehicleParam::_internal_throttle_deadzone() const {
  return throttle_deadzone_;
}
inline double VehicleParam::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.throttle_deadzone)
  return _internal_throttle_deadzone();
}
inline void VehicleParam::_internal_set_throttle_deadzone(double value) {
  
  throttle_deadzone_ = value;
}
inline void VehicleParam::set_throttle_deadzone(double value) {
  _internal_set_throttle_deadzone(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.config_msgs.VehicleParam.throttle_deadzone)
}

// .openbot_bridge.config_msgs.LatencyParam steering_latency_param = 22;
inline bool VehicleParam::_internal_has_steering_latency_param() const {
  return this != internal_default_instance() && steering_latency_param_ != nullptr;
}
inline bool VehicleParam::has_steering_latency_param() const {
  return _internal_has_steering_latency_param();
}
inline void VehicleParam::clear_steering_latency_param() {
  if (GetArena() == nullptr && steering_latency_param_ != nullptr) {
    delete steering_latency_param_;
  }
  steering_latency_param_ = nullptr;
}
inline const ::openbot_bridge::config_msgs::LatencyParam& VehicleParam::_internal_steering_latency_param() const {
  const ::openbot_bridge::config_msgs::LatencyParam* p = steering_latency_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::config_msgs::LatencyParam&>(
      ::openbot_bridge::config_msgs::_LatencyParam_default_instance_);
}
inline const ::openbot_bridge::config_msgs::LatencyParam& VehicleParam::steering_latency_param() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.steering_latency_param)
  return _internal_steering_latency_param();
}
inline void VehicleParam::unsafe_arena_set_allocated_steering_latency_param(
    ::openbot_bridge::config_msgs::LatencyParam* steering_latency_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steering_latency_param_);
  }
  steering_latency_param_ = steering_latency_param;
  if (steering_latency_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.config_msgs.VehicleParam.steering_latency_param)
}
inline ::openbot_bridge::config_msgs::LatencyParam* VehicleParam::release_steering_latency_param() {
  
  ::openbot_bridge::config_msgs::LatencyParam* temp = steering_latency_param_;
  steering_latency_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::config_msgs::LatencyParam* VehicleParam::unsafe_arena_release_steering_latency_param() {
  // @@protoc_insertion_point(field_release:openbot_bridge.config_msgs.VehicleParam.steering_latency_param)
  
  ::openbot_bridge::config_msgs::LatencyParam* temp = steering_latency_param_;
  steering_latency_param_ = nullptr;
  return temp;
}
inline ::openbot_bridge::config_msgs::LatencyParam* VehicleParam::_internal_mutable_steering_latency_param() {
  
  if (steering_latency_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::config_msgs::LatencyParam>(GetArena());
    steering_latency_param_ = p;
  }
  return steering_latency_param_;
}
inline ::openbot_bridge::config_msgs::LatencyParam* VehicleParam::mutable_steering_latency_param() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.config_msgs.VehicleParam.steering_latency_param)
  return _internal_mutable_steering_latency_param();
}
inline void VehicleParam::set_allocated_steering_latency_param(::openbot_bridge::config_msgs::LatencyParam* steering_latency_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete steering_latency_param_;
  }
  if (steering_latency_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(steering_latency_param);
    if (message_arena != submessage_arena) {
      steering_latency_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steering_latency_param, submessage_arena);
    }
    
  } else {
    
  }
  steering_latency_param_ = steering_latency_param;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.config_msgs.VehicleParam.steering_latency_param)
}

// .openbot_bridge.config_msgs.LatencyParam throttle_latency_param = 23;
inline bool VehicleParam::_internal_has_throttle_latency_param() const {
  return this != internal_default_instance() && throttle_latency_param_ != nullptr;
}
inline bool VehicleParam::has_throttle_latency_param() const {
  return _internal_has_throttle_latency_param();
}
inline void VehicleParam::clear_throttle_latency_param() {
  if (GetArena() == nullptr && throttle_latency_param_ != nullptr) {
    delete throttle_latency_param_;
  }
  throttle_latency_param_ = nullptr;
}
inline const ::openbot_bridge::config_msgs::LatencyParam& VehicleParam::_internal_throttle_latency_param() const {
  const ::openbot_bridge::config_msgs::LatencyParam* p = throttle_latency_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::config_msgs::LatencyParam&>(
      ::openbot_bridge::config_msgs::_LatencyParam_default_instance_);
}
inline const ::openbot_bridge::config_msgs::LatencyParam& VehicleParam::throttle_latency_param() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.throttle_latency_param)
  return _internal_throttle_latency_param();
}
inline void VehicleParam::unsafe_arena_set_allocated_throttle_latency_param(
    ::openbot_bridge::config_msgs::LatencyParam* throttle_latency_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(throttle_latency_param_);
  }
  throttle_latency_param_ = throttle_latency_param;
  if (throttle_latency_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.config_msgs.VehicleParam.throttle_latency_param)
}
inline ::openbot_bridge::config_msgs::LatencyParam* VehicleParam::release_throttle_latency_param() {
  
  ::openbot_bridge::config_msgs::LatencyParam* temp = throttle_latency_param_;
  throttle_latency_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::config_msgs::LatencyParam* VehicleParam::unsafe_arena_release_throttle_latency_param() {
  // @@protoc_insertion_point(field_release:openbot_bridge.config_msgs.VehicleParam.throttle_latency_param)
  
  ::openbot_bridge::config_msgs::LatencyParam* temp = throttle_latency_param_;
  throttle_latency_param_ = nullptr;
  return temp;
}
inline ::openbot_bridge::config_msgs::LatencyParam* VehicleParam::_internal_mutable_throttle_latency_param() {
  
  if (throttle_latency_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::config_msgs::LatencyParam>(GetArena());
    throttle_latency_param_ = p;
  }
  return throttle_latency_param_;
}
inline ::openbot_bridge::config_msgs::LatencyParam* VehicleParam::mutable_throttle_latency_param() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.config_msgs.VehicleParam.throttle_latency_param)
  return _internal_mutable_throttle_latency_param();
}
inline void VehicleParam::set_allocated_throttle_latency_param(::openbot_bridge::config_msgs::LatencyParam* throttle_latency_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete throttle_latency_param_;
  }
  if (throttle_latency_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(throttle_latency_param);
    if (message_arena != submessage_arena) {
      throttle_latency_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, throttle_latency_param, submessage_arena);
    }
    
  } else {
    
  }
  throttle_latency_param_ = throttle_latency_param;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.config_msgs.VehicleParam.throttle_latency_param)
}

// .openbot_bridge.config_msgs.LatencyParam brake_latency_param = 24;
inline bool VehicleParam::_internal_has_brake_latency_param() const {
  return this != internal_default_instance() && brake_latency_param_ != nullptr;
}
inline bool VehicleParam::has_brake_latency_param() const {
  return _internal_has_brake_latency_param();
}
inline void VehicleParam::clear_brake_latency_param() {
  if (GetArena() == nullptr && brake_latency_param_ != nullptr) {
    delete brake_latency_param_;
  }
  brake_latency_param_ = nullptr;
}
inline const ::openbot_bridge::config_msgs::LatencyParam& VehicleParam::_internal_brake_latency_param() const {
  const ::openbot_bridge::config_msgs::LatencyParam* p = brake_latency_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::config_msgs::LatencyParam&>(
      ::openbot_bridge::config_msgs::_LatencyParam_default_instance_);
}
inline const ::openbot_bridge::config_msgs::LatencyParam& VehicleParam::brake_latency_param() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleParam.brake_latency_param)
  return _internal_brake_latency_param();
}
inline void VehicleParam::unsafe_arena_set_allocated_brake_latency_param(
    ::openbot_bridge::config_msgs::LatencyParam* brake_latency_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brake_latency_param_);
  }
  brake_latency_param_ = brake_latency_param;
  if (brake_latency_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.config_msgs.VehicleParam.brake_latency_param)
}
inline ::openbot_bridge::config_msgs::LatencyParam* VehicleParam::release_brake_latency_param() {
  
  ::openbot_bridge::config_msgs::LatencyParam* temp = brake_latency_param_;
  brake_latency_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::config_msgs::LatencyParam* VehicleParam::unsafe_arena_release_brake_latency_param() {
  // @@protoc_insertion_point(field_release:openbot_bridge.config_msgs.VehicleParam.brake_latency_param)
  
  ::openbot_bridge::config_msgs::LatencyParam* temp = brake_latency_param_;
  brake_latency_param_ = nullptr;
  return temp;
}
inline ::openbot_bridge::config_msgs::LatencyParam* VehicleParam::_internal_mutable_brake_latency_param() {
  
  if (brake_latency_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::config_msgs::LatencyParam>(GetArena());
    brake_latency_param_ = p;
  }
  return brake_latency_param_;
}
inline ::openbot_bridge::config_msgs::LatencyParam* VehicleParam::mutable_brake_latency_param() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.config_msgs.VehicleParam.brake_latency_param)
  return _internal_mutable_brake_latency_param();
}
inline void VehicleParam::set_allocated_brake_latency_param(::openbot_bridge::config_msgs::LatencyParam* brake_latency_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete brake_latency_param_;
  }
  if (brake_latency_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(brake_latency_param);
    if (message_arena != submessage_arena) {
      brake_latency_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_latency_param, submessage_arena);
    }
    
  } else {
    
  }
  brake_latency_param_ = brake_latency_param;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.config_msgs.VehicleParam.brake_latency_param)
}

// -------------------------------------------------------------------

// VehicleConfig

// .openbot_bridge.basic_msgs.Header header = 1;
inline bool VehicleConfig::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool VehicleConfig::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::basic_msgs::Header& VehicleConfig::_internal_header() const {
  const ::openbot_bridge::basic_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::basic_msgs::Header&>(
      ::openbot_bridge::basic_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::basic_msgs::Header& VehicleConfig::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleConfig.header)
  return _internal_header();
}
inline void VehicleConfig::unsafe_arena_set_allocated_header(
    ::openbot_bridge::basic_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.config_msgs.VehicleConfig.header)
}
inline ::openbot_bridge::basic_msgs::Header* VehicleConfig::release_header() {
  
  ::openbot_bridge::basic_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::basic_msgs::Header* VehicleConfig::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.config_msgs.VehicleConfig.header)
  
  ::openbot_bridge::basic_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::basic_msgs::Header* VehicleConfig::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::basic_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::basic_msgs::Header* VehicleConfig::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.config_msgs.VehicleConfig.header)
  return _internal_mutable_header();
}
inline void VehicleConfig::set_allocated_header(::openbot_bridge::basic_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.config_msgs.VehicleConfig.header)
}

// .openbot_bridge.config_msgs.VehicleParam vehicle_param = 2;
inline bool VehicleConfig::_internal_has_vehicle_param() const {
  return this != internal_default_instance() && vehicle_param_ != nullptr;
}
inline bool VehicleConfig::has_vehicle_param() const {
  return _internal_has_vehicle_param();
}
inline void VehicleConfig::clear_vehicle_param() {
  if (GetArena() == nullptr && vehicle_param_ != nullptr) {
    delete vehicle_param_;
  }
  vehicle_param_ = nullptr;
}
inline const ::openbot_bridge::config_msgs::VehicleParam& VehicleConfig::_internal_vehicle_param() const {
  const ::openbot_bridge::config_msgs::VehicleParam* p = vehicle_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::config_msgs::VehicleParam&>(
      ::openbot_bridge::config_msgs::_VehicleParam_default_instance_);
}
inline const ::openbot_bridge::config_msgs::VehicleParam& VehicleConfig::vehicle_param() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleConfig.vehicle_param)
  return _internal_vehicle_param();
}
inline void VehicleConfig::unsafe_arena_set_allocated_vehicle_param(
    ::openbot_bridge::config_msgs::VehicleParam* vehicle_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_param_);
  }
  vehicle_param_ = vehicle_param;
  if (vehicle_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.config_msgs.VehicleConfig.vehicle_param)
}
inline ::openbot_bridge::config_msgs::VehicleParam* VehicleConfig::release_vehicle_param() {
  
  ::openbot_bridge::config_msgs::VehicleParam* temp = vehicle_param_;
  vehicle_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::config_msgs::VehicleParam* VehicleConfig::unsafe_arena_release_vehicle_param() {
  // @@protoc_insertion_point(field_release:openbot_bridge.config_msgs.VehicleConfig.vehicle_param)
  
  ::openbot_bridge::config_msgs::VehicleParam* temp = vehicle_param_;
  vehicle_param_ = nullptr;
  return temp;
}
inline ::openbot_bridge::config_msgs::VehicleParam* VehicleConfig::_internal_mutable_vehicle_param() {
  
  if (vehicle_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::config_msgs::VehicleParam>(GetArena());
    vehicle_param_ = p;
  }
  return vehicle_param_;
}
inline ::openbot_bridge::config_msgs::VehicleParam* VehicleConfig::mutable_vehicle_param() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.config_msgs.VehicleConfig.vehicle_param)
  return _internal_mutable_vehicle_param();
}
inline void VehicleConfig::set_allocated_vehicle_param(::openbot_bridge::config_msgs::VehicleParam* vehicle_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vehicle_param_;
  }
  if (vehicle_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vehicle_param);
    if (message_arena != submessage_arena) {
      vehicle_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_param, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_param_ = vehicle_param;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.config_msgs.VehicleConfig.vehicle_param)
}

// .openbot_bridge.config_msgs.Extrinsics extrinsics = 3;
inline bool VehicleConfig::_internal_has_extrinsics() const {
  return this != internal_default_instance() && extrinsics_ != nullptr;
}
inline bool VehicleConfig::has_extrinsics() const {
  return _internal_has_extrinsics();
}
inline void VehicleConfig::clear_extrinsics() {
  if (GetArena() == nullptr && extrinsics_ != nullptr) {
    delete extrinsics_;
  }
  extrinsics_ = nullptr;
}
inline const ::openbot_bridge::config_msgs::Extrinsics& VehicleConfig::_internal_extrinsics() const {
  const ::openbot_bridge::config_msgs::Extrinsics* p = extrinsics_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::config_msgs::Extrinsics&>(
      ::openbot_bridge::config_msgs::_Extrinsics_default_instance_);
}
inline const ::openbot_bridge::config_msgs::Extrinsics& VehicleConfig::extrinsics() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.config_msgs.VehicleConfig.extrinsics)
  return _internal_extrinsics();
}
inline void VehicleConfig::unsafe_arena_set_allocated_extrinsics(
    ::openbot_bridge::config_msgs::Extrinsics* extrinsics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extrinsics_);
  }
  extrinsics_ = extrinsics;
  if (extrinsics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.config_msgs.VehicleConfig.extrinsics)
}
inline ::openbot_bridge::config_msgs::Extrinsics* VehicleConfig::release_extrinsics() {
  
  ::openbot_bridge::config_msgs::Extrinsics* temp = extrinsics_;
  extrinsics_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::config_msgs::Extrinsics* VehicleConfig::unsafe_arena_release_extrinsics() {
  // @@protoc_insertion_point(field_release:openbot_bridge.config_msgs.VehicleConfig.extrinsics)
  
  ::openbot_bridge::config_msgs::Extrinsics* temp = extrinsics_;
  extrinsics_ = nullptr;
  return temp;
}
inline ::openbot_bridge::config_msgs::Extrinsics* VehicleConfig::_internal_mutable_extrinsics() {
  
  if (extrinsics_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::config_msgs::Extrinsics>(GetArena());
    extrinsics_ = p;
  }
  return extrinsics_;
}
inline ::openbot_bridge::config_msgs::Extrinsics* VehicleConfig::mutable_extrinsics() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.config_msgs.VehicleConfig.extrinsics)
  return _internal_mutable_extrinsics();
}
inline void VehicleConfig::set_allocated_extrinsics(::openbot_bridge::config_msgs::Extrinsics* extrinsics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extrinsics_;
  }
  if (extrinsics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extrinsics);
    if (message_arena != submessage_arena) {
      extrinsics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extrinsics, submessage_arena);
    }
    
  } else {
    
  }
  extrinsics_ = extrinsics;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.config_msgs.VehicleConfig.extrinsics)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config_msgs
}  // namespace openbot_bridge

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::openbot_bridge::config_msgs::VehicleBrand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openbot_bridge::config_msgs::VehicleBrand>() {
  return ::openbot_bridge::config_msgs::VehicleBrand_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto
