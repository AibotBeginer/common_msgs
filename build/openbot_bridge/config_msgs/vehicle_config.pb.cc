// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/config_msgs/vehicle_config.proto

#include "openbot_bridge/config_msgs/vehicle_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_openbot_5fbridge_2fbasic_5fmsgs_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleID_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extrinsics_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatencyParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transform_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VehicleParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto;
namespace openbot_bridge {
namespace config_msgs {
class TransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transform> _instance;
} _Transform_default_instance_;
class ExtrinsicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extrinsics> _instance;
} _Extrinsics_default_instance_;
class LatencyParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatencyParam> _instance;
} _LatencyParam_default_instance_;
class VehicleParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleParam> _instance;
} _VehicleParam_default_instance_;
class VehicleConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleConfig> _instance;
} _VehicleConfig_default_instance_;
}  // namespace config_msgs
}  // namespace openbot_bridge
static void InitDefaultsscc_info_Extrinsics_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::config_msgs::_Extrinsics_default_instance_;
    new (ptr) ::openbot_bridge::config_msgs::Extrinsics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extrinsics_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Extrinsics_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto}, {
      &scc_info_Transform_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_LatencyParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::config_msgs::_LatencyParam_default_instance_;
    new (ptr) ::openbot_bridge::config_msgs::LatencyParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatencyParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LatencyParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Transform_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::config_msgs::_Transform_default_instance_;
    new (ptr) ::openbot_bridge::config_msgs::Transform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transform_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Transform_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto}, {
      &scc_info_Point3D_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto.base,
      &scc_info_Quaternion_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_VehicleConfig_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::config_msgs::_VehicleConfig_default_instance_;
    new (ptr) ::openbot_bridge::config_msgs::VehicleConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VehicleConfig_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_VehicleConfig_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fbasic_5fmsgs_2fheader_2eproto.base,
      &scc_info_VehicleParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,
      &scc_info_Extrinsics_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_VehicleParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::config_msgs::_VehicleParam_default_instance_;
    new (ptr) ::openbot_bridge::config_msgs::VehicleParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VehicleParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VehicleParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto}, {
      &scc_info_VehicleID_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fid_2eproto.base,
      &scc_info_LatencyParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::Transform, source_frame_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::Transform, target_frame_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::Transform, translation_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::Transform, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::Extrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::Extrinsics, tansforms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::LatencyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::LatencyParam, dead_time_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::LatencyParam, rise_time_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::LatencyParam, peak_time_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::LatencyParam, settling_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, brand_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, front_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, back_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, left_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, right_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, length_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, width_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, height_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, min_turn_radius_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, max_deceleration_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, max_steer_angle_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, max_steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, min_steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, steer_ratio_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, wheel_base_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, wheel_rolling_radius_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, max_abs_speed_when_stopped_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, brake_deadzone_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, throttle_deadzone_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, steering_latency_param_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, throttle_latency_param_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleParam, brake_latency_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleConfig, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleConfig, vehicle_param_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::config_msgs::VehicleConfig, extrinsics_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openbot_bridge::config_msgs::Transform)},
  { 9, -1, sizeof(::openbot_bridge::config_msgs::Extrinsics)},
  { 15, -1, sizeof(::openbot_bridge::config_msgs::LatencyParam)},
  { 24, -1, sizeof(::openbot_bridge::config_msgs::VehicleParam)},
  { 53, -1, sizeof(::openbot_bridge::config_msgs::VehicleConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::config_msgs::_Transform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::config_msgs::_Extrinsics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::config_msgs::_LatencyParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::config_msgs::_VehicleParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::config_msgs::_VehicleConfig_default_instance_),
};

const char descriptor_table_protodef_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/openbot_bridge/config_msgs/vehicle_con"
  "fig.proto\022\032openbot_bridge.config_msgs\032&o"
  "penbot_bridge/basic_msgs/header.proto\032(o"
  "penbot_bridge/basic_msgs/geometry.proto\032"
  "*openbot_bridge/basic_msgs/vehicle_id.pr"
  "oto\"\251\001\n\tTransform\022\024\n\014source_frame\030\001 \001(\014\022"
  "\024\n\014target_frame\030\002 \001(\014\0227\n\013translation\030\003 \001"
  "(\0132\".openbot_bridge.basic_msgs.Point3D\0227"
  "\n\010rotation\030\004 \001(\0132%.openbot_bridge.basic_"
  "msgs.Quaternion\"F\n\nExtrinsics\0228\n\ttansfor"
  "ms\030\001 \003(\0132%.openbot_bridge.config_msgs.Tr"
  "ansform\"^\n\014LatencyParam\022\021\n\tdead_time\030\001 \001"
  "(\001\022\021\n\trise_time\030\002 \001(\001\022\021\n\tpeak_time\030\003 \001(\001"
  "\022\025\n\rsettling_time\030\004 \001(\001\"\301\006\n\014VehicleParam"
  "\0227\n\005brand\030\001 \001(\0162(.openbot_bridge.config_"
  "msgs.VehicleBrand\0228\n\nvehicle_id\030\002 \001(\0132$."
  "openbot_bridge.basic_msgs.VehicleID\022\034\n\024f"
  "ront_edge_to_center\030\003 \001(\001\022\033\n\023back_edge_t"
  "o_center\030\004 \001(\001\022\033\n\023left_edge_to_center\030\005 "
  "\001(\001\022\034\n\024right_edge_to_center\030\006 \001(\001\022\016\n\006len"
  "gth\030\007 \001(\001\022\r\n\005width\030\010 \001(\001\022\016\n\006height\030\t \001(\001"
  "\022\027\n\017min_turn_radius\030\n \001(\001\022\030\n\020max_acceler"
  "ation\030\013 \001(\001\022\030\n\020max_deceleration\030\014 \001(\001\022\027\n"
  "\017max_steer_angle\030\r \001(\001\022\034\n\024max_steer_angl"
  "e_rate\030\016 \001(\001\022\034\n\024min_steer_angle_rate\030\017 \001"
  "(\001\022\023\n\013steer_ratio\030\020 \001(\001\022\022\n\nwheel_base\030\021 "
  "\001(\001\022\034\n\024wheel_rolling_radius\030\022 \001(\001\022\"\n\032max"
  "_abs_speed_when_stopped\030\023 \001(\002\022\026\n\016brake_d"
  "eadzone\030\024 \001(\001\022\031\n\021throttle_deadzone\030\025 \001(\001"
  "\022H\n\026steering_latency_param\030\026 \001(\0132(.openb"
  "ot_bridge.config_msgs.LatencyParam\022H\n\026th"
  "rottle_latency_param\030\027 \001(\0132(.openbot_bri"
  "dge.config_msgs.LatencyParam\022E\n\023brake_la"
  "tency_param\030\030 \001(\0132(.openbot_bridge.confi"
  "g_msgs.LatencyParam\"\277\001\n\rVehicleConfig\0221\n"
  "\006header\030\001 \001(\0132!.openbot_bridge.basic_msg"
  "s.Header\022\?\n\rvehicle_param\030\002 \001(\0132(.openbo"
  "t_bridge.config_msgs.VehicleParam\022:\n\next"
  "rinsics\030\003 \001(\0132&.openbot_bridge.config_ms"
  "gs.Extrinsics*~\n\014VehicleBrand\022\017\n\013LINCOLN"
  "_MKZ\020\000\022\007\n\003GEM\020\001\022\t\n\005LEXUS\020\002\022\013\n\007TRANSIT\020\003\022"
  "\007\n\003GE3\020\004\022\007\n\003WEY\020\005\022\014\n\010ZHONGYUN\020\006\022\006\n\002CH\020\007\022"
  "\010\n\004DKIT\020\010\022\n\n\006NEOLIX\020\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_deps[3] = {
  &::descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto,
  &::descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fheader_2eproto,
  &::descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_sccs[5] = {
  &scc_info_Extrinsics_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,
  &scc_info_LatencyParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,
  &scc_info_Transform_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,
  &scc_info_VehicleConfig_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,
  &scc_info_VehicleParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto, "openbot_bridge/config_msgs/vehicle_config.proto", 1709,
  &descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_once, descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_sccs, descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto_deps, 5, 3,
  schemas, file_default_instances, TableStruct_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto::offsets,
  file_level_metadata_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto, 5, file_level_enum_descriptors_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto, file_level_service_descriptors_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto)), true);
namespace openbot_bridge {
namespace config_msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleBrand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto[0];
}
bool VehicleBrand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Transform::_Internal {
 public:
  static const ::openbot_bridge::basic_msgs::Point3D& translation(const Transform* msg);
  static const ::openbot_bridge::basic_msgs::Quaternion& rotation(const Transform* msg);
};

const ::openbot_bridge::basic_msgs::Point3D&
Transform::_Internal::translation(const Transform* msg) {
  return *msg->translation_;
}
const ::openbot_bridge::basic_msgs::Quaternion&
Transform::_Internal::rotation(const Transform* msg) {
  return *msg->rotation_;
}
void Transform::clear_translation() {
  if (GetArena() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
void Transform::clear_rotation() {
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.config_msgs.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_frame().empty()) {
    source_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_frame(), 
      GetArena());
  }
  target_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_frame().empty()) {
    target_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_frame(), 
      GetArena());
  }
  if (from._internal_has_translation()) {
    translation_ = new ::openbot_bridge::basic_msgs::Point3D(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::openbot_bridge::basic_msgs::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.config_msgs.Transform)
}

void Transform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transform_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  source_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&translation_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(rotation_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:openbot_bridge.config_msgs.Transform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete rotation_;
}

void Transform::ArenaDtor(void* object) {
  Transform* _this = reinterpret_cast< Transform* >(object);
  (void)_this;
}
void Transform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transform& Transform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transform_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.config_msgs.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_frame_.ClearToEmpty();
  target_frame_.ClearToEmpty();
  if (GetArena() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes source_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes target_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.Point3D translation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.Quaternion rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.config_msgs.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes source_frame = 1;
  if (this->source_frame().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_source_frame(), target);
  }

  // bytes target_frame = 2;
  if (this->target_frame().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_target_frame(), target);
  }

  // .openbot_bridge.basic_msgs.Point3D translation = 3;
  if (this->has_translation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::translation(this), target, stream);
  }

  // .openbot_bridge.basic_msgs.Quaternion rotation = 4;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.config_msgs.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.config_msgs.Transform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes source_frame = 1;
  if (this->source_frame().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_source_frame());
  }

  // bytes target_frame = 2;
  if (this->target_frame().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target_frame());
  }

  // .openbot_bridge.basic_msgs.Point3D translation = 3;
  if (this->has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  // .openbot_bridge.basic_msgs.Quaternion rotation = 4;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.config_msgs.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  const Transform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.config_msgs.Transform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.config_msgs.Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.config_msgs.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_frame().size() > 0) {
    _internal_set_source_frame(from._internal_source_frame());
  }
  if (from.target_frame().size() > 0) {
    _internal_set_target_frame(from._internal_target_frame());
  }
  if (from.has_translation()) {
    _internal_mutable_translation()->::openbot_bridge::basic_msgs::Point3D::MergeFrom(from._internal_translation());
  }
  if (from.has_rotation()) {
    _internal_mutable_rotation()->::openbot_bridge::basic_msgs::Quaternion::MergeFrom(from._internal_rotation());
  }
}

void Transform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.config_msgs.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.config_msgs.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_frame_.Swap(&other->source_frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_frame_.Swap(&other->target_frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, rotation_)
      + sizeof(Transform::rotation_)
      - PROTOBUF_FIELD_OFFSET(Transform, translation_)>(
          reinterpret_cast<char*>(&translation_),
          reinterpret_cast<char*>(&other->translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Extrinsics::_Internal {
 public:
};

Extrinsics::Extrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tansforms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.config_msgs.Extrinsics)
}
Extrinsics::Extrinsics(const Extrinsics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tansforms_(from.tansforms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.config_msgs.Extrinsics)
}

void Extrinsics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Extrinsics_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
}

Extrinsics::~Extrinsics() {
  // @@protoc_insertion_point(destructor:openbot_bridge.config_msgs.Extrinsics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extrinsics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Extrinsics::ArenaDtor(void* object) {
  Extrinsics* _this = reinterpret_cast< Extrinsics* >(object);
  (void)_this;
}
void Extrinsics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extrinsics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extrinsics& Extrinsics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extrinsics_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Extrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.config_msgs.Extrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tansforms_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extrinsics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .openbot_bridge.config_msgs.Transform tansforms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tansforms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extrinsics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.config_msgs.Extrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openbot_bridge.config_msgs.Transform tansforms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tansforms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tansforms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.config_msgs.Extrinsics)
  return target;
}

size_t Extrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.config_msgs.Extrinsics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.config_msgs.Transform tansforms = 1;
  total_size += 1UL * this->_internal_tansforms_size();
  for (const auto& msg : this->tansforms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extrinsics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.config_msgs.Extrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  const Extrinsics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extrinsics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.config_msgs.Extrinsics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.config_msgs.Extrinsics)
    MergeFrom(*source);
  }
}

void Extrinsics::MergeFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.config_msgs.Extrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tansforms_.MergeFrom(from.tansforms_);
}

void Extrinsics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.config_msgs.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extrinsics::CopyFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.config_msgs.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extrinsics::IsInitialized() const {
  return true;
}

void Extrinsics::InternalSwap(Extrinsics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tansforms_.InternalSwap(&other->tansforms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Extrinsics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LatencyParam::_Internal {
 public:
};

LatencyParam::LatencyParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.config_msgs.LatencyParam)
}
LatencyParam::LatencyParam(const LatencyParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dead_time_, &from.dead_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&settling_time_) -
    reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.config_msgs.LatencyParam)
}

void LatencyParam::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dead_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&settling_time_) -
      reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
}

LatencyParam::~LatencyParam() {
  // @@protoc_insertion_point(destructor:openbot_bridge.config_msgs.LatencyParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LatencyParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LatencyParam::ArenaDtor(void* object) {
  LatencyParam* _this = reinterpret_cast< LatencyParam* >(object);
  (void)_this;
}
void LatencyParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatencyParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatencyParam& LatencyParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatencyParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LatencyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.config_msgs.LatencyParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dead_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settling_time_) -
      reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dead_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dead_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rise_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          rise_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double peak_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          peak_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double settling_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          settling_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatencyParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.config_msgs.LatencyParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dead_time = 1;
  if (!(this->dead_time() <= 0 && this->dead_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dead_time(), target);
  }

  // double rise_time = 2;
  if (!(this->rise_time() <= 0 && this->rise_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rise_time(), target);
  }

  // double peak_time = 3;
  if (!(this->peak_time() <= 0 && this->peak_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_peak_time(), target);
  }

  // double settling_time = 4;
  if (!(this->settling_time() <= 0 && this->settling_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_settling_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.config_msgs.LatencyParam)
  return target;
}

size_t LatencyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.config_msgs.LatencyParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dead_time = 1;
  if (!(this->dead_time() <= 0 && this->dead_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double rise_time = 2;
  if (!(this->rise_time() <= 0 && this->rise_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double peak_time = 3;
  if (!(this->peak_time() <= 0 && this->peak_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double settling_time = 4;
  if (!(this->settling_time() <= 0 && this->settling_time() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.config_msgs.LatencyParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatencyParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.config_msgs.LatencyParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.config_msgs.LatencyParam)
    MergeFrom(*source);
  }
}

void LatencyParam::MergeFrom(const LatencyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.config_msgs.LatencyParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dead_time() <= 0 && from.dead_time() >= 0)) {
    _internal_set_dead_time(from._internal_dead_time());
  }
  if (!(from.rise_time() <= 0 && from.rise_time() >= 0)) {
    _internal_set_rise_time(from._internal_rise_time());
  }
  if (!(from.peak_time() <= 0 && from.peak_time() >= 0)) {
    _internal_set_peak_time(from._internal_peak_time());
  }
  if (!(from.settling_time() <= 0 && from.settling_time() >= 0)) {
    _internal_set_settling_time(from._internal_settling_time());
  }
}

void LatencyParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.config_msgs.LatencyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyParam::CopyFrom(const LatencyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.config_msgs.LatencyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyParam::IsInitialized() const {
  return true;
}

void LatencyParam::InternalSwap(LatencyParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyParam, settling_time_)
      + sizeof(LatencyParam::settling_time_)
      - PROTOBUF_FIELD_OFFSET(LatencyParam, dead_time_)>(
          reinterpret_cast<char*>(&dead_time_),
          reinterpret_cast<char*>(&other->dead_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VehicleParam::_Internal {
 public:
  static const ::openbot_bridge::basic_msgs::VehicleID& vehicle_id(const VehicleParam* msg);
  static const ::openbot_bridge::config_msgs::LatencyParam& steering_latency_param(const VehicleParam* msg);
  static const ::openbot_bridge::config_msgs::LatencyParam& throttle_latency_param(const VehicleParam* msg);
  static const ::openbot_bridge::config_msgs::LatencyParam& brake_latency_param(const VehicleParam* msg);
};

const ::openbot_bridge::basic_msgs::VehicleID&
VehicleParam::_Internal::vehicle_id(const VehicleParam* msg) {
  return *msg->vehicle_id_;
}
const ::openbot_bridge::config_msgs::LatencyParam&
VehicleParam::_Internal::steering_latency_param(const VehicleParam* msg) {
  return *msg->steering_latency_param_;
}
const ::openbot_bridge::config_msgs::LatencyParam&
VehicleParam::_Internal::throttle_latency_param(const VehicleParam* msg) {
  return *msg->throttle_latency_param_;
}
const ::openbot_bridge::config_msgs::LatencyParam&
VehicleParam::_Internal::brake_latency_param(const VehicleParam* msg) {
  return *msg->brake_latency_param_;
}
void VehicleParam::clear_vehicle_id() {
  if (GetArena() == nullptr && vehicle_id_ != nullptr) {
    delete vehicle_id_;
  }
  vehicle_id_ = nullptr;
}
VehicleParam::VehicleParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.config_msgs.VehicleParam)
}
VehicleParam::VehicleParam(const VehicleParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehicle_id()) {
    vehicle_id_ = new ::openbot_bridge::basic_msgs::VehicleID(*from.vehicle_id_);
  } else {
    vehicle_id_ = nullptr;
  }
  if (from._internal_has_steering_latency_param()) {
    steering_latency_param_ = new ::openbot_bridge::config_msgs::LatencyParam(*from.steering_latency_param_);
  } else {
    steering_latency_param_ = nullptr;
  }
  if (from._internal_has_throttle_latency_param()) {
    throttle_latency_param_ = new ::openbot_bridge::config_msgs::LatencyParam(*from.throttle_latency_param_);
  } else {
    throttle_latency_param_ = nullptr;
  }
  if (from._internal_has_brake_latency_param()) {
    brake_latency_param_ = new ::openbot_bridge::config_msgs::LatencyParam(*from.brake_latency_param_);
  } else {
    brake_latency_param_ = nullptr;
  }
  ::memcpy(&front_edge_to_center_, &from.front_edge_to_center_,
    static_cast<size_t>(reinterpret_cast<char*>(&throttle_deadzone_) -
    reinterpret_cast<char*>(&front_edge_to_center_)) + sizeof(throttle_deadzone_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.config_msgs.VehicleParam)
}

void VehicleParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&throttle_deadzone_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(throttle_deadzone_));
}

VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:openbot_bridge.config_msgs.VehicleParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vehicle_id_;
  if (this != internal_default_instance()) delete steering_latency_param_;
  if (this != internal_default_instance()) delete throttle_latency_param_;
  if (this != internal_default_instance()) delete brake_latency_param_;
}

void VehicleParam::ArenaDtor(void* object) {
  VehicleParam* _this = reinterpret_cast< VehicleParam* >(object);
  (void)_this;
}
void VehicleParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleParam& VehicleParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleParam_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.config_msgs.VehicleParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vehicle_id_ != nullptr) {
    delete vehicle_id_;
  }
  vehicle_id_ = nullptr;
  if (GetArena() == nullptr && steering_latency_param_ != nullptr) {
    delete steering_latency_param_;
  }
  steering_latency_param_ = nullptr;
  if (GetArena() == nullptr && throttle_latency_param_ != nullptr) {
    delete throttle_latency_param_;
  }
  throttle_latency_param_ = nullptr;
  if (GetArena() == nullptr && brake_latency_param_ != nullptr) {
    delete brake_latency_param_;
  }
  brake_latency_param_ = nullptr;
  ::memset(&front_edge_to_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&throttle_deadzone_) -
      reinterpret_cast<char*>(&front_edge_to_center_)) + sizeof(throttle_deadzone_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.config_msgs.VehicleBrand brand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_brand(static_cast<::openbot_bridge::config_msgs::VehicleBrand>(val));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.VehicleID vehicle_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double front_edge_to_center = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          front_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double back_edge_to_center = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          back_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double left_edge_to_center = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          left_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double right_edge_to_center = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          right_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double min_turn_radius = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          min_turn_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_acceleration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_deceleration = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          max_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_steer_angle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          max_steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_steer_angle_rate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          max_steer_angle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double min_steer_angle_rate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          min_steer_angle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double steer_ratio = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          steer_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double wheel_base = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          wheel_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double wheel_rolling_radius = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          wheel_rolling_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float max_abs_speed_when_stopped = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          max_abs_speed_when_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double brake_deadzone = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          brake_deadzone_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double throttle_deadzone = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          throttle_deadzone_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.config_msgs.LatencyParam steering_latency_param = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_latency_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.config_msgs.LatencyParam throttle_latency_param = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle_latency_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.config_msgs.LatencyParam brake_latency_param = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_latency_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.config_msgs.VehicleParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.config_msgs.VehicleBrand brand = 1;
  if (this->brand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brand(), target);
  }

  // .openbot_bridge.basic_msgs.VehicleID vehicle_id = 2;
  if (this->has_vehicle_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vehicle_id(this), target, stream);
  }

  // double front_edge_to_center = 3;
  if (!(this->front_edge_to_center() <= 0 && this->front_edge_to_center() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_front_edge_to_center(), target);
  }

  // double back_edge_to_center = 4;
  if (!(this->back_edge_to_center() <= 0 && this->back_edge_to_center() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_back_edge_to_center(), target);
  }

  // double left_edge_to_center = 5;
  if (!(this->left_edge_to_center() <= 0 && this->left_edge_to_center() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_left_edge_to_center(), target);
  }

  // double right_edge_to_center = 6;
  if (!(this->right_edge_to_center() <= 0 && this->right_edge_to_center() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_right_edge_to_center(), target);
  }

  // double length = 7;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_length(), target);
  }

  // double width = 8;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_width(), target);
  }

  // double height = 9;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_height(), target);
  }

  // double min_turn_radius = 10;
  if (!(this->min_turn_radius() <= 0 && this->min_turn_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_min_turn_radius(), target);
  }

  // double max_acceleration = 11;
  if (!(this->max_acceleration() <= 0 && this->max_acceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_max_acceleration(), target);
  }

  // double max_deceleration = 12;
  if (!(this->max_deceleration() <= 0 && this->max_deceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_max_deceleration(), target);
  }

  // double max_steer_angle = 13;
  if (!(this->max_steer_angle() <= 0 && this->max_steer_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_max_steer_angle(), target);
  }

  // double max_steer_angle_rate = 14;
  if (!(this->max_steer_angle_rate() <= 0 && this->max_steer_angle_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_max_steer_angle_rate(), target);
  }

  // double min_steer_angle_rate = 15;
  if (!(this->min_steer_angle_rate() <= 0 && this->min_steer_angle_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_min_steer_angle_rate(), target);
  }

  // double steer_ratio = 16;
  if (!(this->steer_ratio() <= 0 && this->steer_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_steer_ratio(), target);
  }

  // double wheel_base = 17;
  if (!(this->wheel_base() <= 0 && this->wheel_base() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_wheel_base(), target);
  }

  // double wheel_rolling_radius = 18;
  if (!(this->wheel_rolling_radius() <= 0 && this->wheel_rolling_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_wheel_rolling_radius(), target);
  }

  // float max_abs_speed_when_stopped = 19;
  if (!(this->max_abs_speed_when_stopped() <= 0 && this->max_abs_speed_when_stopped() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_max_abs_speed_when_stopped(), target);
  }

  // double brake_deadzone = 20;
  if (!(this->brake_deadzone() <= 0 && this->brake_deadzone() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_brake_deadzone(), target);
  }

  // double throttle_deadzone = 21;
  if (!(this->throttle_deadzone() <= 0 && this->throttle_deadzone() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_throttle_deadzone(), target);
  }

  // .openbot_bridge.config_msgs.LatencyParam steering_latency_param = 22;
  if (this->has_steering_latency_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::steering_latency_param(this), target, stream);
  }

  // .openbot_bridge.config_msgs.LatencyParam throttle_latency_param = 23;
  if (this->has_throttle_latency_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::throttle_latency_param(this), target, stream);
  }

  // .openbot_bridge.config_msgs.LatencyParam brake_latency_param = 24;
  if (this->has_brake_latency_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::brake_latency_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.config_msgs.VehicleParam)
  return target;
}

size_t VehicleParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.config_msgs.VehicleParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.VehicleID vehicle_id = 2;
  if (this->has_vehicle_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_id_);
  }

  // .openbot_bridge.config_msgs.LatencyParam steering_latency_param = 22;
  if (this->has_steering_latency_param()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *steering_latency_param_);
  }

  // .openbot_bridge.config_msgs.LatencyParam throttle_latency_param = 23;
  if (this->has_throttle_latency_param()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *throttle_latency_param_);
  }

  // .openbot_bridge.config_msgs.LatencyParam brake_latency_param = 24;
  if (this->has_brake_latency_param()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *brake_latency_param_);
  }

  // double front_edge_to_center = 3;
  if (!(this->front_edge_to_center() <= 0 && this->front_edge_to_center() >= 0)) {
    total_size += 1 + 8;
  }

  // double back_edge_to_center = 4;
  if (!(this->back_edge_to_center() <= 0 && this->back_edge_to_center() >= 0)) {
    total_size += 1 + 8;
  }

  // double left_edge_to_center = 5;
  if (!(this->left_edge_to_center() <= 0 && this->left_edge_to_center() >= 0)) {
    total_size += 1 + 8;
  }

  // double right_edge_to_center = 6;
  if (!(this->right_edge_to_center() <= 0 && this->right_edge_to_center() >= 0)) {
    total_size += 1 + 8;
  }

  // double length = 7;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 8;
  }

  // double width = 8;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 9;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // double min_turn_radius = 10;
  if (!(this->min_turn_radius() <= 0 && this->min_turn_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // .openbot_bridge.config_msgs.VehicleBrand brand = 1;
  if (this->brand() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brand());
  }

  // float max_abs_speed_when_stopped = 19;
  if (!(this->max_abs_speed_when_stopped() <= 0 && this->max_abs_speed_when_stopped() >= 0)) {
    total_size += 2 + 4;
  }

  // double max_acceleration = 11;
  if (!(this->max_acceleration() <= 0 && this->max_acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_deceleration = 12;
  if (!(this->max_deceleration() <= 0 && this->max_deceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_steer_angle = 13;
  if (!(this->max_steer_angle() <= 0 && this->max_steer_angle() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_steer_angle_rate = 14;
  if (!(this->max_steer_angle_rate() <= 0 && this->max_steer_angle_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double min_steer_angle_rate = 15;
  if (!(this->min_steer_angle_rate() <= 0 && this->min_steer_angle_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double steer_ratio = 16;
  if (!(this->steer_ratio() <= 0 && this->steer_ratio() >= 0)) {
    total_size += 2 + 8;
  }

  // double wheel_base = 17;
  if (!(this->wheel_base() <= 0 && this->wheel_base() >= 0)) {
    total_size += 2 + 8;
  }

  // double wheel_rolling_radius = 18;
  if (!(this->wheel_rolling_radius() <= 0 && this->wheel_rolling_radius() >= 0)) {
    total_size += 2 + 8;
  }

  // double brake_deadzone = 20;
  if (!(this->brake_deadzone() <= 0 && this->brake_deadzone() >= 0)) {
    total_size += 2 + 8;
  }

  // double throttle_deadzone = 21;
  if (!(this->throttle_deadzone() <= 0 && this->throttle_deadzone() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.config_msgs.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.config_msgs.VehicleParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.config_msgs.VehicleParam)
    MergeFrom(*source);
  }
}

void VehicleParam::MergeFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.config_msgs.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vehicle_id()) {
    _internal_mutable_vehicle_id()->::openbot_bridge::basic_msgs::VehicleID::MergeFrom(from._internal_vehicle_id());
  }
  if (from.has_steering_latency_param()) {
    _internal_mutable_steering_latency_param()->::openbot_bridge::config_msgs::LatencyParam::MergeFrom(from._internal_steering_latency_param());
  }
  if (from.has_throttle_latency_param()) {
    _internal_mutable_throttle_latency_param()->::openbot_bridge::config_msgs::LatencyParam::MergeFrom(from._internal_throttle_latency_param());
  }
  if (from.has_brake_latency_param()) {
    _internal_mutable_brake_latency_param()->::openbot_bridge::config_msgs::LatencyParam::MergeFrom(from._internal_brake_latency_param());
  }
  if (!(from.front_edge_to_center() <= 0 && from.front_edge_to_center() >= 0)) {
    _internal_set_front_edge_to_center(from._internal_front_edge_to_center());
  }
  if (!(from.back_edge_to_center() <= 0 && from.back_edge_to_center() >= 0)) {
    _internal_set_back_edge_to_center(from._internal_back_edge_to_center());
  }
  if (!(from.left_edge_to_center() <= 0 && from.left_edge_to_center() >= 0)) {
    _internal_set_left_edge_to_center(from._internal_left_edge_to_center());
  }
  if (!(from.right_edge_to_center() <= 0 && from.right_edge_to_center() >= 0)) {
    _internal_set_right_edge_to_center(from._internal_right_edge_to_center());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.min_turn_radius() <= 0 && from.min_turn_radius() >= 0)) {
    _internal_set_min_turn_radius(from._internal_min_turn_radius());
  }
  if (from.brand() != 0) {
    _internal_set_brand(from._internal_brand());
  }
  if (!(from.max_abs_speed_when_stopped() <= 0 && from.max_abs_speed_when_stopped() >= 0)) {
    _internal_set_max_abs_speed_when_stopped(from._internal_max_abs_speed_when_stopped());
  }
  if (!(from.max_acceleration() <= 0 && from.max_acceleration() >= 0)) {
    _internal_set_max_acceleration(from._internal_max_acceleration());
  }
  if (!(from.max_deceleration() <= 0 && from.max_deceleration() >= 0)) {
    _internal_set_max_deceleration(from._internal_max_deceleration());
  }
  if (!(from.max_steer_angle() <= 0 && from.max_steer_angle() >= 0)) {
    _internal_set_max_steer_angle(from._internal_max_steer_angle());
  }
  if (!(from.max_steer_angle_rate() <= 0 && from.max_steer_angle_rate() >= 0)) {
    _internal_set_max_steer_angle_rate(from._internal_max_steer_angle_rate());
  }
  if (!(from.min_steer_angle_rate() <= 0 && from.min_steer_angle_rate() >= 0)) {
    _internal_set_min_steer_angle_rate(from._internal_min_steer_angle_rate());
  }
  if (!(from.steer_ratio() <= 0 && from.steer_ratio() >= 0)) {
    _internal_set_steer_ratio(from._internal_steer_ratio());
  }
  if (!(from.wheel_base() <= 0 && from.wheel_base() >= 0)) {
    _internal_set_wheel_base(from._internal_wheel_base());
  }
  if (!(from.wheel_rolling_radius() <= 0 && from.wheel_rolling_radius() >= 0)) {
    _internal_set_wheel_rolling_radius(from._internal_wheel_rolling_radius());
  }
  if (!(from.brake_deadzone() <= 0 && from.brake_deadzone() >= 0)) {
    _internal_set_brake_deadzone(from._internal_brake_deadzone());
  }
  if (!(from.throttle_deadzone() <= 0 && from.throttle_deadzone() >= 0)) {
    _internal_set_throttle_deadzone(from._internal_throttle_deadzone());
  }
}

void VehicleParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.config_msgs.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.config_msgs.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam::IsInitialized() const {
  return true;
}

void VehicleParam::InternalSwap(VehicleParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleParam, throttle_deadzone_)
      + sizeof(VehicleParam::throttle_deadzone_)
      - PROTOBUF_FIELD_OFFSET(VehicleParam, vehicle_id_)>(
          reinterpret_cast<char*>(&vehicle_id_),
          reinterpret_cast<char*>(&other->vehicle_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VehicleConfig::_Internal {
 public:
  static const ::openbot_bridge::basic_msgs::Header& header(const VehicleConfig* msg);
  static const ::openbot_bridge::config_msgs::VehicleParam& vehicle_param(const VehicleConfig* msg);
  static const ::openbot_bridge::config_msgs::Extrinsics& extrinsics(const VehicleConfig* msg);
};

const ::openbot_bridge::basic_msgs::Header&
VehicleConfig::_Internal::header(const VehicleConfig* msg) {
  return *msg->header_;
}
const ::openbot_bridge::config_msgs::VehicleParam&
VehicleConfig::_Internal::vehicle_param(const VehicleConfig* msg) {
  return *msg->vehicle_param_;
}
const ::openbot_bridge::config_msgs::Extrinsics&
VehicleConfig::_Internal::extrinsics(const VehicleConfig* msg) {
  return *msg->extrinsics_;
}
void VehicleConfig::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
VehicleConfig::VehicleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.config_msgs.VehicleConfig)
}
VehicleConfig::VehicleConfig(const VehicleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::basic_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_vehicle_param()) {
    vehicle_param_ = new ::openbot_bridge::config_msgs::VehicleParam(*from.vehicle_param_);
  } else {
    vehicle_param_ = nullptr;
  }
  if (from._internal_has_extrinsics()) {
    extrinsics_ = new ::openbot_bridge::config_msgs::Extrinsics(*from.extrinsics_);
  } else {
    extrinsics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.config_msgs.VehicleConfig)
}

void VehicleConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleConfig_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&extrinsics_) -
      reinterpret_cast<char*>(&header_)) + sizeof(extrinsics_));
}

VehicleConfig::~VehicleConfig() {
  // @@protoc_insertion_point(destructor:openbot_bridge.config_msgs.VehicleConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete vehicle_param_;
  if (this != internal_default_instance()) delete extrinsics_;
}

void VehicleConfig::ArenaDtor(void* object) {
  VehicleConfig* _this = reinterpret_cast< VehicleConfig* >(object);
  (void)_this;
}
void VehicleConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleConfig& VehicleConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleConfig_openbot_5fbridge_2fconfig_5fmsgs_2fvehicle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void VehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.config_msgs.VehicleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && vehicle_param_ != nullptr) {
    delete vehicle_param_;
  }
  vehicle_param_ = nullptr;
  if (GetArena() == nullptr && extrinsics_ != nullptr) {
    delete extrinsics_;
  }
  extrinsics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.basic_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.config_msgs.VehicleParam vehicle_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.config_msgs.Extrinsics extrinsics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extrinsics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.config_msgs.VehicleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.config_msgs.VehicleParam vehicle_param = 2;
  if (this->has_vehicle_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vehicle_param(this), target, stream);
  }

  // .openbot_bridge.config_msgs.Extrinsics extrinsics = 3;
  if (this->has_extrinsics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::extrinsics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.config_msgs.VehicleConfig)
  return target;
}

size_t VehicleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.config_msgs.VehicleConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.config_msgs.VehicleParam vehicle_param = 2;
  if (this->has_vehicle_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_param_);
  }

  // .openbot_bridge.config_msgs.Extrinsics extrinsics = 3;
  if (this->has_extrinsics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extrinsics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.config_msgs.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.config_msgs.VehicleConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.config_msgs.VehicleConfig)
    MergeFrom(*source);
  }
}

void VehicleConfig::MergeFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.config_msgs.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::basic_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_vehicle_param()) {
    _internal_mutable_vehicle_param()->::openbot_bridge::config_msgs::VehicleParam::MergeFrom(from._internal_vehicle_param());
  }
  if (from.has_extrinsics()) {
    _internal_mutable_extrinsics()->::openbot_bridge::config_msgs::Extrinsics::MergeFrom(from._internal_extrinsics());
  }
}

void VehicleConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.config_msgs.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleConfig::CopyFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.config_msgs.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleConfig::IsInitialized() const {
  return true;
}

void VehicleConfig::InternalSwap(VehicleConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleConfig, extrinsics_)
      + sizeof(VehicleConfig::extrinsics_)
      - PROTOBUF_FIELD_OFFSET(VehicleConfig, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openbot_bridge::config_msgs::Transform* Arena::CreateMaybeMessage< ::openbot_bridge::config_msgs::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::config_msgs::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::config_msgs::Extrinsics* Arena::CreateMaybeMessage< ::openbot_bridge::config_msgs::Extrinsics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::config_msgs::Extrinsics >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::config_msgs::LatencyParam* Arena::CreateMaybeMessage< ::openbot_bridge::config_msgs::LatencyParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::config_msgs::LatencyParam >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::config_msgs::VehicleParam* Arena::CreateMaybeMessage< ::openbot_bridge::config_msgs::VehicleParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::config_msgs::VehicleParam >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::config_msgs::VehicleConfig* Arena::CreateMaybeMessage< ::openbot_bridge::config_msgs::VehicleConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::config_msgs::VehicleConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
