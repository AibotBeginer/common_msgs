// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/chassis_msgs/chassis.proto

#include "openbot_bridge/chassis_msgs/chassis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fdrive_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EngageAdvice_openbot_5fbridge_2fbasic_5fmsgs_2fdrive_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_openbot_5fbridge_2fbasic_5fmsgs_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleID_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSignal_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChassisGPS_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckResponse_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_License_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Sonar_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Surround_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WheelSpeed_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto;
namespace openbot_bridge {
namespace chassis_msgs {
class ChassisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chassis> _instance;
} _Chassis_default_instance_;
class ChassisGPSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChassisGPS> _instance;
} _ChassisGPS_default_instance_;
class WheelSpeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WheelSpeed> _instance;
} _WheelSpeed_default_instance_;
class SonarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sonar> _instance;
} _Sonar_default_instance_;
class SurroundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Surround> _instance;
} _Surround_default_instance_;
class LicenseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<License> _instance;
} _License_default_instance_;
class CheckResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckResponse> _instance;
} _CheckResponse_default_instance_;
}  // namespace chassis_msgs
}  // namespace openbot_bridge
static void InitDefaultsscc_info_Chassis_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::chassis_msgs::_Chassis_default_instance_;
    new (ptr) ::openbot_bridge::chassis_msgs::Chassis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Chassis_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_Chassis_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fbasic_5fmsgs_2fheader_2eproto.base,
      &scc_info_VehicleSignal_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto.base,
      &scc_info_ChassisGPS_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base,
      &scc_info_EngageAdvice_openbot_5fbridge_2fbasic_5fmsgs_2fdrive_5fstate_2eproto.base,
      &scc_info_WheelSpeed_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base,
      &scc_info_Surround_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base,
      &scc_info_License_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base,
      &scc_info_VehicleID_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fid_2eproto.base,
      &scc_info_CheckResponse_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ChassisGPS_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::chassis_msgs::_ChassisGPS_default_instance_;
    new (ptr) ::openbot_bridge::chassis_msgs::ChassisGPS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChassisGPS_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChassisGPS_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto}, {}};

static void InitDefaultsscc_info_CheckResponse_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::chassis_msgs::_CheckResponse_default_instance_;
    new (ptr) ::openbot_bridge::chassis_msgs::CheckResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckResponse_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckResponse_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto}, {}};

static void InitDefaultsscc_info_License_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::chassis_msgs::_License_default_instance_;
    new (ptr) ::openbot_bridge::chassis_msgs::License();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_License_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_License_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto}, {}};

static void InitDefaultsscc_info_Sonar_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::chassis_msgs::_Sonar_default_instance_;
    new (ptr) ::openbot_bridge::chassis_msgs::Sonar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Sonar_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Sonar_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto}, {
      &scc_info_Point3D_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto.base,
      &scc_info_Quaternion_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Surround_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::chassis_msgs::_Surround_default_instance_;
    new (ptr) ::openbot_bridge::chassis_msgs::Surround();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Surround_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Surround_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto}, {
      &scc_info_Sonar_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base,}};

static void InitDefaultsscc_info_WheelSpeed_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::chassis_msgs::_WheelSpeed_default_instance_;
    new (ptr) ::openbot_bridge::chassis_msgs::WheelSpeed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WheelSpeed_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WheelSpeed_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, engine_started_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, engine_rpm_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, speed_mps_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, odometer_m_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, fuel_range_m_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, throttle_percentage_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, brake_percentage_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, steering_percentage_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, steering_torque_nm_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, parking_brake_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, high_beam_signal_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, low_beam_signal_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, left_turn_signal_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, right_turn_signal_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, horn_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, wiper_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, disengage_status_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, error_code_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, gear_location_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, steering_timestamp_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, chassis_error_mask_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, signal_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, chassis_gps_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, engage_advice_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, wheel_speed_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, surround_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, license_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, battery_soc_percentage_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, throttle_percentage_cmd_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, brake_percentage_cmd_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, steering_percentage_cmd_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, front_bumper_event_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, back_bumper_event_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, check_response_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Chassis, custom_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, latitude_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, longitude_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, gps_valid_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, year_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, month_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, day_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, hours_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, minutes_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, seconds_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, compass_direction_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, pdop_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, is_gps_fault_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, is_inferred_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, altitude_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, heading_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, hdop_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, vdop_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, quality_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, num_satellites_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::ChassisGPS, gps_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::WheelSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::WheelSpeed, is_wheel_spd_rr_valid_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::WheelSpeed, wheel_direction_rr_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::WheelSpeed, wheel_spd_rr_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::WheelSpeed, is_wheel_spd_rl_valid_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::WheelSpeed, wheel_direction_rl_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::WheelSpeed, wheel_spd_rl_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::WheelSpeed, is_wheel_spd_fr_valid_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::WheelSpeed, wheel_direction_fr_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::WheelSpeed, wheel_spd_fr_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::WheelSpeed, is_wheel_spd_fl_valid_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::WheelSpeed, wheel_direction_fl_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::WheelSpeed, wheel_spd_fl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Sonar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Sonar, range_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Sonar, translation_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Sonar, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, cross_traffic_alert_left_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, cross_traffic_alert_left_enabled_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, blind_spot_left_alert_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, blind_spot_left_alert_enabled_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, cross_traffic_alert_right_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, cross_traffic_alert_right_enabled_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, blind_spot_right_alert_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, blind_spot_right_alert_enabled_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar00_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar01_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar02_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar03_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar04_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar05_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar06_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar07_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar08_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar09_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar10_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar11_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar_enabled_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar_fault_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar_range_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::Surround, sonar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::License, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::License, vin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::CheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::CheckResponse, is_eps_online_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::CheckResponse, is_epb_online_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::CheckResponse, is_esp_online_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::CheckResponse, is_vtog_online_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::CheckResponse, is_scu_online_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::CheckResponse, is_switch_online_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::chassis_msgs::CheckResponse, is_vcu_online_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openbot_bridge::chassis_msgs::Chassis)},
  { 43, -1, sizeof(::openbot_bridge::chassis_msgs::ChassisGPS)},
  { 68, -1, sizeof(::openbot_bridge::chassis_msgs::WheelSpeed)},
  { 85, -1, sizeof(::openbot_bridge::chassis_msgs::Sonar)},
  { 93, -1, sizeof(::openbot_bridge::chassis_msgs::Surround)},
  { 122, -1, sizeof(::openbot_bridge::chassis_msgs::License)},
  { 128, -1, sizeof(::openbot_bridge::chassis_msgs::CheckResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::chassis_msgs::_Chassis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::chassis_msgs::_ChassisGPS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::chassis_msgs::_WheelSpeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::chassis_msgs::_Sonar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::chassis_msgs::_Surround_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::chassis_msgs::_License_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::chassis_msgs::_CheckResponse_default_instance_),
};

const char descriptor_table_protodef_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)openbot_bridge/chassis_msgs/chassis.pr"
  "oto\022\033openbot_bridge.chassis_msgs\032\031google"
  "/protobuf/any.proto\032+openbot_bridge/basi"
  "c_msgs/drive_state.proto\032(openbot_bridge"
  "/basic_msgs/geometry.proto\032&openbot_brid"
  "ge/basic_msgs/header.proto\032*openbot_brid"
  "ge/basic_msgs/vehicle_id.proto\032.openbot_"
  "bridge/basic_msgs/vehicle_signal.proto\"\323"
  "\020\n\007Chassis\022\026\n\016engine_started\030\003 \001(\010\022\022\n\nen"
  "gine_rpm\030\004 \001(\002\022\021\n\tspeed_mps\030\005 \001(\002\022\022\n\nodo"
  "meter_m\030\006 \001(\002\022\024\n\014fuel_range_m\030\007 \001(\005\022\033\n\023t"
  "hrottle_percentage\030\010 \001(\002\022\030\n\020brake_percen"
  "tage\030\t \001(\002\022\033\n\023steering_percentage\030\013 \001(\002\022"
  "\032\n\022steering_torque_nm\030\014 \001(\002\022\025\n\rparking_b"
  "rake\030\r \001(\010\022\030\n\020high_beam_signal\030\016 \001(\010\022\027\n\017"
  "low_beam_signal\030\017 \001(\010\022\030\n\020left_turn_signa"
  "l\030\020 \001(\010\022\031\n\021right_turn_signal\030\021 \001(\010\022\014\n\004ho"
  "rn\030\022 \001(\010\022\r\n\005wiper\030\023 \001(\010\022\030\n\020disengage_sta"
  "tus\030\024 \001(\010\022F\n\014driving_mode\030\025 \001(\01620.openbo"
  "t_bridge.chassis_msgs.Chassis.DrivingMod"
  "e\022B\n\nerror_code\030\026 \001(\0162..openbot_bridge.c"
  "hassis_msgs.Chassis.ErrorCode\022H\n\rgear_lo"
  "cation\030\027 \001(\01621.openbot_bridge.chassis_ms"
  "gs.Chassis.GearPosition\022\032\n\022steering_time"
  "stamp\030\030 \001(\001\0221\n\006header\030\031 \001(\0132!.openbot_br"
  "idge.basic_msgs.Header\022\032\n\022chassis_error_"
  "mask\030\032 \001(\005\0228\n\006signal\030\033 \001(\0132(.openbot_bri"
  "dge.basic_msgs.VehicleSignal\022<\n\013chassis_"
  "gps\030\034 \001(\0132\'.openbot_bridge.chassis_msgs."
  "ChassisGPS\022>\n\rengage_advice\030\035 \001(\0132\'.open"
  "bot_bridge.basic_msgs.EngageAdvice\022<\n\013wh"
  "eel_speed\030\036 \001(\0132\'.openbot_bridge.chassis"
  "_msgs.WheelSpeed\0227\n\010surround\030\037 \001(\0132%.ope"
  "nbot_bridge.chassis_msgs.Surround\0225\n\007lic"
  "ense\030  \001(\0132$.openbot_bridge.chassis_msgs"
  ".License\0228\n\nvehicle_id\030! \001(\0132$.openbot_b"
  "ridge.basic_msgs.VehicleID\022\036\n\026battery_so"
  "c_percentage\030\" \001(\005\022\037\n\027throttle_percentag"
  "e_cmd\030# \001(\002\022\034\n\024brake_percentage_cmd\030$ \001("
  "\002\022\037\n\027steering_percentage_cmd\030% \001(\002\022L\n\022fr"
  "ont_bumper_event\030& \001(\01620.openbot_bridge."
  "chassis_msgs.Chassis.BumperEvent\022K\n\021back"
  "_bumper_event\030\' \001(\01620.openbot_bridge.cha"
  "ssis_msgs.Chassis.BumperEvent\022B\n\016check_r"
  "esponse\030( \001(\0132*.openbot_bridge.chassis_m"
  "sgs.CheckResponse\022+\n\rcustom_status\030) \001(\013"
  "2\024.google.protobuf.Any\"y\n\013DrivingMode\022\023\n"
  "\017COMPLETE_MANUAL\020\000\022\027\n\023COMPLETE_AUTO_DRIV"
  "E\020\001\022\023\n\017AUTO_STEER_ONLY\020\002\022\023\n\017AUTO_SPEED_O"
  "NLY\020\003\022\022\n\016EMERGENCY_MODE\020\004\"\200\002\n\tErrorCode\022"
  "\014\n\010NO_ERROR\020\000\022\025\n\021CMD_NOT_IN_PERIOD\020\001\022\021\n\r"
  "CHASSIS_ERROR\020\002\022\032\n\026CHASSIS_ERROR_ON_STEE"
  "R\020\006\022\032\n\026CHASSIS_ERROR_ON_BRAKE\020\007\022\035\n\031CHASS"
  "IS_ERROR_ON_THROTTLE\020\010\022\031\n\025CHASSIS_ERROR_"
  "ON_GEAR\020\t\022\027\n\023MANUAL_INTERVENTION\020\003\022\035\n\031CH"
  "ASSIS_CAN_NOT_IN_PERIOD\020\004\022\021\n\rUNKNOWN_ERR"
  "OR\020\005\"\203\001\n\014GearPosition\022\020\n\014GEAR_NEUTRAL\020\000\022"
  "\016\n\nGEAR_DRIVE\020\001\022\020\n\014GEAR_REVERSE\020\002\022\020\n\014GEA"
  "R_PARKING\020\003\022\014\n\010GEAR_LOW\020\004\022\020\n\014GEAR_INVALI"
  "D\020\005\022\r\n\tGEAR_NONE\020\006\"H\n\013BumperEvent\022\022\n\016BUM"
  "PER_INVALID\020\000\022\021\n\rBUMPER_NORMAL\020\001\022\022\n\016BUMP"
  "ER_PRESSED\020\002\"\227\003\n\nChassisGPS\022\020\n\010latitude\030"
  "\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\021\n\tgps_valid\030\003 "
  "\001(\010\022\014\n\004year\030\004 \001(\005\022\r\n\005month\030\005 \001(\005\022\013\n\003day\030"
  "\006 \001(\005\022\r\n\005hours\030\007 \001(\005\022\017\n\007minutes\030\010 \001(\005\022\017\n"
  "\007seconds\030\t \001(\005\022\031\n\021compass_direction\030\n \001("
  "\001\022\014\n\004pdop\030\013 \001(\001\022\024\n\014is_gps_fault\030\014 \001(\010\022\023\n"
  "\013is_inferred\030\r \001(\010\022\020\n\010altitude\030\016 \001(\001\022\017\n\007"
  "heading\030\017 \001(\001\022\014\n\004hdop\030\020 \001(\001\022\014\n\004vdop\030\021 \001("
  "\001\0228\n\007quality\030\022 \001(\0162\'.openbot_bridge.chas"
  "sis_msgs.GpsQuality\022\026\n\016num_satellites\030\023 "
  "\001(\005\022\021\n\tgps_speed\030\024 \001(\001\"\372\004\n\nWheelSpeed\022\035\n"
  "\025is_wheel_spd_rr_valid\030\001 \001(\010\022R\n\022wheel_di"
  "rection_rr\030\002 \001(\01626.openbot_bridge.chassi"
  "s_msgs.WheelSpeed.WheelSpeedType\022\024\n\014whee"
  "l_spd_rr\030\003 \001(\001\022\035\n\025is_wheel_spd_rl_valid\030"
  "\004 \001(\010\022R\n\022wheel_direction_rl\030\005 \001(\01626.open"
  "bot_bridge.chassis_msgs.WheelSpeed.Wheel"
  "SpeedType\022\024\n\014wheel_spd_rl\030\006 \001(\001\022\035\n\025is_wh"
  "eel_spd_fr_valid\030\007 \001(\010\022R\n\022wheel_directio"
  "n_fr\030\010 \001(\01626.openbot_bridge.chassis_msgs"
  ".WheelSpeed.WheelSpeedType\022\024\n\014wheel_spd_"
  "fr\030\t \001(\001\022\035\n\025is_wheel_spd_fl_valid\030\n \001(\010\022"
  "R\n\022wheel_direction_fl\030\013 \001(\01626.openbot_br"
  "idge.chassis_msgs.WheelSpeed.WheelSpeedT"
  "ype\022\024\n\014wheel_spd_fl\030\014 \001(\001\"H\n\016WheelSpeedT"
  "ype\022\013\n\007FORWARD\020\000\022\014\n\010BACKWARD\020\001\022\016\n\nSTANDS"
  "TILL\020\002\022\013\n\007INVALID\020\003\"\210\001\n\005Sonar\022\r\n\005range\030\001"
  " \001(\001\0227\n\013translation\030\002 \001(\0132\".openbot_brid"
  "ge.basic_msgs.Point3D\0227\n\010rotation\030\003 \001(\0132"
  "%.openbot_bridge.basic_msgs.Quaternion\"\362"
  "\004\n\010Surround\022 \n\030cross_traffic_alert_left\030"
  "\001 \001(\010\022(\n cross_traffic_alert_left_enable"
  "d\030\002 \001(\010\022\035\n\025blind_spot_left_alert\030\003 \001(\010\022%"
  "\n\035blind_spot_left_alert_enabled\030\004 \001(\010\022!\n"
  "\031cross_traffic_alert_right\030\005 \001(\010\022)\n!cros"
  "s_traffic_alert_right_enabled\030\006 \001(\010\022\036\n\026b"
  "lind_spot_right_alert\030\007 \001(\010\022&\n\036blind_spo"
  "t_right_alert_enabled\030\010 \001(\010\022\017\n\007sonar00\030\t"
  " \001(\001\022\017\n\007sonar01\030\n \001(\001\022\017\n\007sonar02\030\013 \001(\001\022\017"
  "\n\007sonar03\030\014 \001(\001\022\017\n\007sonar04\030\r \001(\001\022\017\n\007sona"
  "r05\030\016 \001(\001\022\017\n\007sonar06\030\017 \001(\001\022\017\n\007sonar07\030\020 "
  "\001(\001\022\017\n\007sonar08\030\021 \001(\001\022\017\n\007sonar09\030\022 \001(\001\022\017\n"
  "\007sonar10\030\023 \001(\001\022\017\n\007sonar11\030\024 \001(\001\022\025\n\rsonar"
  "_enabled\030\025 \001(\010\022\023\n\013sonar_fault\030\026 \001(\010\022\023\n\013s"
  "onar_range\030\027 \003(\001\0221\n\005sonar\030\030 \003(\0132\".openbo"
  "t_bridge.chassis_msgs.Sonar\"\026\n\007License\022\013"
  "\n\003vin\030\001 \001(\t\"\264\001\n\rCheckResponse\022\025\n\ris_eps_"
  "online\030\001 \001(\010\022\025\n\ris_epb_online\030\002 \001(\010\022\025\n\ri"
  "s_esp_online\030\003 \001(\010\022\026\n\016is_vtog_online\030\004 \001"
  "(\010\022\025\n\ris_scu_online\030\005 \001(\010\022\030\n\020is_switch_o"
  "nline\030\006 \001(\010\022\025\n\ris_vcu_online\030\007 \001(\010*A\n\nGp"
  "sQuality\022\n\n\006FIX_NO\020\000\022\n\n\006FIX_2D\020\001\022\n\n\006FIX_"
  "3D\020\002\022\017\n\013FIX_INVALID\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto_deps[6] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fdrive_5fstate_2eproto,
  &::descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto,
  &::descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fheader_2eproto,
  &::descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fid_2eproto,
  &::descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto_sccs[7] = {
  &scc_info_Chassis_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base,
  &scc_info_ChassisGPS_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base,
  &scc_info_CheckResponse_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base,
  &scc_info_License_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base,
  &scc_info_Sonar_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base,
  &scc_info_Surround_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base,
  &scc_info_WheelSpeed_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto = {
  false, false, descriptor_table_protodef_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto, "openbot_bridge/chassis_msgs/chassis.proto", 4549,
  &descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto_once, descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto_sccs, descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto_deps, 7, 6,
  schemas, file_default_instances, TableStruct_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto::offsets,
  file_level_metadata_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto, 7, file_level_enum_descriptors_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto, file_level_service_descriptors_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto)), true);
namespace openbot_bridge {
namespace chassis_msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_DrivingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto[0];
}
bool Chassis_DrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_DrivingMode Chassis::COMPLETE_MANUAL;
constexpr Chassis_DrivingMode Chassis::COMPLETE_AUTO_DRIVE;
constexpr Chassis_DrivingMode Chassis::AUTO_STEER_ONLY;
constexpr Chassis_DrivingMode Chassis::AUTO_SPEED_ONLY;
constexpr Chassis_DrivingMode Chassis::EMERGENCY_MODE;
constexpr Chassis_DrivingMode Chassis::DrivingMode_MIN;
constexpr Chassis_DrivingMode Chassis::DrivingMode_MAX;
constexpr int Chassis::DrivingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto[1];
}
bool Chassis_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_ErrorCode Chassis::NO_ERROR;
constexpr Chassis_ErrorCode Chassis::CMD_NOT_IN_PERIOD;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_STEER;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_BRAKE;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_THROTTLE;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_GEAR;
constexpr Chassis_ErrorCode Chassis::MANUAL_INTERVENTION;
constexpr Chassis_ErrorCode Chassis::CHASSIS_CAN_NOT_IN_PERIOD;
constexpr Chassis_ErrorCode Chassis::UNKNOWN_ERROR;
constexpr Chassis_ErrorCode Chassis::ErrorCode_MIN;
constexpr Chassis_ErrorCode Chassis::ErrorCode_MAX;
constexpr int Chassis::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_GearPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto[2];
}
bool Chassis_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_GearPosition Chassis::GEAR_NEUTRAL;
constexpr Chassis_GearPosition Chassis::GEAR_DRIVE;
constexpr Chassis_GearPosition Chassis::GEAR_REVERSE;
constexpr Chassis_GearPosition Chassis::GEAR_PARKING;
constexpr Chassis_GearPosition Chassis::GEAR_LOW;
constexpr Chassis_GearPosition Chassis::GEAR_INVALID;
constexpr Chassis_GearPosition Chassis::GEAR_NONE;
constexpr Chassis_GearPosition Chassis::GearPosition_MIN;
constexpr Chassis_GearPosition Chassis::GearPosition_MAX;
constexpr int Chassis::GearPosition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_BumperEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto[3];
}
bool Chassis_BumperEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_BumperEvent Chassis::BUMPER_INVALID;
constexpr Chassis_BumperEvent Chassis::BUMPER_NORMAL;
constexpr Chassis_BumperEvent Chassis::BUMPER_PRESSED;
constexpr Chassis_BumperEvent Chassis::BumperEvent_MIN;
constexpr Chassis_BumperEvent Chassis::BumperEvent_MAX;
constexpr int Chassis::BumperEvent_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WheelSpeed_WheelSpeedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto[4];
}
bool WheelSpeed_WheelSpeedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WheelSpeed_WheelSpeedType WheelSpeed::FORWARD;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::BACKWARD;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::STANDSTILL;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::INVALID;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::WheelSpeedType_MIN;
constexpr WheelSpeed_WheelSpeedType WheelSpeed::WheelSpeedType_MAX;
constexpr int WheelSpeed::WheelSpeedType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpsQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto[5];
}
bool GpsQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Chassis::_Internal {
 public:
  static const ::openbot_bridge::basic_msgs::Header& header(const Chassis* msg);
  static const ::openbot_bridge::basic_msgs::VehicleSignal& signal(const Chassis* msg);
  static const ::openbot_bridge::chassis_msgs::ChassisGPS& chassis_gps(const Chassis* msg);
  static const ::openbot_bridge::basic_msgs::EngageAdvice& engage_advice(const Chassis* msg);
  static const ::openbot_bridge::chassis_msgs::WheelSpeed& wheel_speed(const Chassis* msg);
  static const ::openbot_bridge::chassis_msgs::Surround& surround(const Chassis* msg);
  static const ::openbot_bridge::chassis_msgs::License& license(const Chassis* msg);
  static const ::openbot_bridge::basic_msgs::VehicleID& vehicle_id(const Chassis* msg);
  static const ::openbot_bridge::chassis_msgs::CheckResponse& check_response(const Chassis* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& custom_status(const Chassis* msg);
};

const ::openbot_bridge::basic_msgs::Header&
Chassis::_Internal::header(const Chassis* msg) {
  return *msg->header_;
}
const ::openbot_bridge::basic_msgs::VehicleSignal&
Chassis::_Internal::signal(const Chassis* msg) {
  return *msg->signal_;
}
const ::openbot_bridge::chassis_msgs::ChassisGPS&
Chassis::_Internal::chassis_gps(const Chassis* msg) {
  return *msg->chassis_gps_;
}
const ::openbot_bridge::basic_msgs::EngageAdvice&
Chassis::_Internal::engage_advice(const Chassis* msg) {
  return *msg->engage_advice_;
}
const ::openbot_bridge::chassis_msgs::WheelSpeed&
Chassis::_Internal::wheel_speed(const Chassis* msg) {
  return *msg->wheel_speed_;
}
const ::openbot_bridge::chassis_msgs::Surround&
Chassis::_Internal::surround(const Chassis* msg) {
  return *msg->surround_;
}
const ::openbot_bridge::chassis_msgs::License&
Chassis::_Internal::license(const Chassis* msg) {
  return *msg->license_;
}
const ::openbot_bridge::basic_msgs::VehicleID&
Chassis::_Internal::vehicle_id(const Chassis* msg) {
  return *msg->vehicle_id_;
}
const ::openbot_bridge::chassis_msgs::CheckResponse&
Chassis::_Internal::check_response(const Chassis* msg) {
  return *msg->check_response_;
}
const PROTOBUF_NAMESPACE_ID::Any&
Chassis::_Internal::custom_status(const Chassis* msg) {
  return *msg->custom_status_;
}
void Chassis::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void Chassis::clear_signal() {
  if (GetArena() == nullptr && signal_ != nullptr) {
    delete signal_;
  }
  signal_ = nullptr;
}
void Chassis::clear_engage_advice() {
  if (GetArena() == nullptr && engage_advice_ != nullptr) {
    delete engage_advice_;
  }
  engage_advice_ = nullptr;
}
void Chassis::clear_vehicle_id() {
  if (GetArena() == nullptr && vehicle_id_ != nullptr) {
    delete vehicle_id_;
  }
  vehicle_id_ = nullptr;
}
void Chassis::clear_custom_status() {
  if (GetArena() == nullptr && custom_status_ != nullptr) {
    delete custom_status_;
  }
  custom_status_ = nullptr;
}
Chassis::Chassis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.chassis_msgs.Chassis)
}
Chassis::Chassis(const Chassis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::basic_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_signal()) {
    signal_ = new ::openbot_bridge::basic_msgs::VehicleSignal(*from.signal_);
  } else {
    signal_ = nullptr;
  }
  if (from._internal_has_chassis_gps()) {
    chassis_gps_ = new ::openbot_bridge::chassis_msgs::ChassisGPS(*from.chassis_gps_);
  } else {
    chassis_gps_ = nullptr;
  }
  if (from._internal_has_engage_advice()) {
    engage_advice_ = new ::openbot_bridge::basic_msgs::EngageAdvice(*from.engage_advice_);
  } else {
    engage_advice_ = nullptr;
  }
  if (from._internal_has_wheel_speed()) {
    wheel_speed_ = new ::openbot_bridge::chassis_msgs::WheelSpeed(*from.wheel_speed_);
  } else {
    wheel_speed_ = nullptr;
  }
  if (from._internal_has_surround()) {
    surround_ = new ::openbot_bridge::chassis_msgs::Surround(*from.surround_);
  } else {
    surround_ = nullptr;
  }
  if (from._internal_has_license()) {
    license_ = new ::openbot_bridge::chassis_msgs::License(*from.license_);
  } else {
    license_ = nullptr;
  }
  if (from._internal_has_vehicle_id()) {
    vehicle_id_ = new ::openbot_bridge::basic_msgs::VehicleID(*from.vehicle_id_);
  } else {
    vehicle_id_ = nullptr;
  }
  if (from._internal_has_check_response()) {
    check_response_ = new ::openbot_bridge::chassis_msgs::CheckResponse(*from.check_response_);
  } else {
    check_response_ = nullptr;
  }
  if (from._internal_has_custom_status()) {
    custom_status_ = new PROTOBUF_NAMESPACE_ID::Any(*from.custom_status_);
  } else {
    custom_status_ = nullptr;
  }
  ::memcpy(&engine_rpm_, &from.engine_rpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&back_bumper_event_) -
    reinterpret_cast<char*>(&engine_rpm_)) + sizeof(back_bumper_event_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.chassis_msgs.Chassis)
}

void Chassis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chassis_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&back_bumper_event_) -
      reinterpret_cast<char*>(&header_)) + sizeof(back_bumper_event_));
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:openbot_bridge.chassis_msgs.Chassis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Chassis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete signal_;
  if (this != internal_default_instance()) delete chassis_gps_;
  if (this != internal_default_instance()) delete engage_advice_;
  if (this != internal_default_instance()) delete wheel_speed_;
  if (this != internal_default_instance()) delete surround_;
  if (this != internal_default_instance()) delete license_;
  if (this != internal_default_instance()) delete vehicle_id_;
  if (this != internal_default_instance()) delete check_response_;
  if (this != internal_default_instance()) delete custom_status_;
}

void Chassis::ArenaDtor(void* object) {
  Chassis* _this = reinterpret_cast< Chassis* >(object);
  (void)_this;
}
void Chassis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chassis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chassis& Chassis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chassis_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.chassis_msgs.Chassis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && signal_ != nullptr) {
    delete signal_;
  }
  signal_ = nullptr;
  if (GetArena() == nullptr && chassis_gps_ != nullptr) {
    delete chassis_gps_;
  }
  chassis_gps_ = nullptr;
  if (GetArena() == nullptr && engage_advice_ != nullptr) {
    delete engage_advice_;
  }
  engage_advice_ = nullptr;
  if (GetArena() == nullptr && wheel_speed_ != nullptr) {
    delete wheel_speed_;
  }
  wheel_speed_ = nullptr;
  if (GetArena() == nullptr && surround_ != nullptr) {
    delete surround_;
  }
  surround_ = nullptr;
  if (GetArena() == nullptr && license_ != nullptr) {
    delete license_;
  }
  license_ = nullptr;
  if (GetArena() == nullptr && vehicle_id_ != nullptr) {
    delete vehicle_id_;
  }
  vehicle_id_ = nullptr;
  if (GetArena() == nullptr && check_response_ != nullptr) {
    delete check_response_;
  }
  check_response_ = nullptr;
  if (GetArena() == nullptr && custom_status_ != nullptr) {
    delete custom_status_;
  }
  custom_status_ = nullptr;
  ::memset(&engine_rpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&back_bumper_event_) -
      reinterpret_cast<char*>(&engine_rpm_)) + sizeof(back_bumper_event_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chassis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool engine_started = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          engine_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float engine_rpm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          engine_rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speed_mps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          speed_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float odometer_m = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          odometer_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 fuel_range_m = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          fuel_range_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float throttle_percentage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          throttle_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float brake_percentage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          brake_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float steering_percentage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          steering_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float steering_torque_nm = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          steering_torque_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool parking_brake = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          parking_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool high_beam_signal = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          high_beam_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool low_beam_signal = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          low_beam_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool left_turn_signal = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          left_turn_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool right_turn_signal = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          right_turn_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool horn = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool wiper = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          wiper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disengage_status = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          disengage_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.Chassis.DrivingMode driving_mode = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_driving_mode(static_cast<::openbot_bridge::chassis_msgs::Chassis_DrivingMode>(val));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.Chassis.ErrorCode error_code = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::openbot_bridge::chassis_msgs::Chassis_ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.Chassis.GearPosition gear_location = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gear_location(static_cast<::openbot_bridge::chassis_msgs::Chassis_GearPosition>(val));
        } else goto handle_unusual;
        continue;
      // double steering_timestamp = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          steering_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.Header header = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chassis_error_mask = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          chassis_error_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.VehicleSignal signal = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.ChassisGPS chassis_gps = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_chassis_gps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.EngageAdvice engage_advice = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_engage_advice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.WheelSpeed wheel_speed = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_wheel_speed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.Surround surround = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_surround(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.License license = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_license(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.VehicleID vehicle_id = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 battery_soc_percentage = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          battery_soc_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float throttle_percentage_cmd = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          throttle_percentage_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float brake_percentage_cmd = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          brake_percentage_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float steering_percentage_cmd = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          steering_percentage_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.Chassis.BumperEvent front_bumper_event = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_front_bumper_event(static_cast<::openbot_bridge::chassis_msgs::Chassis_BumperEvent>(val));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.Chassis.BumperEvent back_bumper_event = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_back_bumper_event(static_cast<::openbot_bridge::chassis_msgs::Chassis_BumperEvent>(val));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.CheckResponse check_response = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any custom_status = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chassis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.chassis_msgs.Chassis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool engine_started = 3;
  if (this->engine_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_engine_started(), target);
  }

  // float engine_rpm = 4;
  if (!(this->engine_rpm() <= 0 && this->engine_rpm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_engine_rpm(), target);
  }

  // float speed_mps = 5;
  if (!(this->speed_mps() <= 0 && this->speed_mps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_speed_mps(), target);
  }

  // float odometer_m = 6;
  if (!(this->odometer_m() <= 0 && this->odometer_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_odometer_m(), target);
  }

  // int32 fuel_range_m = 7;
  if (this->fuel_range_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_fuel_range_m(), target);
  }

  // float throttle_percentage = 8;
  if (!(this->throttle_percentage() <= 0 && this->throttle_percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_throttle_percentage(), target);
  }

  // float brake_percentage = 9;
  if (!(this->brake_percentage() <= 0 && this->brake_percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_brake_percentage(), target);
  }

  // float steering_percentage = 11;
  if (!(this->steering_percentage() <= 0 && this->steering_percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_steering_percentage(), target);
  }

  // float steering_torque_nm = 12;
  if (!(this->steering_torque_nm() <= 0 && this->steering_torque_nm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_steering_torque_nm(), target);
  }

  // bool parking_brake = 13;
  if (this->parking_brake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_parking_brake(), target);
  }

  // bool high_beam_signal = 14;
  if (this->high_beam_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_high_beam_signal(), target);
  }

  // bool low_beam_signal = 15;
  if (this->low_beam_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_low_beam_signal(), target);
  }

  // bool left_turn_signal = 16;
  if (this->left_turn_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_left_turn_signal(), target);
  }

  // bool right_turn_signal = 17;
  if (this->right_turn_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_right_turn_signal(), target);
  }

  // bool horn = 18;
  if (this->horn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_horn(), target);
  }

  // bool wiper = 19;
  if (this->wiper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_wiper(), target);
  }

  // bool disengage_status = 20;
  if (this->disengage_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_disengage_status(), target);
  }

  // .openbot_bridge.chassis_msgs.Chassis.DrivingMode driving_mode = 21;
  if (this->driving_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_driving_mode(), target);
  }

  // .openbot_bridge.chassis_msgs.Chassis.ErrorCode error_code = 22;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_error_code(), target);
  }

  // .openbot_bridge.chassis_msgs.Chassis.GearPosition gear_location = 23;
  if (this->gear_location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_gear_location(), target);
  }

  // double steering_timestamp = 24;
  if (!(this->steering_timestamp() <= 0 && this->steering_timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_steering_timestamp(), target);
  }

  // .openbot_bridge.basic_msgs.Header header = 25;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::header(this), target, stream);
  }

  // int32 chassis_error_mask = 26;
  if (this->chassis_error_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_chassis_error_mask(), target);
  }

  // .openbot_bridge.basic_msgs.VehicleSignal signal = 27;
  if (this->has_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::signal(this), target, stream);
  }

  // .openbot_bridge.chassis_msgs.ChassisGPS chassis_gps = 28;
  if (this->has_chassis_gps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::chassis_gps(this), target, stream);
  }

  // .openbot_bridge.basic_msgs.EngageAdvice engage_advice = 29;
  if (this->has_engage_advice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::engage_advice(this), target, stream);
  }

  // .openbot_bridge.chassis_msgs.WheelSpeed wheel_speed = 30;
  if (this->has_wheel_speed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::wheel_speed(this), target, stream);
  }

  // .openbot_bridge.chassis_msgs.Surround surround = 31;
  if (this->has_surround()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::surround(this), target, stream);
  }

  // .openbot_bridge.chassis_msgs.License license = 32;
  if (this->has_license()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::license(this), target, stream);
  }

  // .openbot_bridge.basic_msgs.VehicleID vehicle_id = 33;
  if (this->has_vehicle_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::vehicle_id(this), target, stream);
  }

  // int32 battery_soc_percentage = 34;
  if (this->battery_soc_percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_battery_soc_percentage(), target);
  }

  // float throttle_percentage_cmd = 35;
  if (!(this->throttle_percentage_cmd() <= 0 && this->throttle_percentage_cmd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_throttle_percentage_cmd(), target);
  }

  // float brake_percentage_cmd = 36;
  if (!(this->brake_percentage_cmd() <= 0 && this->brake_percentage_cmd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_brake_percentage_cmd(), target);
  }

  // float steering_percentage_cmd = 37;
  if (!(this->steering_percentage_cmd() <= 0 && this->steering_percentage_cmd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(37, this->_internal_steering_percentage_cmd(), target);
  }

  // .openbot_bridge.chassis_msgs.Chassis.BumperEvent front_bumper_event = 38;
  if (this->front_bumper_event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      38, this->_internal_front_bumper_event(), target);
  }

  // .openbot_bridge.chassis_msgs.Chassis.BumperEvent back_bumper_event = 39;
  if (this->back_bumper_event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      39, this->_internal_back_bumper_event(), target);
  }

  // .openbot_bridge.chassis_msgs.CheckResponse check_response = 40;
  if (this->has_check_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::check_response(this), target, stream);
  }

  // .google.protobuf.Any custom_status = 41;
  if (this->has_custom_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::custom_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.chassis_msgs.Chassis)
  return target;
}

size_t Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.chassis_msgs.Chassis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.Header header = 25;
  if (this->has_header()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.basic_msgs.VehicleSignal signal = 27;
  if (this->has_signal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_);
  }

  // .openbot_bridge.chassis_msgs.ChassisGPS chassis_gps = 28;
  if (this->has_chassis_gps()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chassis_gps_);
  }

  // .openbot_bridge.basic_msgs.EngageAdvice engage_advice = 29;
  if (this->has_engage_advice()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *engage_advice_);
  }

  // .openbot_bridge.chassis_msgs.WheelSpeed wheel_speed = 30;
  if (this->has_wheel_speed()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wheel_speed_);
  }

  // .openbot_bridge.chassis_msgs.Surround surround = 31;
  if (this->has_surround()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *surround_);
  }

  // .openbot_bridge.chassis_msgs.License license = 32;
  if (this->has_license()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *license_);
  }

  // .openbot_bridge.basic_msgs.VehicleID vehicle_id = 33;
  if (this->has_vehicle_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_id_);
  }

  // .openbot_bridge.chassis_msgs.CheckResponse check_response = 40;
  if (this->has_check_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *check_response_);
  }

  // .google.protobuf.Any custom_status = 41;
  if (this->has_custom_status()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *custom_status_);
  }

  // float engine_rpm = 4;
  if (!(this->engine_rpm() <= 0 && this->engine_rpm() >= 0)) {
    total_size += 1 + 4;
  }

  // float speed_mps = 5;
  if (!(this->speed_mps() <= 0 && this->speed_mps() >= 0)) {
    total_size += 1 + 4;
  }

  // float odometer_m = 6;
  if (!(this->odometer_m() <= 0 && this->odometer_m() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 fuel_range_m = 7;
  if (this->fuel_range_m() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fuel_range_m());
  }

  // float throttle_percentage = 8;
  if (!(this->throttle_percentage() <= 0 && this->throttle_percentage() >= 0)) {
    total_size += 1 + 4;
  }

  // float brake_percentage = 9;
  if (!(this->brake_percentage() <= 0 && this->brake_percentage() >= 0)) {
    total_size += 1 + 4;
  }

  // float steering_percentage = 11;
  if (!(this->steering_percentage() <= 0 && this->steering_percentage() >= 0)) {
    total_size += 1 + 4;
  }

  // bool engine_started = 3;
  if (this->engine_started() != 0) {
    total_size += 1 + 1;
  }

  // bool parking_brake = 13;
  if (this->parking_brake() != 0) {
    total_size += 1 + 1;
  }

  // bool high_beam_signal = 14;
  if (this->high_beam_signal() != 0) {
    total_size += 1 + 1;
  }

  // bool low_beam_signal = 15;
  if (this->low_beam_signal() != 0) {
    total_size += 1 + 1;
  }

  // float steering_torque_nm = 12;
  if (!(this->steering_torque_nm() <= 0 && this->steering_torque_nm() >= 0)) {
    total_size += 1 + 4;
  }

  // bool left_turn_signal = 16;
  if (this->left_turn_signal() != 0) {
    total_size += 2 + 1;
  }

  // bool right_turn_signal = 17;
  if (this->right_turn_signal() != 0) {
    total_size += 2 + 1;
  }

  // bool horn = 18;
  if (this->horn() != 0) {
    total_size += 2 + 1;
  }

  // bool wiper = 19;
  if (this->wiper() != 0) {
    total_size += 2 + 1;
  }

  // bool disengage_status = 20;
  if (this->disengage_status() != 0) {
    total_size += 2 + 1;
  }

  // .openbot_bridge.chassis_msgs.Chassis.DrivingMode driving_mode = 21;
  if (this->driving_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driving_mode());
  }

  // .openbot_bridge.chassis_msgs.Chassis.ErrorCode error_code = 22;
  if (this->error_code() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  // .openbot_bridge.chassis_msgs.Chassis.GearPosition gear_location = 23;
  if (this->gear_location() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_location());
  }

  // double steering_timestamp = 24;
  if (!(this->steering_timestamp() <= 0 && this->steering_timestamp() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 chassis_error_mask = 26;
  if (this->chassis_error_mask() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chassis_error_mask());
  }

  // int32 battery_soc_percentage = 34;
  if (this->battery_soc_percentage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battery_soc_percentage());
  }

  // float throttle_percentage_cmd = 35;
  if (!(this->throttle_percentage_cmd() <= 0 && this->throttle_percentage_cmd() >= 0)) {
    total_size += 2 + 4;
  }

  // float brake_percentage_cmd = 36;
  if (!(this->brake_percentage_cmd() <= 0 && this->brake_percentage_cmd() >= 0)) {
    total_size += 2 + 4;
  }

  // float steering_percentage_cmd = 37;
  if (!(this->steering_percentage_cmd() <= 0 && this->steering_percentage_cmd() >= 0)) {
    total_size += 2 + 4;
  }

  // .openbot_bridge.chassis_msgs.Chassis.BumperEvent front_bumper_event = 38;
  if (this->front_bumper_event() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_front_bumper_event());
  }

  // .openbot_bridge.chassis_msgs.Chassis.BumperEvent back_bumper_event = 39;
  if (this->back_bumper_event() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_back_bumper_event());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chassis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.chassis_msgs.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  const Chassis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chassis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.chassis_msgs.Chassis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.chassis_msgs.Chassis)
    MergeFrom(*source);
  }
}

void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.chassis_msgs.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::basic_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_signal()) {
    _internal_mutable_signal()->::openbot_bridge::basic_msgs::VehicleSignal::MergeFrom(from._internal_signal());
  }
  if (from.has_chassis_gps()) {
    _internal_mutable_chassis_gps()->::openbot_bridge::chassis_msgs::ChassisGPS::MergeFrom(from._internal_chassis_gps());
  }
  if (from.has_engage_advice()) {
    _internal_mutable_engage_advice()->::openbot_bridge::basic_msgs::EngageAdvice::MergeFrom(from._internal_engage_advice());
  }
  if (from.has_wheel_speed()) {
    _internal_mutable_wheel_speed()->::openbot_bridge::chassis_msgs::WheelSpeed::MergeFrom(from._internal_wheel_speed());
  }
  if (from.has_surround()) {
    _internal_mutable_surround()->::openbot_bridge::chassis_msgs::Surround::MergeFrom(from._internal_surround());
  }
  if (from.has_license()) {
    _internal_mutable_license()->::openbot_bridge::chassis_msgs::License::MergeFrom(from._internal_license());
  }
  if (from.has_vehicle_id()) {
    _internal_mutable_vehicle_id()->::openbot_bridge::basic_msgs::VehicleID::MergeFrom(from._internal_vehicle_id());
  }
  if (from.has_check_response()) {
    _internal_mutable_check_response()->::openbot_bridge::chassis_msgs::CheckResponse::MergeFrom(from._internal_check_response());
  }
  if (from.has_custom_status()) {
    _internal_mutable_custom_status()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_custom_status());
  }
  if (!(from.engine_rpm() <= 0 && from.engine_rpm() >= 0)) {
    _internal_set_engine_rpm(from._internal_engine_rpm());
  }
  if (!(from.speed_mps() <= 0 && from.speed_mps() >= 0)) {
    _internal_set_speed_mps(from._internal_speed_mps());
  }
  if (!(from.odometer_m() <= 0 && from.odometer_m() >= 0)) {
    _internal_set_odometer_m(from._internal_odometer_m());
  }
  if (from.fuel_range_m() != 0) {
    _internal_set_fuel_range_m(from._internal_fuel_range_m());
  }
  if (!(from.throttle_percentage() <= 0 && from.throttle_percentage() >= 0)) {
    _internal_set_throttle_percentage(from._internal_throttle_percentage());
  }
  if (!(from.brake_percentage() <= 0 && from.brake_percentage() >= 0)) {
    _internal_set_brake_percentage(from._internal_brake_percentage());
  }
  if (!(from.steering_percentage() <= 0 && from.steering_percentage() >= 0)) {
    _internal_set_steering_percentage(from._internal_steering_percentage());
  }
  if (from.engine_started() != 0) {
    _internal_set_engine_started(from._internal_engine_started());
  }
  if (from.parking_brake() != 0) {
    _internal_set_parking_brake(from._internal_parking_brake());
  }
  if (from.high_beam_signal() != 0) {
    _internal_set_high_beam_signal(from._internal_high_beam_signal());
  }
  if (from.low_beam_signal() != 0) {
    _internal_set_low_beam_signal(from._internal_low_beam_signal());
  }
  if (!(from.steering_torque_nm() <= 0 && from.steering_torque_nm() >= 0)) {
    _internal_set_steering_torque_nm(from._internal_steering_torque_nm());
  }
  if (from.left_turn_signal() != 0) {
    _internal_set_left_turn_signal(from._internal_left_turn_signal());
  }
  if (from.right_turn_signal() != 0) {
    _internal_set_right_turn_signal(from._internal_right_turn_signal());
  }
  if (from.horn() != 0) {
    _internal_set_horn(from._internal_horn());
  }
  if (from.wiper() != 0) {
    _internal_set_wiper(from._internal_wiper());
  }
  if (from.disengage_status() != 0) {
    _internal_set_disengage_status(from._internal_disengage_status());
  }
  if (from.driving_mode() != 0) {
    _internal_set_driving_mode(from._internal_driving_mode());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  if (from.gear_location() != 0) {
    _internal_set_gear_location(from._internal_gear_location());
  }
  if (!(from.steering_timestamp() <= 0 && from.steering_timestamp() >= 0)) {
    _internal_set_steering_timestamp(from._internal_steering_timestamp());
  }
  if (from.chassis_error_mask() != 0) {
    _internal_set_chassis_error_mask(from._internal_chassis_error_mask());
  }
  if (from.battery_soc_percentage() != 0) {
    _internal_set_battery_soc_percentage(from._internal_battery_soc_percentage());
  }
  if (!(from.throttle_percentage_cmd() <= 0 && from.throttle_percentage_cmd() >= 0)) {
    _internal_set_throttle_percentage_cmd(from._internal_throttle_percentage_cmd());
  }
  if (!(from.brake_percentage_cmd() <= 0 && from.brake_percentage_cmd() >= 0)) {
    _internal_set_brake_percentage_cmd(from._internal_brake_percentage_cmd());
  }
  if (!(from.steering_percentage_cmd() <= 0 && from.steering_percentage_cmd() >= 0)) {
    _internal_set_steering_percentage_cmd(from._internal_steering_percentage_cmd());
  }
  if (from.front_bumper_event() != 0) {
    _internal_set_front_bumper_event(from._internal_front_bumper_event());
  }
  if (from.back_bumper_event() != 0) {
    _internal_set_back_bumper_event(from._internal_back_bumper_event());
  }
}

void Chassis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.chassis_msgs.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.chassis_msgs.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {
  return true;
}

void Chassis::InternalSwap(Chassis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chassis, back_bumper_event_)
      + sizeof(Chassis::back_bumper_event_)
      - PROTOBUF_FIELD_OFFSET(Chassis, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chassis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChassisGPS::_Internal {
 public:
};

ChassisGPS::ChassisGPS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.chassis_msgs.ChassisGPS)
}
ChassisGPS::ChassisGPS(const ChassisGPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_satellites_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(num_satellites_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.chassis_msgs.ChassisGPS)
}

void ChassisGPS::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_satellites_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(num_satellites_));
}

ChassisGPS::~ChassisGPS() {
  // @@protoc_insertion_point(destructor:openbot_bridge.chassis_msgs.ChassisGPS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChassisGPS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChassisGPS::ArenaDtor(void* object) {
  ChassisGPS* _this = reinterpret_cast< ChassisGPS* >(object);
  (void)_this;
}
void ChassisGPS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChassisGPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChassisGPS& ChassisGPS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChassisGPS_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void ChassisGPS::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.chassis_msgs.ChassisGPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_satellites_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(num_satellites_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChassisGPS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool gps_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gps_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hours = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minutes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double compass_direction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          compass_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pdop = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          pdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool is_gps_fault = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          is_gps_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_inferred = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          is_inferred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double altitude = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double hdop = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vdop = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          vdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.GpsQuality quality = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::openbot_bridge::chassis_msgs::GpsQuality>(val));
        } else goto handle_unusual;
        continue;
      // int32 num_satellites = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          num_satellites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double gps_speed = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          gps_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChassisGPS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.chassis_msgs.ChassisGPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // bool gps_valid = 3;
  if (this->gps_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_gps_valid(), target);
  }

  // int32 year = 4;
  if (this->year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_year(), target);
  }

  // int32 month = 5;
  if (this->month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_month(), target);
  }

  // int32 day = 6;
  if (this->day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_day(), target);
  }

  // int32 hours = 7;
  if (this->hours() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_hours(), target);
  }

  // int32 minutes = 8;
  if (this->minutes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_minutes(), target);
  }

  // int32 seconds = 9;
  if (this->seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_seconds(), target);
  }

  // double compass_direction = 10;
  if (!(this->compass_direction() <= 0 && this->compass_direction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_compass_direction(), target);
  }

  // double pdop = 11;
  if (!(this->pdop() <= 0 && this->pdop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_pdop(), target);
  }

  // bool is_gps_fault = 12;
  if (this->is_gps_fault() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_gps_fault(), target);
  }

  // bool is_inferred = 13;
  if (this->is_inferred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_inferred(), target);
  }

  // double altitude = 14;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_altitude(), target);
  }

  // double heading = 15;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_heading(), target);
  }

  // double hdop = 16;
  if (!(this->hdop() <= 0 && this->hdop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_hdop(), target);
  }

  // double vdop = 17;
  if (!(this->vdop() <= 0 && this->vdop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_vdop(), target);
  }

  // .openbot_bridge.chassis_msgs.GpsQuality quality = 18;
  if (this->quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_quality(), target);
  }

  // int32 num_satellites = 19;
  if (this->num_satellites() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_num_satellites(), target);
  }

  // double gps_speed = 20;
  if (!(this->gps_speed() <= 0 && this->gps_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_gps_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.chassis_msgs.ChassisGPS)
  return target;
}

size_t ChassisGPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.chassis_msgs.ChassisGPS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 year = 4;
  if (this->year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  // int32 month = 5;
  if (this->month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  // int32 day = 6;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  // int32 hours = 7;
  if (this->hours() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hours());
  }

  // int32 minutes = 8;
  if (this->minutes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minutes());
  }

  // int32 seconds = 9;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seconds());
  }

  // double compass_direction = 10;
  if (!(this->compass_direction() <= 0 && this->compass_direction() >= 0)) {
    total_size += 1 + 8;
  }

  // double pdop = 11;
  if (!(this->pdop() <= 0 && this->pdop() >= 0)) {
    total_size += 1 + 8;
  }

  // bool gps_valid = 3;
  if (this->gps_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_gps_fault = 12;
  if (this->is_gps_fault() != 0) {
    total_size += 1 + 1;
  }

  // bool is_inferred = 13;
  if (this->is_inferred() != 0) {
    total_size += 1 + 1;
  }

  // .openbot_bridge.chassis_msgs.GpsQuality quality = 18;
  if (this->quality() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // double altitude = 14;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double heading = 15;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 8;
  }

  // double hdop = 16;
  if (!(this->hdop() <= 0 && this->hdop() >= 0)) {
    total_size += 2 + 8;
  }

  // double vdop = 17;
  if (!(this->vdop() <= 0 && this->vdop() >= 0)) {
    total_size += 2 + 8;
  }

  // double gps_speed = 20;
  if (!(this->gps_speed() <= 0 && this->gps_speed() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 num_satellites = 19;
  if (this->num_satellites() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_satellites());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChassisGPS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.chassis_msgs.ChassisGPS)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisGPS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChassisGPS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.chassis_msgs.ChassisGPS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.chassis_msgs.ChassisGPS)
    MergeFrom(*source);
  }
}

void ChassisGPS::MergeFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.chassis_msgs.ChassisGPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from.year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from.month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from.hours() != 0) {
    _internal_set_hours(from._internal_hours());
  }
  if (from.minutes() != 0) {
    _internal_set_minutes(from._internal_minutes());
  }
  if (from.seconds() != 0) {
    _internal_set_seconds(from._internal_seconds());
  }
  if (!(from.compass_direction() <= 0 && from.compass_direction() >= 0)) {
    _internal_set_compass_direction(from._internal_compass_direction());
  }
  if (!(from.pdop() <= 0 && from.pdop() >= 0)) {
    _internal_set_pdop(from._internal_pdop());
  }
  if (from.gps_valid() != 0) {
    _internal_set_gps_valid(from._internal_gps_valid());
  }
  if (from.is_gps_fault() != 0) {
    _internal_set_is_gps_fault(from._internal_is_gps_fault());
  }
  if (from.is_inferred() != 0) {
    _internal_set_is_inferred(from._internal_is_inferred());
  }
  if (from.quality() != 0) {
    _internal_set_quality(from._internal_quality());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.hdop() <= 0 && from.hdop() >= 0)) {
    _internal_set_hdop(from._internal_hdop());
  }
  if (!(from.vdop() <= 0 && from.vdop() >= 0)) {
    _internal_set_vdop(from._internal_vdop());
  }
  if (!(from.gps_speed() <= 0 && from.gps_speed() >= 0)) {
    _internal_set_gps_speed(from._internal_gps_speed());
  }
  if (from.num_satellites() != 0) {
    _internal_set_num_satellites(from._internal_num_satellites());
  }
}

void ChassisGPS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.chassis_msgs.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisGPS::CopyFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.chassis_msgs.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisGPS::IsInitialized() const {
  return true;
}

void ChassisGPS::InternalSwap(ChassisGPS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChassisGPS, num_satellites_)
      + sizeof(ChassisGPS::num_satellites_)
      - PROTOBUF_FIELD_OFFSET(ChassisGPS, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisGPS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WheelSpeed::_Internal {
 public:
};

WheelSpeed::WheelSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.chassis_msgs.WheelSpeed)
}
WheelSpeed::WheelSpeed(const WheelSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wheel_spd_rr_, &from.wheel_spd_rr_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheel_direction_fl_) -
    reinterpret_cast<char*>(&wheel_spd_rr_)) + sizeof(wheel_direction_fl_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.chassis_msgs.WheelSpeed)
}

void WheelSpeed::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_spd_rr_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&wheel_direction_fl_) -
      reinterpret_cast<char*>(&wheel_spd_rr_)) + sizeof(wheel_direction_fl_));
}

WheelSpeed::~WheelSpeed() {
  // @@protoc_insertion_point(destructor:openbot_bridge.chassis_msgs.WheelSpeed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WheelSpeed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WheelSpeed::ArenaDtor(void* object) {
  WheelSpeed* _this = reinterpret_cast< WheelSpeed* >(object);
  (void)_this;
}
void WheelSpeed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WheelSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WheelSpeed& WheelSpeed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WheelSpeed_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void WheelSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.chassis_msgs.WheelSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&wheel_spd_rr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_direction_fl_) -
      reinterpret_cast<char*>(&wheel_spd_rr_)) + sizeof(wheel_direction_fl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WheelSpeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_wheel_spd_rr_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_wheel_spd_rr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.WheelSpeed.WheelSpeedType wheel_direction_rr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wheel_direction_rr(static_cast<::openbot_bridge::chassis_msgs::WheelSpeed_WheelSpeedType>(val));
        } else goto handle_unusual;
        continue;
      // double wheel_spd_rr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          wheel_spd_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool is_wheel_spd_rl_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_wheel_spd_rl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.WheelSpeed.WheelSpeedType wheel_direction_rl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wheel_direction_rl(static_cast<::openbot_bridge::chassis_msgs::WheelSpeed_WheelSpeedType>(val));
        } else goto handle_unusual;
        continue;
      // double wheel_spd_rl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          wheel_spd_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool is_wheel_spd_fr_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_wheel_spd_fr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.WheelSpeed.WheelSpeedType wheel_direction_fr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wheel_direction_fr(static_cast<::openbot_bridge::chassis_msgs::WheelSpeed_WheelSpeedType>(val));
        } else goto handle_unusual;
        continue;
      // double wheel_spd_fr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          wheel_spd_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool is_wheel_spd_fl_valid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_wheel_spd_fl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.chassis_msgs.WheelSpeed.WheelSpeedType wheel_direction_fl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wheel_direction_fl(static_cast<::openbot_bridge::chassis_msgs::WheelSpeed_WheelSpeedType>(val));
        } else goto handle_unusual;
        continue;
      // double wheel_spd_fl = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          wheel_spd_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WheelSpeed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.chassis_msgs.WheelSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_wheel_spd_rr_valid = 1;
  if (this->is_wheel_spd_rr_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_wheel_spd_rr_valid(), target);
  }

  // .openbot_bridge.chassis_msgs.WheelSpeed.WheelSpeedType wheel_direction_rr = 2;
  if (this->wheel_direction_rr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_wheel_direction_rr(), target);
  }

  // double wheel_spd_rr = 3;
  if (!(this->wheel_spd_rr() <= 0 && this->wheel_spd_rr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_wheel_spd_rr(), target);
  }

  // bool is_wheel_spd_rl_valid = 4;
  if (this->is_wheel_spd_rl_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_wheel_spd_rl_valid(), target);
  }

  // .openbot_bridge.chassis_msgs.WheelSpeed.WheelSpeedType wheel_direction_rl = 5;
  if (this->wheel_direction_rl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_wheel_direction_rl(), target);
  }

  // double wheel_spd_rl = 6;
  if (!(this->wheel_spd_rl() <= 0 && this->wheel_spd_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_wheel_spd_rl(), target);
  }

  // bool is_wheel_spd_fr_valid = 7;
  if (this->is_wheel_spd_fr_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_wheel_spd_fr_valid(), target);
  }

  // .openbot_bridge.chassis_msgs.WheelSpeed.WheelSpeedType wheel_direction_fr = 8;
  if (this->wheel_direction_fr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_wheel_direction_fr(), target);
  }

  // double wheel_spd_fr = 9;
  if (!(this->wheel_spd_fr() <= 0 && this->wheel_spd_fr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_wheel_spd_fr(), target);
  }

  // bool is_wheel_spd_fl_valid = 10;
  if (this->is_wheel_spd_fl_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_wheel_spd_fl_valid(), target);
  }

  // .openbot_bridge.chassis_msgs.WheelSpeed.WheelSpeedType wheel_direction_fl = 11;
  if (this->wheel_direction_fl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_wheel_direction_fl(), target);
  }

  // double wheel_spd_fl = 12;
  if (!(this->wheel_spd_fl() <= 0 && this->wheel_spd_fl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_wheel_spd_fl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.chassis_msgs.WheelSpeed)
  return target;
}

size_t WheelSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.chassis_msgs.WheelSpeed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double wheel_spd_rr = 3;
  if (!(this->wheel_spd_rr() <= 0 && this->wheel_spd_rr() >= 0)) {
    total_size += 1 + 8;
  }

  // .openbot_bridge.chassis_msgs.WheelSpeed.WheelSpeedType wheel_direction_rr = 2;
  if (this->wheel_direction_rr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wheel_direction_rr());
  }

  // .openbot_bridge.chassis_msgs.WheelSpeed.WheelSpeedType wheel_direction_rl = 5;
  if (this->wheel_direction_rl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wheel_direction_rl());
  }

  // double wheel_spd_rl = 6;
  if (!(this->wheel_spd_rl() <= 0 && this->wheel_spd_rl() >= 0)) {
    total_size += 1 + 8;
  }

  // bool is_wheel_spd_rr_valid = 1;
  if (this->is_wheel_spd_rr_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_wheel_spd_rl_valid = 4;
  if (this->is_wheel_spd_rl_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_wheel_spd_fr_valid = 7;
  if (this->is_wheel_spd_fr_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_wheel_spd_fl_valid = 10;
  if (this->is_wheel_spd_fl_valid() != 0) {
    total_size += 1 + 1;
  }

  // .openbot_bridge.chassis_msgs.WheelSpeed.WheelSpeedType wheel_direction_fr = 8;
  if (this->wheel_direction_fr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wheel_direction_fr());
  }

  // double wheel_spd_fr = 9;
  if (!(this->wheel_spd_fr() <= 0 && this->wheel_spd_fr() >= 0)) {
    total_size += 1 + 8;
  }

  // double wheel_spd_fl = 12;
  if (!(this->wheel_spd_fl() <= 0 && this->wheel_spd_fl() >= 0)) {
    total_size += 1 + 8;
  }

  // .openbot_bridge.chassis_msgs.WheelSpeed.WheelSpeedType wheel_direction_fl = 11;
  if (this->wheel_direction_fl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wheel_direction_fl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WheelSpeed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.chassis_msgs.WheelSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const WheelSpeed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WheelSpeed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.chassis_msgs.WheelSpeed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.chassis_msgs.WheelSpeed)
    MergeFrom(*source);
  }
}

void WheelSpeed::MergeFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.chassis_msgs.WheelSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.wheel_spd_rr() <= 0 && from.wheel_spd_rr() >= 0)) {
    _internal_set_wheel_spd_rr(from._internal_wheel_spd_rr());
  }
  if (from.wheel_direction_rr() != 0) {
    _internal_set_wheel_direction_rr(from._internal_wheel_direction_rr());
  }
  if (from.wheel_direction_rl() != 0) {
    _internal_set_wheel_direction_rl(from._internal_wheel_direction_rl());
  }
  if (!(from.wheel_spd_rl() <= 0 && from.wheel_spd_rl() >= 0)) {
    _internal_set_wheel_spd_rl(from._internal_wheel_spd_rl());
  }
  if (from.is_wheel_spd_rr_valid() != 0) {
    _internal_set_is_wheel_spd_rr_valid(from._internal_is_wheel_spd_rr_valid());
  }
  if (from.is_wheel_spd_rl_valid() != 0) {
    _internal_set_is_wheel_spd_rl_valid(from._internal_is_wheel_spd_rl_valid());
  }
  if (from.is_wheel_spd_fr_valid() != 0) {
    _internal_set_is_wheel_spd_fr_valid(from._internal_is_wheel_spd_fr_valid());
  }
  if (from.is_wheel_spd_fl_valid() != 0) {
    _internal_set_is_wheel_spd_fl_valid(from._internal_is_wheel_spd_fl_valid());
  }
  if (from.wheel_direction_fr() != 0) {
    _internal_set_wheel_direction_fr(from._internal_wheel_direction_fr());
  }
  if (!(from.wheel_spd_fr() <= 0 && from.wheel_spd_fr() >= 0)) {
    _internal_set_wheel_spd_fr(from._internal_wheel_spd_fr());
  }
  if (!(from.wheel_spd_fl() <= 0 && from.wheel_spd_fl() >= 0)) {
    _internal_set_wheel_spd_fl(from._internal_wheel_spd_fl());
  }
  if (from.wheel_direction_fl() != 0) {
    _internal_set_wheel_direction_fl(from._internal_wheel_direction_fl());
  }
}

void WheelSpeed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.chassis_msgs.WheelSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WheelSpeed::CopyFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.chassis_msgs.WheelSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WheelSpeed::IsInitialized() const {
  return true;
}

void WheelSpeed::InternalSwap(WheelSpeed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WheelSpeed, wheel_direction_fl_)
      + sizeof(WheelSpeed::wheel_direction_fl_)
      - PROTOBUF_FIELD_OFFSET(WheelSpeed, wheel_spd_rr_)>(
          reinterpret_cast<char*>(&wheel_spd_rr_),
          reinterpret_cast<char*>(&other->wheel_spd_rr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WheelSpeed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Sonar::_Internal {
 public:
  static const ::openbot_bridge::basic_msgs::Point3D& translation(const Sonar* msg);
  static const ::openbot_bridge::basic_msgs::Quaternion& rotation(const Sonar* msg);
};

const ::openbot_bridge::basic_msgs::Point3D&
Sonar::_Internal::translation(const Sonar* msg) {
  return *msg->translation_;
}
const ::openbot_bridge::basic_msgs::Quaternion&
Sonar::_Internal::rotation(const Sonar* msg) {
  return *msg->rotation_;
}
void Sonar::clear_translation() {
  if (GetArena() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
void Sonar::clear_rotation() {
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
Sonar::Sonar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.chassis_msgs.Sonar)
}
Sonar::Sonar(const Sonar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    translation_ = new ::openbot_bridge::basic_msgs::Point3D(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::openbot_bridge::basic_msgs::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  range_ = from.range_;
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.chassis_msgs.Sonar)
}

void Sonar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sonar_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&translation_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(range_));
}

Sonar::~Sonar() {
  // @@protoc_insertion_point(destructor:openbot_bridge.chassis_msgs.Sonar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Sonar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete rotation_;
}

void Sonar::ArenaDtor(void* object) {
  Sonar* _this = reinterpret_cast< Sonar* >(object);
  (void)_this;
}
void Sonar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sonar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sonar& Sonar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sonar_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void Sonar::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.chassis_msgs.Sonar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  range_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sonar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.Point3D translation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.Quaternion rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sonar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.chassis_msgs.Sonar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double range = 1;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_range(), target);
  }

  // .openbot_bridge.basic_msgs.Point3D translation = 2;
  if (this->has_translation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::translation(this), target, stream);
  }

  // .openbot_bridge.basic_msgs.Quaternion rotation = 3;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.chassis_msgs.Sonar)
  return target;
}

size_t Sonar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.chassis_msgs.Sonar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.Point3D translation = 2;
  if (this->has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  // .openbot_bridge.basic_msgs.Quaternion rotation = 3;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // double range = 1;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sonar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.chassis_msgs.Sonar)
  GOOGLE_DCHECK_NE(&from, this);
  const Sonar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sonar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.chassis_msgs.Sonar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.chassis_msgs.Sonar)
    MergeFrom(*source);
  }
}

void Sonar::MergeFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.chassis_msgs.Sonar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_translation()) {
    _internal_mutable_translation()->::openbot_bridge::basic_msgs::Point3D::MergeFrom(from._internal_translation());
  }
  if (from.has_rotation()) {
    _internal_mutable_rotation()->::openbot_bridge::basic_msgs::Quaternion::MergeFrom(from._internal_rotation());
  }
  if (!(from.range() <= 0 && from.range() >= 0)) {
    _internal_set_range(from._internal_range());
  }
}

void Sonar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.chassis_msgs.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sonar::CopyFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.chassis_msgs.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sonar::IsInitialized() const {
  return true;
}

void Sonar::InternalSwap(Sonar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sonar, range_)
      + sizeof(Sonar::range_)
      - PROTOBUF_FIELD_OFFSET(Sonar, translation_)>(
          reinterpret_cast<char*>(&translation_),
          reinterpret_cast<char*>(&other->translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sonar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Surround::_Internal {
 public:
};

Surround::Surround(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sonar_range_(arena),
  sonar_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.chassis_msgs.Surround)
}
Surround::Surround(const Surround& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sonar_range_(from.sonar_range_),
      sonar_(from.sonar_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cross_traffic_alert_left_, &from.cross_traffic_alert_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&sonar_fault_) -
    reinterpret_cast<char*>(&cross_traffic_alert_left_)) + sizeof(sonar_fault_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.chassis_msgs.Surround)
}

void Surround::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Surround_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cross_traffic_alert_left_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sonar_fault_) -
      reinterpret_cast<char*>(&cross_traffic_alert_left_)) + sizeof(sonar_fault_));
}

Surround::~Surround() {
  // @@protoc_insertion_point(destructor:openbot_bridge.chassis_msgs.Surround)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Surround::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Surround::ArenaDtor(void* object) {
  Surround* _this = reinterpret_cast< Surround* >(object);
  (void)_this;
}
void Surround::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Surround::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Surround& Surround::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Surround_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void Surround::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.chassis_msgs.Surround)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sonar_range_.Clear();
  sonar_.Clear();
  ::memset(&cross_traffic_alert_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sonar_fault_) -
      reinterpret_cast<char*>(&cross_traffic_alert_left_)) + sizeof(sonar_fault_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Surround::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool cross_traffic_alert_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cross_traffic_alert_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cross_traffic_alert_left_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cross_traffic_alert_left_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool blind_spot_left_alert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blind_spot_left_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool blind_spot_left_alert_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          blind_spot_left_alert_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cross_traffic_alert_right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cross_traffic_alert_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cross_traffic_alert_right_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cross_traffic_alert_right_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool blind_spot_right_alert = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          blind_spot_right_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool blind_spot_right_alert_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          blind_spot_right_alert_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double sonar00 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          sonar00_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sonar01 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          sonar01_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sonar02 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          sonar02_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sonar03 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          sonar03_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sonar04 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          sonar04_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sonar05 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          sonar05_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sonar06 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          sonar06_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sonar07 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          sonar07_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sonar08 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          sonar08_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sonar09 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          sonar09_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sonar10 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          sonar10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sonar11 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          sonar11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool sonar_enabled = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          sonar_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sonar_fault = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          sonar_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double sonar_range = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_sonar_range(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185) {
          _internal_add_sonar_range(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.chassis_msgs.Sonar sonar = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sonar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Surround::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.chassis_msgs.Surround)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool cross_traffic_alert_left = 1;
  if (this->cross_traffic_alert_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_cross_traffic_alert_left(), target);
  }

  // bool cross_traffic_alert_left_enabled = 2;
  if (this->cross_traffic_alert_left_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_cross_traffic_alert_left_enabled(), target);
  }

  // bool blind_spot_left_alert = 3;
  if (this->blind_spot_left_alert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_blind_spot_left_alert(), target);
  }

  // bool blind_spot_left_alert_enabled = 4;
  if (this->blind_spot_left_alert_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_blind_spot_left_alert_enabled(), target);
  }

  // bool cross_traffic_alert_right = 5;
  if (this->cross_traffic_alert_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_cross_traffic_alert_right(), target);
  }

  // bool cross_traffic_alert_right_enabled = 6;
  if (this->cross_traffic_alert_right_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_cross_traffic_alert_right_enabled(), target);
  }

  // bool blind_spot_right_alert = 7;
  if (this->blind_spot_right_alert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_blind_spot_right_alert(), target);
  }

  // bool blind_spot_right_alert_enabled = 8;
  if (this->blind_spot_right_alert_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_blind_spot_right_alert_enabled(), target);
  }

  // double sonar00 = 9;
  if (!(this->sonar00() <= 0 && this->sonar00() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_sonar00(), target);
  }

  // double sonar01 = 10;
  if (!(this->sonar01() <= 0 && this->sonar01() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_sonar01(), target);
  }

  // double sonar02 = 11;
  if (!(this->sonar02() <= 0 && this->sonar02() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_sonar02(), target);
  }

  // double sonar03 = 12;
  if (!(this->sonar03() <= 0 && this->sonar03() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_sonar03(), target);
  }

  // double sonar04 = 13;
  if (!(this->sonar04() <= 0 && this->sonar04() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_sonar04(), target);
  }

  // double sonar05 = 14;
  if (!(this->sonar05() <= 0 && this->sonar05() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_sonar05(), target);
  }

  // double sonar06 = 15;
  if (!(this->sonar06() <= 0 && this->sonar06() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_sonar06(), target);
  }

  // double sonar07 = 16;
  if (!(this->sonar07() <= 0 && this->sonar07() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_sonar07(), target);
  }

  // double sonar08 = 17;
  if (!(this->sonar08() <= 0 && this->sonar08() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_sonar08(), target);
  }

  // double sonar09 = 18;
  if (!(this->sonar09() <= 0 && this->sonar09() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_sonar09(), target);
  }

  // double sonar10 = 19;
  if (!(this->sonar10() <= 0 && this->sonar10() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_sonar10(), target);
  }

  // double sonar11 = 20;
  if (!(this->sonar11() <= 0 && this->sonar11() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_sonar11(), target);
  }

  // bool sonar_enabled = 21;
  if (this->sonar_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_sonar_enabled(), target);
  }

  // bool sonar_fault = 22;
  if (this->sonar_fault() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_sonar_fault(), target);
  }

  // repeated double sonar_range = 23;
  if (this->_internal_sonar_range_size() > 0) {
    target = stream->WriteFixedPacked(23, _internal_sonar_range(), target);
  }

  // repeated .openbot_bridge.chassis_msgs.Sonar sonar = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sonar_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_sonar(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.chassis_msgs.Surround)
  return target;
}

size_t Surround::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.chassis_msgs.Surround)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double sonar_range = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sonar_range_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sonar_range_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .openbot_bridge.chassis_msgs.Sonar sonar = 24;
  total_size += 2UL * this->_internal_sonar_size();
  for (const auto& msg : this->sonar_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool cross_traffic_alert_left = 1;
  if (this->cross_traffic_alert_left() != 0) {
    total_size += 1 + 1;
  }

  // bool cross_traffic_alert_left_enabled = 2;
  if (this->cross_traffic_alert_left_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool blind_spot_left_alert = 3;
  if (this->blind_spot_left_alert() != 0) {
    total_size += 1 + 1;
  }

  // bool blind_spot_left_alert_enabled = 4;
  if (this->blind_spot_left_alert_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool cross_traffic_alert_right = 5;
  if (this->cross_traffic_alert_right() != 0) {
    total_size += 1 + 1;
  }

  // bool cross_traffic_alert_right_enabled = 6;
  if (this->cross_traffic_alert_right_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool blind_spot_right_alert = 7;
  if (this->blind_spot_right_alert() != 0) {
    total_size += 1 + 1;
  }

  // bool blind_spot_right_alert_enabled = 8;
  if (this->blind_spot_right_alert_enabled() != 0) {
    total_size += 1 + 1;
  }

  // double sonar00 = 9;
  if (!(this->sonar00() <= 0 && this->sonar00() >= 0)) {
    total_size += 1 + 8;
  }

  // double sonar01 = 10;
  if (!(this->sonar01() <= 0 && this->sonar01() >= 0)) {
    total_size += 1 + 8;
  }

  // double sonar02 = 11;
  if (!(this->sonar02() <= 0 && this->sonar02() >= 0)) {
    total_size += 1 + 8;
  }

  // double sonar03 = 12;
  if (!(this->sonar03() <= 0 && this->sonar03() >= 0)) {
    total_size += 1 + 8;
  }

  // double sonar04 = 13;
  if (!(this->sonar04() <= 0 && this->sonar04() >= 0)) {
    total_size += 1 + 8;
  }

  // double sonar05 = 14;
  if (!(this->sonar05() <= 0 && this->sonar05() >= 0)) {
    total_size += 1 + 8;
  }

  // double sonar06 = 15;
  if (!(this->sonar06() <= 0 && this->sonar06() >= 0)) {
    total_size += 1 + 8;
  }

  // double sonar07 = 16;
  if (!(this->sonar07() <= 0 && this->sonar07() >= 0)) {
    total_size += 2 + 8;
  }

  // double sonar08 = 17;
  if (!(this->sonar08() <= 0 && this->sonar08() >= 0)) {
    total_size += 2 + 8;
  }

  // double sonar09 = 18;
  if (!(this->sonar09() <= 0 && this->sonar09() >= 0)) {
    total_size += 2 + 8;
  }

  // double sonar10 = 19;
  if (!(this->sonar10() <= 0 && this->sonar10() >= 0)) {
    total_size += 2 + 8;
  }

  // double sonar11 = 20;
  if (!(this->sonar11() <= 0 && this->sonar11() >= 0)) {
    total_size += 2 + 8;
  }

  // bool sonar_enabled = 21;
  if (this->sonar_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool sonar_fault = 22;
  if (this->sonar_fault() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Surround::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.chassis_msgs.Surround)
  GOOGLE_DCHECK_NE(&from, this);
  const Surround* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Surround>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.chassis_msgs.Surround)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.chassis_msgs.Surround)
    MergeFrom(*source);
  }
}

void Surround::MergeFrom(const Surround& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.chassis_msgs.Surround)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sonar_range_.MergeFrom(from.sonar_range_);
  sonar_.MergeFrom(from.sonar_);
  if (from.cross_traffic_alert_left() != 0) {
    _internal_set_cross_traffic_alert_left(from._internal_cross_traffic_alert_left());
  }
  if (from.cross_traffic_alert_left_enabled() != 0) {
    _internal_set_cross_traffic_alert_left_enabled(from._internal_cross_traffic_alert_left_enabled());
  }
  if (from.blind_spot_left_alert() != 0) {
    _internal_set_blind_spot_left_alert(from._internal_blind_spot_left_alert());
  }
  if (from.blind_spot_left_alert_enabled() != 0) {
    _internal_set_blind_spot_left_alert_enabled(from._internal_blind_spot_left_alert_enabled());
  }
  if (from.cross_traffic_alert_right() != 0) {
    _internal_set_cross_traffic_alert_right(from._internal_cross_traffic_alert_right());
  }
  if (from.cross_traffic_alert_right_enabled() != 0) {
    _internal_set_cross_traffic_alert_right_enabled(from._internal_cross_traffic_alert_right_enabled());
  }
  if (from.blind_spot_right_alert() != 0) {
    _internal_set_blind_spot_right_alert(from._internal_blind_spot_right_alert());
  }
  if (from.blind_spot_right_alert_enabled() != 0) {
    _internal_set_blind_spot_right_alert_enabled(from._internal_blind_spot_right_alert_enabled());
  }
  if (!(from.sonar00() <= 0 && from.sonar00() >= 0)) {
    _internal_set_sonar00(from._internal_sonar00());
  }
  if (!(from.sonar01() <= 0 && from.sonar01() >= 0)) {
    _internal_set_sonar01(from._internal_sonar01());
  }
  if (!(from.sonar02() <= 0 && from.sonar02() >= 0)) {
    _internal_set_sonar02(from._internal_sonar02());
  }
  if (!(from.sonar03() <= 0 && from.sonar03() >= 0)) {
    _internal_set_sonar03(from._internal_sonar03());
  }
  if (!(from.sonar04() <= 0 && from.sonar04() >= 0)) {
    _internal_set_sonar04(from._internal_sonar04());
  }
  if (!(from.sonar05() <= 0 && from.sonar05() >= 0)) {
    _internal_set_sonar05(from._internal_sonar05());
  }
  if (!(from.sonar06() <= 0 && from.sonar06() >= 0)) {
    _internal_set_sonar06(from._internal_sonar06());
  }
  if (!(from.sonar07() <= 0 && from.sonar07() >= 0)) {
    _internal_set_sonar07(from._internal_sonar07());
  }
  if (!(from.sonar08() <= 0 && from.sonar08() >= 0)) {
    _internal_set_sonar08(from._internal_sonar08());
  }
  if (!(from.sonar09() <= 0 && from.sonar09() >= 0)) {
    _internal_set_sonar09(from._internal_sonar09());
  }
  if (!(from.sonar10() <= 0 && from.sonar10() >= 0)) {
    _internal_set_sonar10(from._internal_sonar10());
  }
  if (!(from.sonar11() <= 0 && from.sonar11() >= 0)) {
    _internal_set_sonar11(from._internal_sonar11());
  }
  if (from.sonar_enabled() != 0) {
    _internal_set_sonar_enabled(from._internal_sonar_enabled());
  }
  if (from.sonar_fault() != 0) {
    _internal_set_sonar_fault(from._internal_sonar_fault());
  }
}

void Surround::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.chassis_msgs.Surround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Surround::CopyFrom(const Surround& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.chassis_msgs.Surround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Surround::IsInitialized() const {
  return true;
}

void Surround::InternalSwap(Surround* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sonar_range_.InternalSwap(&other->sonar_range_);
  sonar_.InternalSwap(&other->sonar_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Surround, sonar_fault_)
      + sizeof(Surround::sonar_fault_)
      - PROTOBUF_FIELD_OFFSET(Surround, cross_traffic_alert_left_)>(
          reinterpret_cast<char*>(&cross_traffic_alert_left_),
          reinterpret_cast<char*>(&other->cross_traffic_alert_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Surround::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class License::_Internal {
 public:
};

License::License(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.chassis_msgs.License)
}
License::License(const License& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vin().empty()) {
    vin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vin(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.chassis_msgs.License)
}

void License::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_License_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base);
  vin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

License::~License() {
  // @@protoc_insertion_point(destructor:openbot_bridge.chassis_msgs.License)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void License::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void License::ArenaDtor(void* object) {
  License* _this = reinterpret_cast< License* >(object);
  (void)_this;
}
void License::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void License::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const License& License::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_License_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void License::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.chassis_msgs.License)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vin_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* License::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.chassis_msgs.License.vin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* License::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.chassis_msgs.License)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vin = 1;
  if (this->vin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vin().data(), static_cast<int>(this->_internal_vin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.chassis_msgs.License.vin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.chassis_msgs.License)
  return target;
}

size_t License::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.chassis_msgs.License)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vin = 1;
  if (this->vin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void License::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.chassis_msgs.License)
  GOOGLE_DCHECK_NE(&from, this);
  const License* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<License>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.chassis_msgs.License)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.chassis_msgs.License)
    MergeFrom(*source);
  }
}

void License::MergeFrom(const License& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.chassis_msgs.License)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vin().size() > 0) {
    _internal_set_vin(from._internal_vin());
  }
}

void License::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.chassis_msgs.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void License::CopyFrom(const License& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.chassis_msgs.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool License::IsInitialized() const {
  return true;
}

void License::InternalSwap(License* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vin_.Swap(&other->vin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata License::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CheckResponse::_Internal {
 public:
};

CheckResponse::CheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.chassis_msgs.CheckResponse)
}
CheckResponse::CheckResponse(const CheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_eps_online_, &from.is_eps_online_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_vcu_online_) -
    reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.chassis_msgs.CheckResponse)
}

void CheckResponse::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&is_eps_online_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_vcu_online_) -
      reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
}

CheckResponse::~CheckResponse() {
  // @@protoc_insertion_point(destructor:openbot_bridge.chassis_msgs.CheckResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckResponse::ArenaDtor(void* object) {
  CheckResponse* _this = reinterpret_cast< CheckResponse* >(object);
  (void)_this;
}
void CheckResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckResponse& CheckResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckResponse_openbot_5fbridge_2fchassis_5fmsgs_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void CheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.chassis_msgs.CheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_eps_online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_vcu_online_) -
      reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_eps_online = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_eps_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_epb_online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_epb_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_esp_online = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_esp_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_vtog_online = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_vtog_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_scu_online = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_scu_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_switch_online = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_switch_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_vcu_online = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_vcu_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.chassis_msgs.CheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_eps_online = 1;
  if (this->is_eps_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_eps_online(), target);
  }

  // bool is_epb_online = 2;
  if (this->is_epb_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_epb_online(), target);
  }

  // bool is_esp_online = 3;
  if (this->is_esp_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_esp_online(), target);
  }

  // bool is_vtog_online = 4;
  if (this->is_vtog_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_vtog_online(), target);
  }

  // bool is_scu_online = 5;
  if (this->is_scu_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_scu_online(), target);
  }

  // bool is_switch_online = 6;
  if (this->is_switch_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_switch_online(), target);
  }

  // bool is_vcu_online = 7;
  if (this->is_vcu_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_vcu_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.chassis_msgs.CheckResponse)
  return target;
}

size_t CheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.chassis_msgs.CheckResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_eps_online = 1;
  if (this->is_eps_online() != 0) {
    total_size += 1 + 1;
  }

  // bool is_epb_online = 2;
  if (this->is_epb_online() != 0) {
    total_size += 1 + 1;
  }

  // bool is_esp_online = 3;
  if (this->is_esp_online() != 0) {
    total_size += 1 + 1;
  }

  // bool is_vtog_online = 4;
  if (this->is_vtog_online() != 0) {
    total_size += 1 + 1;
  }

  // bool is_scu_online = 5;
  if (this->is_scu_online() != 0) {
    total_size += 1 + 1;
  }

  // bool is_switch_online = 6;
  if (this->is_switch_online() != 0) {
    total_size += 1 + 1;
  }

  // bool is_vcu_online = 7;
  if (this->is_vcu_online() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.chassis_msgs.CheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.chassis_msgs.CheckResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.chassis_msgs.CheckResponse)
    MergeFrom(*source);
  }
}

void CheckResponse::MergeFrom(const CheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.chassis_msgs.CheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_eps_online() != 0) {
    _internal_set_is_eps_online(from._internal_is_eps_online());
  }
  if (from.is_epb_online() != 0) {
    _internal_set_is_epb_online(from._internal_is_epb_online());
  }
  if (from.is_esp_online() != 0) {
    _internal_set_is_esp_online(from._internal_is_esp_online());
  }
  if (from.is_vtog_online() != 0) {
    _internal_set_is_vtog_online(from._internal_is_vtog_online());
  }
  if (from.is_scu_online() != 0) {
    _internal_set_is_scu_online(from._internal_is_scu_online());
  }
  if (from.is_switch_online() != 0) {
    _internal_set_is_switch_online(from._internal_is_switch_online());
  }
  if (from.is_vcu_online() != 0) {
    _internal_set_is_vcu_online(from._internal_is_vcu_online());
  }
}

void CheckResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.chassis_msgs.CheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckResponse::CopyFrom(const CheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.chassis_msgs.CheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponse::IsInitialized() const {
  return true;
}

void CheckResponse::InternalSwap(CheckResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckResponse, is_vcu_online_)
      + sizeof(CheckResponse::is_vcu_online_)
      - PROTOBUF_FIELD_OFFSET(CheckResponse, is_eps_online_)>(
          reinterpret_cast<char*>(&is_eps_online_),
          reinterpret_cast<char*>(&other->is_eps_online_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chassis_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openbot_bridge::chassis_msgs::Chassis* Arena::CreateMaybeMessage< ::openbot_bridge::chassis_msgs::Chassis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::chassis_msgs::Chassis >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::chassis_msgs::ChassisGPS* Arena::CreateMaybeMessage< ::openbot_bridge::chassis_msgs::ChassisGPS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::chassis_msgs::ChassisGPS >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::chassis_msgs::WheelSpeed* Arena::CreateMaybeMessage< ::openbot_bridge::chassis_msgs::WheelSpeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::chassis_msgs::WheelSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::chassis_msgs::Sonar* Arena::CreateMaybeMessage< ::openbot_bridge::chassis_msgs::Sonar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::chassis_msgs::Sonar >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::chassis_msgs::Surround* Arena::CreateMaybeMessage< ::openbot_bridge::chassis_msgs::Surround >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::chassis_msgs::Surround >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::chassis_msgs::License* Arena::CreateMaybeMessage< ::openbot_bridge::chassis_msgs::License >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::chassis_msgs::License >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::chassis_msgs::CheckResponse* Arena::CreateMaybeMessage< ::openbot_bridge::chassis_msgs::CheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::chassis_msgs::CheckResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
