// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/ros2_msgs/vision_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "openbot_bridge/ros2_msgs/std_msgs.pb.h"
#include "openbot_bridge/ros2_msgs/geometry_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
namespace openbot_bridge {
namespace ros2_msgs {
namespace vision_msgs {
class BoundingBox2D;
class BoundingBox2DDefaultTypeInternal;
extern BoundingBox2DDefaultTypeInternal _BoundingBox2D_default_instance_;
class BoundingBox2DArray;
class BoundingBox2DArrayDefaultTypeInternal;
extern BoundingBox2DArrayDefaultTypeInternal _BoundingBox2DArray_default_instance_;
class BoundingBox3D;
class BoundingBox3DDefaultTypeInternal;
extern BoundingBox3DDefaultTypeInternal _BoundingBox3D_default_instance_;
class BoundingBox3DArray;
class BoundingBox3DArrayDefaultTypeInternal;
extern BoundingBox3DArrayDefaultTypeInternal _BoundingBox3DArray_default_instance_;
class Classification;
class ClassificationDefaultTypeInternal;
extern ClassificationDefaultTypeInternal _Classification_default_instance_;
class Detection2D;
class Detection2DDefaultTypeInternal;
extern Detection2DDefaultTypeInternal _Detection2D_default_instance_;
class Detection2DArray;
class Detection2DArrayDefaultTypeInternal;
extern Detection2DArrayDefaultTypeInternal _Detection2DArray_default_instance_;
class Detection3D;
class Detection3DDefaultTypeInternal;
extern Detection3DDefaultTypeInternal _Detection3D_default_instance_;
class Detection3DArray;
class Detection3DArrayDefaultTypeInternal;
extern Detection3DArrayDefaultTypeInternal _Detection3DArray_default_instance_;
class LabelInfo;
class LabelInfoDefaultTypeInternal;
extern LabelInfoDefaultTypeInternal _LabelInfo_default_instance_;
class ObjectHypothesis;
class ObjectHypothesisDefaultTypeInternal;
extern ObjectHypothesisDefaultTypeInternal _ObjectHypothesis_default_instance_;
class ObjectHypothesisWithPose;
class ObjectHypothesisWithPoseDefaultTypeInternal;
extern ObjectHypothesisWithPoseDefaultTypeInternal _ObjectHypothesisWithPose_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Pose2D;
class Pose2DDefaultTypeInternal;
extern Pose2DDefaultTypeInternal _Pose2D_default_instance_;
class VisionClass;
class VisionClassDefaultTypeInternal;
extern VisionClassDefaultTypeInternal _VisionClass_default_instance_;
class VisionInfo;
class VisionInfoDefaultTypeInternal;
extern VisionInfoDefaultTypeInternal _VisionInfo_default_instance_;
}  // namespace vision_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2DArray* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2DArray>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3DArray* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3DArray>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::Classification* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::Classification>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::Detection2D>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::Detection2DArray* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::Detection2DArray>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::Detection3D>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::Detection3DArray* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::Detection3DArray>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::LabelInfo* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::LabelInfo>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::Point2D>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::Pose2D>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::VisionClass>(Arena*);
template<> ::openbot_bridge::ros2_msgs::vision_msgs::VisionInfo* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::VisionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openbot_bridge {
namespace ros2_msgs {
namespace vision_msgs {

// ===================================================================

class BoundingBox2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D) */ {
 public:
  inline BoundingBox2D() : BoundingBox2D(nullptr) {}
  virtual ~BoundingBox2D();

  BoundingBox2D(const BoundingBox2D& from);
  BoundingBox2D(BoundingBox2D&& from) noexcept
    : BoundingBox2D() {
    *this = ::std::move(from);
  }

  inline BoundingBox2D& operator=(const BoundingBox2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox2D& operator=(BoundingBox2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundingBox2D& default_instance();

  static inline const BoundingBox2D* internal_default_instance() {
    return reinterpret_cast<const BoundingBox2D*>(
               &_BoundingBox2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoundingBox2D& a, BoundingBox2D& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox2D* New() const final {
    return CreateMaybeMessage<BoundingBox2D>(nullptr);
  }

  BoundingBox2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundingBox2D& from);
  void MergeFrom(const BoundingBox2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D";
  }
  protected:
  explicit BoundingBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kSizeXFieldNumber = 2,
    kSizeYFieldNumber = 3,
  };
  // .openbot_bridge.ros2_msgs.vision_msgs.Pose2D center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D& center() const;
  ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* release_center();
  ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* mutable_center();
  void set_allocated_center(::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* center);
  private:
  const ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D& _internal_center() const;
  ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* center);
  ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* unsafe_arena_release_center();

  // double size_x = 2;
  void clear_size_x();
  double size_x() const;
  void set_size_x(double value);
  private:
  double _internal_size_x() const;
  void _internal_set_size_x(double value);
  public:

  // double size_y = 3;
  void clear_size_y();
  double size_y() const;
  void set_size_y(double value);
  private:
  double _internal_size_y() const;
  void _internal_set_size_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* center_;
  double size_x_;
  double size_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox2DArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray) */ {
 public:
  inline BoundingBox2DArray() : BoundingBox2DArray(nullptr) {}
  virtual ~BoundingBox2DArray();

  BoundingBox2DArray(const BoundingBox2DArray& from);
  BoundingBox2DArray(BoundingBox2DArray&& from) noexcept
    : BoundingBox2DArray() {
    *this = ::std::move(from);
  }

  inline BoundingBox2DArray& operator=(const BoundingBox2DArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox2DArray& operator=(BoundingBox2DArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundingBox2DArray& default_instance();

  static inline const BoundingBox2DArray* internal_default_instance() {
    return reinterpret_cast<const BoundingBox2DArray*>(
               &_BoundingBox2DArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoundingBox2DArray& a, BoundingBox2DArray& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox2DArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox2DArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox2DArray* New() const final {
    return CreateMaybeMessage<BoundingBox2DArray>(nullptr);
  }

  BoundingBox2DArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox2DArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundingBox2DArray& from);
  void MergeFrom(const BoundingBox2DArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox2DArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray";
  }
  protected:
  explicit BoundingBox2DArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D boxes = 2;
  int boxes_size() const;
  private:
  int _internal_boxes_size() const;
  public:
  void clear_boxes();
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* mutable_boxes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D >*
      mutable_boxes();
  private:
  const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D& _internal_boxes(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* _internal_add_boxes();
  public:
  const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D& boxes(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* add_boxes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D >&
      boxes() const;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D > boxes_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D) */ {
 public:
  inline BoundingBox3D() : BoundingBox3D(nullptr) {}
  virtual ~BoundingBox3D();

  BoundingBox3D(const BoundingBox3D& from);
  BoundingBox3D(BoundingBox3D&& from) noexcept
    : BoundingBox3D() {
    *this = ::std::move(from);
  }

  inline BoundingBox3D& operator=(const BoundingBox3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox3D& operator=(BoundingBox3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundingBox3D& default_instance();

  static inline const BoundingBox3D* internal_default_instance() {
    return reinterpret_cast<const BoundingBox3D*>(
               &_BoundingBox3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BoundingBox3D& a, BoundingBox3D& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox3D* New() const final {
    return CreateMaybeMessage<BoundingBox3D>(nullptr);
  }

  BoundingBox3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundingBox3D& from);
  void MergeFrom(const BoundingBox3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D";
  }
  protected:
  explicit BoundingBox3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& center() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* release_center();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* mutable_center();
  void set_allocated_center(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* center);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& _internal_center() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* center);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* unsafe_arena_release_center();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& size() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* release_size();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* mutable_size();
  void set_allocated_size(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* size);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& _internal_size() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* size);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* center_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox3DArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray) */ {
 public:
  inline BoundingBox3DArray() : BoundingBox3DArray(nullptr) {}
  virtual ~BoundingBox3DArray();

  BoundingBox3DArray(const BoundingBox3DArray& from);
  BoundingBox3DArray(BoundingBox3DArray&& from) noexcept
    : BoundingBox3DArray() {
    *this = ::std::move(from);
  }

  inline BoundingBox3DArray& operator=(const BoundingBox3DArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox3DArray& operator=(BoundingBox3DArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundingBox3DArray& default_instance();

  static inline const BoundingBox3DArray* internal_default_instance() {
    return reinterpret_cast<const BoundingBox3DArray*>(
               &_BoundingBox3DArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BoundingBox3DArray& a, BoundingBox3DArray& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox3DArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox3DArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox3DArray* New() const final {
    return CreateMaybeMessage<BoundingBox3DArray>(nullptr);
  }

  BoundingBox3DArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox3DArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundingBox3DArray& from);
  void MergeFrom(const BoundingBox3DArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox3DArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray";
  }
  protected:
  explicit BoundingBox3DArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D boxes = 2;
  int boxes_size() const;
  private:
  int _internal_boxes_size() const;
  public:
  void clear_boxes();
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* mutable_boxes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D >*
      mutable_boxes();
  private:
  const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D& _internal_boxes(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* _internal_add_boxes();
  public:
  const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D& boxes(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* add_boxes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D >&
      boxes() const;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D > boxes_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Classification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.Classification) */ {
 public:
  inline Classification() : Classification(nullptr) {}
  virtual ~Classification();

  Classification(const Classification& from);
  Classification(Classification&& from) noexcept
    : Classification() {
    *this = ::std::move(from);
  }

  inline Classification& operator=(const Classification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Classification& operator=(Classification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Classification& default_instance();

  static inline const Classification* internal_default_instance() {
    return reinterpret_cast<const Classification*>(
               &_Classification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Classification& a, Classification& b) {
    a.Swap(&b);
  }
  inline void Swap(Classification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Classification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Classification* New() const final {
    return CreateMaybeMessage<Classification>(nullptr);
  }

  Classification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Classification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Classification& from);
  void MergeFrom(const Classification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Classification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.Classification";
  }
  protected:
  explicit Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis >*
      mutable_results();
  private:
  const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis& _internal_results(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* _internal_add_results();
  public:
  const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis& results(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis >&
      results() const;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.Classification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis > results_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Detection2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.Detection2D) */ {
 public:
  inline Detection2D() : Detection2D(nullptr) {}
  virtual ~Detection2D();

  Detection2D(const Detection2D& from);
  Detection2D(Detection2D&& from) noexcept
    : Detection2D() {
    *this = ::std::move(from);
  }

  inline Detection2D& operator=(const Detection2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection2D& operator=(Detection2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detection2D& default_instance();

  static inline const Detection2D* internal_default_instance() {
    return reinterpret_cast<const Detection2D*>(
               &_Detection2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Detection2D& a, Detection2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Detection2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detection2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detection2D* New() const final {
    return CreateMaybeMessage<Detection2D>(nullptr);
  }

  Detection2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detection2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detection2D& from);
  void MergeFrom(const Detection2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.Detection2D";
  }
  protected:
  explicit Detection2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kIdFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kBboxFieldNumber = 3,
  };
  // repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose >*
      mutable_results();
  private:
  const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose& _internal_results(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* _internal_add_results();
  public:
  const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose& results(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose >&
      results() const;

  // string id = 4;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D bbox = 3;
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D& bbox() const;
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* release_bbox();
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* mutable_bbox();
  void set_allocated_bbox(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* bbox);
  private:
  const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D& _internal_bbox() const;
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* bbox);
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* unsafe_arena_release_bbox();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* bbox_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Detection2DArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray) */ {
 public:
  inline Detection2DArray() : Detection2DArray(nullptr) {}
  virtual ~Detection2DArray();

  Detection2DArray(const Detection2DArray& from);
  Detection2DArray(Detection2DArray&& from) noexcept
    : Detection2DArray() {
    *this = ::std::move(from);
  }

  inline Detection2DArray& operator=(const Detection2DArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection2DArray& operator=(Detection2DArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detection2DArray& default_instance();

  static inline const Detection2DArray* internal_default_instance() {
    return reinterpret_cast<const Detection2DArray*>(
               &_Detection2DArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Detection2DArray& a, Detection2DArray& b) {
    a.Swap(&b);
  }
  inline void Swap(Detection2DArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detection2DArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detection2DArray* New() const final {
    return CreateMaybeMessage<Detection2DArray>(nullptr);
  }

  Detection2DArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detection2DArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detection2DArray& from);
  void MergeFrom(const Detection2DArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection2DArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray";
  }
  protected:
  explicit Detection2DArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .openbot_bridge.ros2_msgs.vision_msgs.Detection2D detections = 2;
  int detections_size() const;
  private:
  int _internal_detections_size() const;
  public:
  void clear_detections();
  ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D* mutable_detections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D >*
      mutable_detections();
  private:
  const ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D& _internal_detections(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D* _internal_add_detections();
  public:
  const ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D& detections(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D* add_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D >&
      detections() const;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D > detections_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Detection3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.Detection3D) */ {
 public:
  inline Detection3D() : Detection3D(nullptr) {}
  virtual ~Detection3D();

  Detection3D(const Detection3D& from);
  Detection3D(Detection3D&& from) noexcept
    : Detection3D() {
    *this = ::std::move(from);
  }

  inline Detection3D& operator=(const Detection3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection3D& operator=(Detection3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detection3D& default_instance();

  static inline const Detection3D* internal_default_instance() {
    return reinterpret_cast<const Detection3D*>(
               &_Detection3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Detection3D& a, Detection3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Detection3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detection3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detection3D* New() const final {
    return CreateMaybeMessage<Detection3D>(nullptr);
  }

  Detection3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detection3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detection3D& from);
  void MergeFrom(const Detection3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.Detection3D";
  }
  protected:
  explicit Detection3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kIdFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kBboxFieldNumber = 3,
  };
  // repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose >*
      mutable_results();
  private:
  const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose& _internal_results(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* _internal_add_results();
  public:
  const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose& results(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose >&
      results() const;

  // string id = 4;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D bbox = 3;
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D& bbox() const;
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* release_bbox();
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* mutable_bbox();
  void set_allocated_bbox(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* bbox);
  private:
  const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D& _internal_bbox() const;
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* bbox);
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* unsafe_arena_release_bbox();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* bbox_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Detection3DArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray) */ {
 public:
  inline Detection3DArray() : Detection3DArray(nullptr) {}
  virtual ~Detection3DArray();

  Detection3DArray(const Detection3DArray& from);
  Detection3DArray(Detection3DArray&& from) noexcept
    : Detection3DArray() {
    *this = ::std::move(from);
  }

  inline Detection3DArray& operator=(const Detection3DArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection3DArray& operator=(Detection3DArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detection3DArray& default_instance();

  static inline const Detection3DArray* internal_default_instance() {
    return reinterpret_cast<const Detection3DArray*>(
               &_Detection3DArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Detection3DArray& a, Detection3DArray& b) {
    a.Swap(&b);
  }
  inline void Swap(Detection3DArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detection3DArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detection3DArray* New() const final {
    return CreateMaybeMessage<Detection3DArray>(nullptr);
  }

  Detection3DArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detection3DArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detection3DArray& from);
  void MergeFrom(const Detection3DArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection3DArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray";
  }
  protected:
  explicit Detection3DArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .openbot_bridge.ros2_msgs.vision_msgs.Detection3D detections = 2;
  int detections_size() const;
  private:
  int _internal_detections_size() const;
  public:
  void clear_detections();
  ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D* mutable_detections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D >*
      mutable_detections();
  private:
  const ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D& _internal_detections(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D* _internal_add_detections();
  public:
  const ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D& detections(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D* add_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D >&
      detections() const;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D > detections_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class LabelInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo) */ {
 public:
  inline LabelInfo() : LabelInfo(nullptr) {}
  virtual ~LabelInfo();

  LabelInfo(const LabelInfo& from);
  LabelInfo(LabelInfo&& from) noexcept
    : LabelInfo() {
    *this = ::std::move(from);
  }

  inline LabelInfo& operator=(const LabelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelInfo& operator=(LabelInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelInfo& default_instance();

  static inline const LabelInfo* internal_default_instance() {
    return reinterpret_cast<const LabelInfo*>(
               &_LabelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LabelInfo& a, LabelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelInfo* New() const final {
    return CreateMaybeMessage<LabelInfo>(nullptr);
  }

  LabelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelInfo& from);
  void MergeFrom(const LabelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.LabelInfo";
  }
  protected:
  explicit LabelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassMapFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kThresholdFieldNumber = 3,
  };
  // repeated .openbot_bridge.ros2_msgs.vision_msgs.VisionClass class_map = 2;
  int class_map_size() const;
  private:
  int _internal_class_map_size() const;
  public:
  void clear_class_map();
  ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass* mutable_class_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass >*
      mutable_class_map();
  private:
  const ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass& _internal_class_map(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass* _internal_add_class_map();
  public:
  const ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass& class_map(int index) const;
  ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass* add_class_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass >&
      class_map() const;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // float threshold = 3;
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass > class_map_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  float threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ObjectHypothesis PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis) */ {
 public:
  inline ObjectHypothesis() : ObjectHypothesis(nullptr) {}
  virtual ~ObjectHypothesis();

  ObjectHypothesis(const ObjectHypothesis& from);
  ObjectHypothesis(ObjectHypothesis&& from) noexcept
    : ObjectHypothesis() {
    *this = ::std::move(from);
  }

  inline ObjectHypothesis& operator=(const ObjectHypothesis& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectHypothesis& operator=(ObjectHypothesis&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectHypothesis& default_instance();

  static inline const ObjectHypothesis* internal_default_instance() {
    return reinterpret_cast<const ObjectHypothesis*>(
               &_ObjectHypothesis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ObjectHypothesis& a, ObjectHypothesis& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectHypothesis* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectHypothesis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectHypothesis* New() const final {
    return CreateMaybeMessage<ObjectHypothesis>(nullptr);
  }

  ObjectHypothesis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectHypothesis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectHypothesis& from);
  void MergeFrom(const ObjectHypothesis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectHypothesis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis";
  }
  protected:
  explicit ObjectHypothesis(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassIdFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // string class_id = 1;
  void clear_class_id();
  const std::string& class_id() const;
  void set_class_id(const std::string& value);
  void set_class_id(std::string&& value);
  void set_class_id(const char* value);
  void set_class_id(const char* value, size_t size);
  std::string* mutable_class_id();
  std::string* release_class_id();
  void set_allocated_class_id(std::string* class_id);
  private:
  const std::string& _internal_class_id() const;
  void _internal_set_class_id(const std::string& value);
  std::string* _internal_mutable_class_id();
  public:

  // double score = 2;
  void clear_score();
  double score() const;
  void set_score(double value);
  private:
  double _internal_score() const;
  void _internal_set_score(double value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
  double score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ObjectHypothesisWithPose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose) */ {
 public:
  inline ObjectHypothesisWithPose() : ObjectHypothesisWithPose(nullptr) {}
  virtual ~ObjectHypothesisWithPose();

  ObjectHypothesisWithPose(const ObjectHypothesisWithPose& from);
  ObjectHypothesisWithPose(ObjectHypothesisWithPose&& from) noexcept
    : ObjectHypothesisWithPose() {
    *this = ::std::move(from);
  }

  inline ObjectHypothesisWithPose& operator=(const ObjectHypothesisWithPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectHypothesisWithPose& operator=(ObjectHypothesisWithPose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectHypothesisWithPose& default_instance();

  static inline const ObjectHypothesisWithPose* internal_default_instance() {
    return reinterpret_cast<const ObjectHypothesisWithPose*>(
               &_ObjectHypothesisWithPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ObjectHypothesisWithPose& a, ObjectHypothesisWithPose& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectHypothesisWithPose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectHypothesisWithPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectHypothesisWithPose* New() const final {
    return CreateMaybeMessage<ObjectHypothesisWithPose>(nullptr);
  }

  ObjectHypothesisWithPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectHypothesisWithPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectHypothesisWithPose& from);
  void MergeFrom(const ObjectHypothesisWithPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectHypothesisWithPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose";
  }
  protected:
  explicit ObjectHypothesisWithPose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHypothesisFieldNumber = 1,
    kPoseFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis hypothesis = 1;
  bool has_hypothesis() const;
  private:
  bool _internal_has_hypothesis() const;
  public:
  void clear_hypothesis();
  const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis& hypothesis() const;
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* release_hypothesis();
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* mutable_hypothesis();
  void set_allocated_hypothesis(::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* hypothesis);
  private:
  const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis& _internal_hypothesis() const;
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* _internal_mutable_hypothesis();
  public:
  void unsafe_arena_set_allocated_hypothesis(
      ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* hypothesis);
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* unsafe_arena_release_hypothesis();

  // .openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* release_pose();
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* mutable_pose();
  void set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& _internal_pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose);
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* hypothesis_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Point2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.Point2D) */ {
 public:
  inline Point2D() : Point2D(nullptr) {}
  virtual ~Point2D();

  Point2D(const Point2D& from);
  Point2D(Point2D&& from) noexcept
    : Point2D() {
    *this = ::std::move(from);
  }

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2D& operator=(Point2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2D& default_instance();

  static inline const Point2D* internal_default_instance() {
    return reinterpret_cast<const Point2D*>(
               &_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Point2D& a, Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2D* New() const final {
    return CreateMaybeMessage<Point2D>(nullptr);
  }

  Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.Point2D";
  }
  protected:
  explicit Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Pose2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.Pose2D) */ {
 public:
  inline Pose2D() : Pose2D(nullptr) {}
  virtual ~Pose2D();

  Pose2D(const Pose2D& from);
  Pose2D(Pose2D&& from) noexcept
    : Pose2D() {
    *this = ::std::move(from);
  }

  inline Pose2D& operator=(const Pose2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose2D& operator=(Pose2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose2D& default_instance();

  static inline const Pose2D* internal_default_instance() {
    return reinterpret_cast<const Pose2D*>(
               &_Pose2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Pose2D& a, Pose2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose2D* New() const final {
    return CreateMaybeMessage<Pose2D>(nullptr);
  }

  Pose2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose2D& from);
  void MergeFrom(const Pose2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.Pose2D";
  }
  protected:
  explicit Pose2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kThetaFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.vision_msgs.Point2D position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::openbot_bridge::ros2_msgs::vision_msgs::Point2D& position() const;
  ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* release_position();
  ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* mutable_position();
  void set_allocated_position(::openbot_bridge::ros2_msgs::vision_msgs::Point2D* position);
  private:
  const ::openbot_bridge::ros2_msgs::vision_msgs::Point2D& _internal_position() const;
  ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* position);
  ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* unsafe_arena_release_position();

  // double theta = 2;
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* position_;
  double theta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class VisionClass PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.VisionClass) */ {
 public:
  inline VisionClass() : VisionClass(nullptr) {}
  virtual ~VisionClass();

  VisionClass(const VisionClass& from);
  VisionClass(VisionClass&& from) noexcept
    : VisionClass() {
    *this = ::std::move(from);
  }

  inline VisionClass& operator=(const VisionClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisionClass& operator=(VisionClass&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisionClass& default_instance();

  static inline const VisionClass* internal_default_instance() {
    return reinterpret_cast<const VisionClass*>(
               &_VisionClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(VisionClass& a, VisionClass& b) {
    a.Swap(&b);
  }
  inline void Swap(VisionClass* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisionClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisionClass* New() const final {
    return CreateMaybeMessage<VisionClass>(nullptr);
  }

  VisionClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisionClass>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisionClass& from);
  void MergeFrom(const VisionClass& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisionClass* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.VisionClass";
  }
  protected:
  explicit VisionClass(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassNameFieldNumber = 2,
    kClassIdFieldNumber = 1,
  };
  // string class_name = 2;
  void clear_class_name();
  const std::string& class_name() const;
  void set_class_name(const std::string& value);
  void set_class_name(std::string&& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  std::string* mutable_class_name();
  std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // uint32 class_id = 1;
  void clear_class_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 class_id() const;
  void set_class_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_class_id() const;
  void _internal_set_class_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 class_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class VisionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo) */ {
 public:
  inline VisionInfo() : VisionInfo(nullptr) {}
  virtual ~VisionInfo();

  VisionInfo(const VisionInfo& from);
  VisionInfo(VisionInfo&& from) noexcept
    : VisionInfo() {
    *this = ::std::move(from);
  }

  inline VisionInfo& operator=(const VisionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisionInfo& operator=(VisionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisionInfo& default_instance();

  static inline const VisionInfo* internal_default_instance() {
    return reinterpret_cast<const VisionInfo*>(
               &_VisionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VisionInfo& a, VisionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VisionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisionInfo* New() const final {
    return CreateMaybeMessage<VisionInfo>(nullptr);
  }

  VisionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisionInfo& from);
  void MergeFrom(const VisionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.vision_msgs.VisionInfo";
  }
  protected:
  explicit VisionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 2,
    kDatabaseLocationFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kDatabaseVersionFieldNumber = 4,
  };
  // string method = 2;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string database_location = 3;
  void clear_database_location();
  const std::string& database_location() const;
  void set_database_location(const std::string& value);
  void set_database_location(std::string&& value);
  void set_database_location(const char* value);
  void set_database_location(const char* value, size_t size);
  std::string* mutable_database_location();
  std::string* release_database_location();
  void set_allocated_database_location(std::string* database_location);
  private:
  const std::string& _internal_database_location() const;
  void _internal_set_database_location(const std::string& value);
  std::string* _internal_mutable_database_location();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // int32 database_version = 4;
  void clear_database_version();
  ::PROTOBUF_NAMESPACE_ID::int32 database_version() const;
  void set_database_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_database_version() const;
  void _internal_set_database_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_location_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 database_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoundingBox2D

// .openbot_bridge.ros2_msgs.vision_msgs.Pose2D center = 1;
inline bool BoundingBox2D::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool BoundingBox2D::has_center() const {
  return _internal_has_center();
}
inline void BoundingBox2D::clear_center() {
  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D& BoundingBox2D::_internal_center() const {
  const ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* p = center_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D&>(
      ::openbot_bridge::ros2_msgs::vision_msgs::_Pose2D_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D& BoundingBox2D::center() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D.center)
  return _internal_center();
}
inline void BoundingBox2D::unsafe_arena_set_allocated_center(
    ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D.center)
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* BoundingBox2D::release_center() {
  
  ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* temp = center_;
  center_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* BoundingBox2D::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D.center)
  
  ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* BoundingBox2D::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::Pose2D>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* BoundingBox2D::mutable_center() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D.center)
  return _internal_mutable_center();
}
inline void BoundingBox2D::set_allocated_center(::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D.center)
}

// double size_x = 2;
inline void BoundingBox2D::clear_size_x() {
  size_x_ = 0;
}
inline double BoundingBox2D::_internal_size_x() const {
  return size_x_;
}
inline double BoundingBox2D::size_x() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D.size_x)
  return _internal_size_x();
}
inline void BoundingBox2D::_internal_set_size_x(double value) {
  
  size_x_ = value;
}
inline void BoundingBox2D::set_size_x(double value) {
  _internal_set_size_x(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D.size_x)
}

// double size_y = 3;
inline void BoundingBox2D::clear_size_y() {
  size_y_ = 0;
}
inline double BoundingBox2D::_internal_size_y() const {
  return size_y_;
}
inline double BoundingBox2D::size_y() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D.size_y)
  return _internal_size_y();
}
inline void BoundingBox2D::_internal_set_size_y(double value) {
  
  size_y_ = value;
}
inline void BoundingBox2D::set_size_y(double value) {
  _internal_set_size_y(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D.size_y)
}

// -------------------------------------------------------------------

// BoundingBox2DArray

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool BoundingBox2DArray::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool BoundingBox2DArray::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& BoundingBox2DArray::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& BoundingBox2DArray::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray.header)
  return _internal_header();
}
inline void BoundingBox2DArray::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* BoundingBox2DArray::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* BoundingBox2DArray::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* BoundingBox2DArray::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* BoundingBox2DArray::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray.header)
  return _internal_mutable_header();
}
inline void BoundingBox2DArray::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray.header)
}

// repeated .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D boxes = 2;
inline int BoundingBox2DArray::_internal_boxes_size() const {
  return boxes_.size();
}
inline int BoundingBox2DArray::boxes_size() const {
  return _internal_boxes_size();
}
inline void BoundingBox2DArray::clear_boxes() {
  boxes_.Clear();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* BoundingBox2DArray::mutable_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray.boxes)
  return boxes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D >*
BoundingBox2DArray::mutable_boxes() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray.boxes)
  return &boxes_;
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D& BoundingBox2DArray::_internal_boxes(int index) const {
  return boxes_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D& BoundingBox2DArray::boxes(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray.boxes)
  return _internal_boxes(index);
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* BoundingBox2DArray::_internal_add_boxes() {
  return boxes_.Add();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* BoundingBox2DArray::add_boxes() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray.boxes)
  return _internal_add_boxes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D >&
BoundingBox2DArray::boxes() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray.boxes)
  return boxes_;
}

// -------------------------------------------------------------------

// BoundingBox3D

// .openbot_bridge.ros2_msgs.geometry_msgs.Pose center = 1;
inline bool BoundingBox3D::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool BoundingBox3D::has_center() const {
  return _internal_has_center();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& BoundingBox3D::_internal_center() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* p = center_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Pose_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& BoundingBox3D::center() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D.center)
  return _internal_center();
}
inline void BoundingBox3D::unsafe_arena_set_allocated_center(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D.center)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* BoundingBox3D::release_center() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = center_;
  center_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* BoundingBox3D::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D.center)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* BoundingBox3D::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Pose>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* BoundingBox3D::mutable_center() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D.center)
  return _internal_mutable_center();
}
inline void BoundingBox3D::set_allocated_center(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center)->GetArena();
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D.center)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 size = 2;
inline bool BoundingBox3D::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool BoundingBox3D::has_size() const {
  return _internal_has_size();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& BoundingBox3D::_internal_size() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& BoundingBox3D::size() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D.size)
  return _internal_size();
}
inline void BoundingBox3D::unsafe_arena_set_allocated_size(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D.size)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* BoundingBox3D::release_size() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = size_;
  size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* BoundingBox3D::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D.size)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* BoundingBox3D::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* BoundingBox3D::mutable_size() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D.size)
  return _internal_mutable_size();
}
inline void BoundingBox3D::set_allocated_size(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size)->GetArena();
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D.size)
}

// -------------------------------------------------------------------

// BoundingBox3DArray

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool BoundingBox3DArray::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool BoundingBox3DArray::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& BoundingBox3DArray::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& BoundingBox3DArray::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray.header)
  return _internal_header();
}
inline void BoundingBox3DArray::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* BoundingBox3DArray::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* BoundingBox3DArray::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* BoundingBox3DArray::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* BoundingBox3DArray::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray.header)
  return _internal_mutable_header();
}
inline void BoundingBox3DArray::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray.header)
}

// repeated .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D boxes = 2;
inline int BoundingBox3DArray::_internal_boxes_size() const {
  return boxes_.size();
}
inline int BoundingBox3DArray::boxes_size() const {
  return _internal_boxes_size();
}
inline void BoundingBox3DArray::clear_boxes() {
  boxes_.Clear();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* BoundingBox3DArray::mutable_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray.boxes)
  return boxes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D >*
BoundingBox3DArray::mutable_boxes() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray.boxes)
  return &boxes_;
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D& BoundingBox3DArray::_internal_boxes(int index) const {
  return boxes_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D& BoundingBox3DArray::boxes(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray.boxes)
  return _internal_boxes(index);
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* BoundingBox3DArray::_internal_add_boxes() {
  return boxes_.Add();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* BoundingBox3DArray::add_boxes() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray.boxes)
  return _internal_add_boxes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D >&
BoundingBox3DArray::boxes() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray.boxes)
  return boxes_;
}

// -------------------------------------------------------------------

// Classification

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Classification::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Classification::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Classification::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Classification::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Classification.header)
  return _internal_header();
}
inline void Classification::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Classification.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Classification::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Classification::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.Classification.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Classification::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Classification::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Classification.header)
  return _internal_mutable_header();
}
inline void Classification::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Classification.header)
}

// repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis results = 2;
inline int Classification::_internal_results_size() const {
  return results_.size();
}
inline int Classification::results_size() const {
  return _internal_results_size();
}
inline void Classification::clear_results() {
  results_.Clear();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* Classification::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Classification.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis >*
Classification::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.vision_msgs.Classification.results)
  return &results_;
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis& Classification::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis& Classification::results(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Classification.results)
  return _internal_results(index);
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* Classification::_internal_add_results() {
  return results_.Add();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* Classification::add_results() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.vision_msgs.Classification.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis >&
Classification::results() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.vision_msgs.Classification.results)
  return results_;
}

// -------------------------------------------------------------------

// Detection2D

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Detection2D::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Detection2D::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Detection2D::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Detection2D::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.header)
  return _internal_header();
}
inline void Detection2D::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection2D::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection2D::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection2D::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection2D::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.header)
  return _internal_mutable_header();
}
inline void Detection2D::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.header)
}

// repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose results = 2;
inline int Detection2D::_internal_results_size() const {
  return results_.size();
}
inline int Detection2D::results_size() const {
  return _internal_results_size();
}
inline void Detection2D::clear_results() {
  results_.Clear();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* Detection2D::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose >*
Detection2D::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.results)
  return &results_;
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose& Detection2D::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose& Detection2D::results(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.results)
  return _internal_results(index);
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* Detection2D::_internal_add_results() {
  return results_.Add();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* Detection2D::add_results() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose >&
Detection2D::results() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.results)
  return results_;
}

// .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D bbox = 3;
inline bool Detection2D::_internal_has_bbox() const {
  return this != internal_default_instance() && bbox_ != nullptr;
}
inline bool Detection2D::has_bbox() const {
  return _internal_has_bbox();
}
inline void Detection2D::clear_bbox() {
  if (GetArena() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D& Detection2D::_internal_bbox() const {
  const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* p = bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D&>(
      ::openbot_bridge::ros2_msgs::vision_msgs::_BoundingBox2D_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D& Detection2D::bbox() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.bbox)
  return _internal_bbox();
}
inline void Detection2D::unsafe_arena_set_allocated_bbox(
    ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* bbox) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox_);
  }
  bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.bbox)
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* Detection2D::release_bbox() {
  
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* temp = bbox_;
  bbox_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* Detection2D::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.bbox)
  
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* temp = bbox_;
  bbox_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* Detection2D::_internal_mutable_bbox() {
  
  if (bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D>(GetArena());
    bbox_ = p;
  }
  return bbox_;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* Detection2D::mutable_bbox() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.bbox)
  return _internal_mutable_bbox();
}
inline void Detection2D::set_allocated_bbox(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bbox_;
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bbox);
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    
  } else {
    
  }
  bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.bbox)
}

// string id = 4;
inline void Detection2D::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Detection2D::id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.id)
  return _internal_id();
}
inline void Detection2D::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.id)
}
inline std::string* Detection2D::mutable_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.id)
  return _internal_mutable_id();
}
inline const std::string& Detection2D::_internal_id() const {
  return id_.Get();
}
inline void Detection2D::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Detection2D::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.id)
}
inline void Detection2D::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.id)
}
inline void Detection2D::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.id)
}
inline std::string* Detection2D::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Detection2D::release_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Detection2D::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection2D.id)
}

// -------------------------------------------------------------------

// Detection2DArray

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Detection2DArray::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Detection2DArray::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Detection2DArray::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Detection2DArray::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray.header)
  return _internal_header();
}
inline void Detection2DArray::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection2DArray::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection2DArray::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection2DArray::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection2DArray::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray.header)
  return _internal_mutable_header();
}
inline void Detection2DArray::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray.header)
}

// repeated .openbot_bridge.ros2_msgs.vision_msgs.Detection2D detections = 2;
inline int Detection2DArray::_internal_detections_size() const {
  return detections_.size();
}
inline int Detection2DArray::detections_size() const {
  return _internal_detections_size();
}
inline void Detection2DArray::clear_detections() {
  detections_.Clear();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D* Detection2DArray::mutable_detections(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray.detections)
  return detections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D >*
Detection2DArray::mutable_detections() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray.detections)
  return &detections_;
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D& Detection2DArray::_internal_detections(int index) const {
  return detections_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D& Detection2DArray::detections(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray.detections)
  return _internal_detections(index);
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D* Detection2DArray::_internal_add_detections() {
  return detections_.Add();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D* Detection2DArray::add_detections() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray.detections)
  return _internal_add_detections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D >&
Detection2DArray::detections() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray.detections)
  return detections_;
}

// -------------------------------------------------------------------

// Detection3D

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Detection3D::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Detection3D::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Detection3D::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Detection3D::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.header)
  return _internal_header();
}
inline void Detection3D::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection3D::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection3D::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection3D::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection3D::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.header)
  return _internal_mutable_header();
}
inline void Detection3D::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.header)
}

// repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose results = 2;
inline int Detection3D::_internal_results_size() const {
  return results_.size();
}
inline int Detection3D::results_size() const {
  return _internal_results_size();
}
inline void Detection3D::clear_results() {
  results_.Clear();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* Detection3D::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose >*
Detection3D::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.results)
  return &results_;
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose& Detection3D::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose& Detection3D::results(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.results)
  return _internal_results(index);
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* Detection3D::_internal_add_results() {
  return results_.Add();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* Detection3D::add_results() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose >&
Detection3D::results() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.results)
  return results_;
}

// .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D bbox = 3;
inline bool Detection3D::_internal_has_bbox() const {
  return this != internal_default_instance() && bbox_ != nullptr;
}
inline bool Detection3D::has_bbox() const {
  return _internal_has_bbox();
}
inline void Detection3D::clear_bbox() {
  if (GetArena() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D& Detection3D::_internal_bbox() const {
  const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* p = bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D&>(
      ::openbot_bridge::ros2_msgs::vision_msgs::_BoundingBox3D_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D& Detection3D::bbox() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.bbox)
  return _internal_bbox();
}
inline void Detection3D::unsafe_arena_set_allocated_bbox(
    ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* bbox) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox_);
  }
  bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.bbox)
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* Detection3D::release_bbox() {
  
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* temp = bbox_;
  bbox_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* Detection3D::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.bbox)
  
  ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* temp = bbox_;
  bbox_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* Detection3D::_internal_mutable_bbox() {
  
  if (bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D>(GetArena());
    bbox_ = p;
  }
  return bbox_;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* Detection3D::mutable_bbox() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.bbox)
  return _internal_mutable_bbox();
}
inline void Detection3D::set_allocated_bbox(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bbox_;
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bbox);
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    
  } else {
    
  }
  bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.bbox)
}

// string id = 4;
inline void Detection3D::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Detection3D::id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.id)
  return _internal_id();
}
inline void Detection3D::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.id)
}
inline std::string* Detection3D::mutable_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.id)
  return _internal_mutable_id();
}
inline const std::string& Detection3D::_internal_id() const {
  return id_.Get();
}
inline void Detection3D::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Detection3D::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.id)
}
inline void Detection3D::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.id)
}
inline void Detection3D::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.id)
}
inline std::string* Detection3D::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Detection3D::release_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Detection3D::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection3D.id)
}

// -------------------------------------------------------------------

// Detection3DArray

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Detection3DArray::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Detection3DArray::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Detection3DArray::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Detection3DArray::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray.header)
  return _internal_header();
}
inline void Detection3DArray::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection3DArray::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection3DArray::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection3DArray::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Detection3DArray::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray.header)
  return _internal_mutable_header();
}
inline void Detection3DArray::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray.header)
}

// repeated .openbot_bridge.ros2_msgs.vision_msgs.Detection3D detections = 2;
inline int Detection3DArray::_internal_detections_size() const {
  return detections_.size();
}
inline int Detection3DArray::detections_size() const {
  return _internal_detections_size();
}
inline void Detection3DArray::clear_detections() {
  detections_.Clear();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D* Detection3DArray::mutable_detections(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray.detections)
  return detections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D >*
Detection3DArray::mutable_detections() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray.detections)
  return &detections_;
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D& Detection3DArray::_internal_detections(int index) const {
  return detections_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D& Detection3DArray::detections(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray.detections)
  return _internal_detections(index);
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D* Detection3DArray::_internal_add_detections() {
  return detections_.Add();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D* Detection3DArray::add_detections() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray.detections)
  return _internal_add_detections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D >&
Detection3DArray::detections() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray.detections)
  return detections_;
}

// -------------------------------------------------------------------

// LabelInfo

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool LabelInfo::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LabelInfo::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& LabelInfo::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& LabelInfo::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo.header)
  return _internal_header();
}
inline void LabelInfo::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* LabelInfo::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* LabelInfo::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* LabelInfo::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* LabelInfo::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo.header)
  return _internal_mutable_header();
}
inline void LabelInfo::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo.header)
}

// repeated .openbot_bridge.ros2_msgs.vision_msgs.VisionClass class_map = 2;
inline int LabelInfo::_internal_class_map_size() const {
  return class_map_.size();
}
inline int LabelInfo::class_map_size() const {
  return _internal_class_map_size();
}
inline void LabelInfo::clear_class_map() {
  class_map_.Clear();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass* LabelInfo::mutable_class_map(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo.class_map)
  return class_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass >*
LabelInfo::mutable_class_map() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo.class_map)
  return &class_map_;
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass& LabelInfo::_internal_class_map(int index) const {
  return class_map_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass& LabelInfo::class_map(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo.class_map)
  return _internal_class_map(index);
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass* LabelInfo::_internal_add_class_map() {
  return class_map_.Add();
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass* LabelInfo::add_class_map() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo.class_map)
  return _internal_add_class_map();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass >&
LabelInfo::class_map() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo.class_map)
  return class_map_;
}

// float threshold = 3;
inline void LabelInfo::clear_threshold() {
  threshold_ = 0;
}
inline float LabelInfo::_internal_threshold() const {
  return threshold_;
}
inline float LabelInfo::threshold() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo.threshold)
  return _internal_threshold();
}
inline void LabelInfo::_internal_set_threshold(float value) {
  
  threshold_ = value;
}
inline void LabelInfo::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo.threshold)
}

// -------------------------------------------------------------------

// ObjectHypothesis

// string class_id = 1;
inline void ObjectHypothesis::clear_class_id() {
  class_id_.ClearToEmpty();
}
inline const std::string& ObjectHypothesis::class_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis.class_id)
  return _internal_class_id();
}
inline void ObjectHypothesis::set_class_id(const std::string& value) {
  _internal_set_class_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis.class_id)
}
inline std::string* ObjectHypothesis::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis.class_id)
  return _internal_mutable_class_id();
}
inline const std::string& ObjectHypothesis::_internal_class_id() const {
  return class_id_.Get();
}
inline void ObjectHypothesis::_internal_set_class_id(const std::string& value) {
  
  class_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjectHypothesis::set_class_id(std::string&& value) {
  
  class_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis.class_id)
}
inline void ObjectHypothesis::set_class_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  class_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis.class_id)
}
inline void ObjectHypothesis::set_class_id(const char* value,
    size_t size) {
  
  class_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis.class_id)
}
inline std::string* ObjectHypothesis::_internal_mutable_class_id() {
  
  return class_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjectHypothesis::release_class_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis.class_id)
  return class_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectHypothesis::set_allocated_class_id(std::string* class_id) {
  if (class_id != nullptr) {
    
  } else {
    
  }
  class_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis.class_id)
}

// double score = 2;
inline void ObjectHypothesis::clear_score() {
  score_ = 0;
}
inline double ObjectHypothesis::_internal_score() const {
  return score_;
}
inline double ObjectHypothesis::score() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis.score)
  return _internal_score();
}
inline void ObjectHypothesis::_internal_set_score(double value) {
  
  score_ = value;
}
inline void ObjectHypothesis::set_score(double value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis.score)
}

// -------------------------------------------------------------------

// ObjectHypothesisWithPose

// .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis hypothesis = 1;
inline bool ObjectHypothesisWithPose::_internal_has_hypothesis() const {
  return this != internal_default_instance() && hypothesis_ != nullptr;
}
inline bool ObjectHypothesisWithPose::has_hypothesis() const {
  return _internal_has_hypothesis();
}
inline void ObjectHypothesisWithPose::clear_hypothesis() {
  if (GetArena() == nullptr && hypothesis_ != nullptr) {
    delete hypothesis_;
  }
  hypothesis_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis& ObjectHypothesisWithPose::_internal_hypothesis() const {
  const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* p = hypothesis_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis&>(
      ::openbot_bridge::ros2_msgs::vision_msgs::_ObjectHypothesis_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis& ObjectHypothesisWithPose::hypothesis() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose.hypothesis)
  return _internal_hypothesis();
}
inline void ObjectHypothesisWithPose::unsafe_arena_set_allocated_hypothesis(
    ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* hypothesis) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hypothesis_);
  }
  hypothesis_ = hypothesis;
  if (hypothesis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose.hypothesis)
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* ObjectHypothesisWithPose::release_hypothesis() {
  
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* temp = hypothesis_;
  hypothesis_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* ObjectHypothesisWithPose::unsafe_arena_release_hypothesis() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose.hypothesis)
  
  ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* temp = hypothesis_;
  hypothesis_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* ObjectHypothesisWithPose::_internal_mutable_hypothesis() {
  
  if (hypothesis_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis>(GetArena());
    hypothesis_ = p;
  }
  return hypothesis_;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* ObjectHypothesisWithPose::mutable_hypothesis() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose.hypothesis)
  return _internal_mutable_hypothesis();
}
inline void ObjectHypothesisWithPose::set_allocated_hypothesis(::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* hypothesis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hypothesis_;
  }
  if (hypothesis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hypothesis);
    if (message_arena != submessage_arena) {
      hypothesis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hypothesis, submessage_arena);
    }
    
  } else {
    
  }
  hypothesis_ = hypothesis;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose.hypothesis)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance pose = 2;
inline bool ObjectHypothesisWithPose::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool ObjectHypothesisWithPose::has_pose() const {
  return _internal_has_pose();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& ObjectHypothesisWithPose::_internal_pose() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_PoseWithCovariance_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& ObjectHypothesisWithPose::pose() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose.pose)
  return _internal_pose();
}
inline void ObjectHypothesisWithPose::unsafe_arena_set_allocated_pose(
    ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose.pose)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* ObjectHypothesisWithPose::release_pose() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* temp = pose_;
  pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* ObjectHypothesisWithPose::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose.pose)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* ObjectHypothesisWithPose::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* ObjectHypothesisWithPose::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose.pose)
  return _internal_mutable_pose();
}
inline void ObjectHypothesisWithPose::set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose)->GetArena();
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose.pose)
}

// -------------------------------------------------------------------

// Point2D

// double x = 1;
inline void Point2D::clear_x() {
  x_ = 0;
}
inline double Point2D::_internal_x() const {
  return x_;
}
inline double Point2D::x() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Point2D.x)
  return _internal_x();
}
inline void Point2D::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point2D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.Point2D.x)
}

// double y = 2;
inline void Point2D::clear_y() {
  y_ = 0;
}
inline double Point2D::_internal_y() const {
  return y_;
}
inline double Point2D::y() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Point2D.y)
  return _internal_y();
}
inline void Point2D::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point2D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.Point2D.y)
}

// -------------------------------------------------------------------

// Pose2D

// .openbot_bridge.ros2_msgs.vision_msgs.Point2D position = 1;
inline bool Pose2D::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Pose2D::has_position() const {
  return _internal_has_position();
}
inline void Pose2D::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::Point2D& Pose2D::_internal_position() const {
  const ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::vision_msgs::Point2D&>(
      ::openbot_bridge::ros2_msgs::vision_msgs::_Point2D_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::vision_msgs::Point2D& Pose2D::position() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Pose2D.position)
  return _internal_position();
}
inline void Pose2D::unsafe_arena_set_allocated_position(
    ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Pose2D.position)
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* Pose2D::release_position() {
  
  ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* Pose2D::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.Pose2D.position)
  
  ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* Pose2D::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::vision_msgs::Point2D>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* Pose2D::mutable_position() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.Pose2D.position)
  return _internal_mutable_position();
}
inline void Pose2D::set_allocated_position(::openbot_bridge::ros2_msgs::vision_msgs::Point2D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.Pose2D.position)
}

// double theta = 2;
inline void Pose2D::clear_theta() {
  theta_ = 0;
}
inline double Pose2D::_internal_theta() const {
  return theta_;
}
inline double Pose2D::theta() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.Pose2D.theta)
  return _internal_theta();
}
inline void Pose2D::_internal_set_theta(double value) {
  
  theta_ = value;
}
inline void Pose2D::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.Pose2D.theta)
}

// -------------------------------------------------------------------

// VisionClass

// uint32 class_id = 1;
inline void VisionClass::clear_class_id() {
  class_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisionClass::_internal_class_id() const {
  return class_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisionClass::class_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.VisionClass.class_id)
  return _internal_class_id();
}
inline void VisionClass::_internal_set_class_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  class_id_ = value;
}
inline void VisionClass::set_class_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_class_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.VisionClass.class_id)
}

// string class_name = 2;
inline void VisionClass::clear_class_name() {
  class_name_.ClearToEmpty();
}
inline const std::string& VisionClass::class_name() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.VisionClass.class_name)
  return _internal_class_name();
}
inline void VisionClass::set_class_name(const std::string& value) {
  _internal_set_class_name(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.VisionClass.class_name)
}
inline std::string* VisionClass::mutable_class_name() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.VisionClass.class_name)
  return _internal_mutable_class_name();
}
inline const std::string& VisionClass::_internal_class_name() const {
  return class_name_.Get();
}
inline void VisionClass::_internal_set_class_name(const std::string& value) {
  
  class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VisionClass::set_class_name(std::string&& value) {
  
  class_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.vision_msgs.VisionClass.class_name)
}
inline void VisionClass::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.vision_msgs.VisionClass.class_name)
}
inline void VisionClass::set_class_name(const char* value,
    size_t size) {
  
  class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.vision_msgs.VisionClass.class_name)
}
inline std::string* VisionClass::_internal_mutable_class_name() {
  
  return class_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VisionClass::release_class_name() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.VisionClass.class_name)
  return class_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VisionClass::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.VisionClass.class_name)
}

// -------------------------------------------------------------------

// VisionInfo

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool VisionInfo::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool VisionInfo::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& VisionInfo::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& VisionInfo::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.header)
  return _internal_header();
}
inline void VisionInfo::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* VisionInfo::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* VisionInfo::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* VisionInfo::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* VisionInfo::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.header)
  return _internal_mutable_header();
}
inline void VisionInfo::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.header)
}

// string method = 2;
inline void VisionInfo::clear_method() {
  method_.ClearToEmpty();
}
inline const std::string& VisionInfo::method() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.method)
  return _internal_method();
}
inline void VisionInfo::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.method)
}
inline std::string* VisionInfo::mutable_method() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.method)
  return _internal_mutable_method();
}
inline const std::string& VisionInfo::_internal_method() const {
  return method_.Get();
}
inline void VisionInfo::_internal_set_method(const std::string& value) {
  
  method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VisionInfo::set_method(std::string&& value) {
  
  method_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.method)
}
inline void VisionInfo::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.method)
}
inline void VisionInfo::set_method(const char* value,
    size_t size) {
  
  method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.method)
}
inline std::string* VisionInfo::_internal_mutable_method() {
  
  return method_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VisionInfo::release_method() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VisionInfo::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.method)
}

// string database_location = 3;
inline void VisionInfo::clear_database_location() {
  database_location_.ClearToEmpty();
}
inline const std::string& VisionInfo::database_location() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.database_location)
  return _internal_database_location();
}
inline void VisionInfo::set_database_location(const std::string& value) {
  _internal_set_database_location(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.database_location)
}
inline std::string* VisionInfo::mutable_database_location() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.database_location)
  return _internal_mutable_database_location();
}
inline const std::string& VisionInfo::_internal_database_location() const {
  return database_location_.Get();
}
inline void VisionInfo::_internal_set_database_location(const std::string& value) {
  
  database_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VisionInfo::set_database_location(std::string&& value) {
  
  database_location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.database_location)
}
inline void VisionInfo::set_database_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.database_location)
}
inline void VisionInfo::set_database_location(const char* value,
    size_t size) {
  
  database_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.database_location)
}
inline std::string* VisionInfo::_internal_mutable_database_location() {
  
  return database_location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VisionInfo::release_database_location() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.database_location)
  return database_location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VisionInfo::set_allocated_database_location(std::string* database_location) {
  if (database_location != nullptr) {
    
  } else {
    
  }
  database_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database_location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.database_location)
}

// int32 database_version = 4;
inline void VisionInfo::clear_database_version() {
  database_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisionInfo::_internal_database_version() const {
  return database_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisionInfo::database_version() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.database_version)
  return _internal_database_version();
}
inline void VisionInfo::_internal_set_database_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  database_version_ = value;
}
inline void VisionInfo::set_database_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_database_version(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.database_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vision_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto
