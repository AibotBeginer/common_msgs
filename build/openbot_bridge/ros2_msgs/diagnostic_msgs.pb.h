// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/ros2_msgs/diagnostic_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "openbot_bridge/ros2_msgs/std_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto;
namespace openbot_bridge {
namespace ros2_msgs {
namespace diagnostic_msgs {
class DiagnosticArray;
class DiagnosticArrayDefaultTypeInternal;
extern DiagnosticArrayDefaultTypeInternal _DiagnosticArray_default_instance_;
class DiagnosticStatus;
class DiagnosticStatusDefaultTypeInternal;
extern DiagnosticStatusDefaultTypeInternal _DiagnosticStatus_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
}  // namespace diagnostic_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticArray* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticArray>(Arena*);
template<> ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus>(Arena*);
template<> ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openbot_bridge {
namespace ros2_msgs {
namespace diagnostic_msgs {

// ===================================================================

class KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DiagnosticStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus) */ {
 public:
  inline DiagnosticStatus() : DiagnosticStatus(nullptr) {}
  virtual ~DiagnosticStatus();

  DiagnosticStatus(const DiagnosticStatus& from);
  DiagnosticStatus(DiagnosticStatus&& from) noexcept
    : DiagnosticStatus() {
    *this = ::std::move(from);
  }

  inline DiagnosticStatus& operator=(const DiagnosticStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosticStatus& operator=(DiagnosticStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiagnosticStatus& default_instance();

  static inline const DiagnosticStatus* internal_default_instance() {
    return reinterpret_cast<const DiagnosticStatus*>(
               &_DiagnosticStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DiagnosticStatus& a, DiagnosticStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(DiagnosticStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiagnosticStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticStatus* New() const final {
    return CreateMaybeMessage<DiagnosticStatus>(nullptr);
  }

  DiagnosticStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosticStatus& from);
  void MergeFrom(const DiagnosticStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus";
  }
  protected:
  explicit DiagnosticStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 5,
    kLevelFieldNumber = 1,
    kNameFieldNumber = 2,
    kMessageFieldNumber = 3,
    kHardwareIdFieldNumber = 4,
  };
  // repeated .openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue values = 5;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue >*
      mutable_values();
  private:
  const ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue& _internal_values(int index) const;
  ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue* _internal_add_values();
  public:
  const ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue& values(int index) const;
  ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue >&
      values() const;

  // bytes level = 1;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const void* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string hardware_id = 4;
  void clear_hardware_id();
  const std::string& hardware_id() const;
  void set_hardware_id(const std::string& value);
  void set_hardware_id(std::string&& value);
  void set_hardware_id(const char* value);
  void set_hardware_id(const char* value, size_t size);
  std::string* mutable_hardware_id();
  std::string* release_hardware_id();
  void set_allocated_hardware_id(std::string* hardware_id);
  private:
  const std::string& _internal_hardware_id() const;
  void _internal_set_hardware_id(const std::string& value);
  std::string* _internal_mutable_hardware_id();
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hardware_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DiagnosticArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray) */ {
 public:
  inline DiagnosticArray() : DiagnosticArray(nullptr) {}
  virtual ~DiagnosticArray();

  DiagnosticArray(const DiagnosticArray& from);
  DiagnosticArray(DiagnosticArray&& from) noexcept
    : DiagnosticArray() {
    *this = ::std::move(from);
  }

  inline DiagnosticArray& operator=(const DiagnosticArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosticArray& operator=(DiagnosticArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiagnosticArray& default_instance();

  static inline const DiagnosticArray* internal_default_instance() {
    return reinterpret_cast<const DiagnosticArray*>(
               &_DiagnosticArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DiagnosticArray& a, DiagnosticArray& b) {
    a.Swap(&b);
  }
  inline void Swap(DiagnosticArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiagnosticArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticArray* New() const final {
    return CreateMaybeMessage<DiagnosticArray>(nullptr);
  }

  DiagnosticArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosticArray& from);
  void MergeFrom(const DiagnosticArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray";
  }
  protected:
  explicit DiagnosticArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus status = 2;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus* mutable_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus >*
      mutable_status();
  private:
  const ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus& _internal_status(int index) const;
  ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus* _internal_add_status();
  public:
  const ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus& status(int index) const;
  ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus* add_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus >&
      status() const;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus > status_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyValue

// string key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.key)
  return _internal_key();
}
inline void KeyValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValue::_internal_key() const {
  return key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyValue::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.key)
}
inline void KeyValue::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.key)
}
inline std::string* KeyValue::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.key)
}

// string value = 2;
inline void KeyValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.value)
  return _internal_value();
}
inline void KeyValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValue::_internal_value() const {
  return value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyValue::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.value)
}
inline void KeyValue::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.value)
}
inline std::string* KeyValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.value)
}

// -------------------------------------------------------------------

// DiagnosticStatus

// bytes level = 1;
inline void DiagnosticStatus::clear_level() {
  level_.ClearToEmpty();
}
inline const std::string& DiagnosticStatus::level() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.level)
  return _internal_level();
}
inline void DiagnosticStatus::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.level)
}
inline std::string* DiagnosticStatus::mutable_level() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.level)
  return _internal_mutable_level();
}
inline const std::string& DiagnosticStatus::_internal_level() const {
  return level_.Get();
}
inline void DiagnosticStatus::_internal_set_level(const std::string& value) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DiagnosticStatus::set_level(std::string&& value) {
  
  level_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.level)
}
inline void DiagnosticStatus::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.level)
}
inline void DiagnosticStatus::set_level(const void* value,
    size_t size) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.level)
}
inline std::string* DiagnosticStatus::_internal_mutable_level() {
  
  return level_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DiagnosticStatus::release_level() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DiagnosticStatus::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.level)
}

// string name = 2;
inline void DiagnosticStatus::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DiagnosticStatus::name() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.name)
  return _internal_name();
}
inline void DiagnosticStatus::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.name)
}
inline std::string* DiagnosticStatus::mutable_name() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.name)
  return _internal_mutable_name();
}
inline const std::string& DiagnosticStatus::_internal_name() const {
  return name_.Get();
}
inline void DiagnosticStatus::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DiagnosticStatus::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.name)
}
inline void DiagnosticStatus::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.name)
}
inline void DiagnosticStatus::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.name)
}
inline std::string* DiagnosticStatus::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DiagnosticStatus::release_name() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DiagnosticStatus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.name)
}

// string message = 3;
inline void DiagnosticStatus::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& DiagnosticStatus::message() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.message)
  return _internal_message();
}
inline void DiagnosticStatus::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.message)
}
inline std::string* DiagnosticStatus::mutable_message() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.message)
  return _internal_mutable_message();
}
inline const std::string& DiagnosticStatus::_internal_message() const {
  return message_.Get();
}
inline void DiagnosticStatus::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DiagnosticStatus::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.message)
}
inline void DiagnosticStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.message)
}
inline void DiagnosticStatus::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.message)
}
inline std::string* DiagnosticStatus::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DiagnosticStatus::release_message() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DiagnosticStatus::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.message)
}

// string hardware_id = 4;
inline void DiagnosticStatus::clear_hardware_id() {
  hardware_id_.ClearToEmpty();
}
inline const std::string& DiagnosticStatus::hardware_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.hardware_id)
  return _internal_hardware_id();
}
inline void DiagnosticStatus::set_hardware_id(const std::string& value) {
  _internal_set_hardware_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.hardware_id)
}
inline std::string* DiagnosticStatus::mutable_hardware_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.hardware_id)
  return _internal_mutable_hardware_id();
}
inline const std::string& DiagnosticStatus::_internal_hardware_id() const {
  return hardware_id_.Get();
}
inline void DiagnosticStatus::_internal_set_hardware_id(const std::string& value) {
  
  hardware_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DiagnosticStatus::set_hardware_id(std::string&& value) {
  
  hardware_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.hardware_id)
}
inline void DiagnosticStatus::set_hardware_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hardware_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.hardware_id)
}
inline void DiagnosticStatus::set_hardware_id(const char* value,
    size_t size) {
  
  hardware_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.hardware_id)
}
inline std::string* DiagnosticStatus::_internal_mutable_hardware_id() {
  
  return hardware_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DiagnosticStatus::release_hardware_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.hardware_id)
  return hardware_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DiagnosticStatus::set_allocated_hardware_id(std::string* hardware_id) {
  if (hardware_id != nullptr) {
    
  } else {
    
  }
  hardware_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hardware_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.hardware_id)
}

// repeated .openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue values = 5;
inline int DiagnosticStatus::_internal_values_size() const {
  return values_.size();
}
inline int DiagnosticStatus::values_size() const {
  return _internal_values_size();
}
inline void DiagnosticStatus::clear_values() {
  values_.Clear();
}
inline ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue* DiagnosticStatus::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue >*
DiagnosticStatus::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.values)
  return &values_;
}
inline const ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue& DiagnosticStatus::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue& DiagnosticStatus::values(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.values)
  return _internal_values(index);
}
inline ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue* DiagnosticStatus::_internal_add_values() {
  return values_.Add();
}
inline ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue* DiagnosticStatus::add_values() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue >&
DiagnosticStatus::values() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.values)
  return values_;
}

// -------------------------------------------------------------------

// DiagnosticArray

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool DiagnosticArray::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DiagnosticArray::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& DiagnosticArray::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& DiagnosticArray::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray.header)
  return _internal_header();
}
inline void DiagnosticArray::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* DiagnosticArray::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* DiagnosticArray::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* DiagnosticArray::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* DiagnosticArray::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray.header)
  return _internal_mutable_header();
}
inline void DiagnosticArray::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray.header)
}

// repeated .openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus status = 2;
inline int DiagnosticArray::_internal_status_size() const {
  return status_.size();
}
inline int DiagnosticArray::status_size() const {
  return _internal_status_size();
}
inline void DiagnosticArray::clear_status() {
  status_.Clear();
}
inline ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus* DiagnosticArray::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray.status)
  return status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus >*
DiagnosticArray::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray.status)
  return &status_;
}
inline const ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus& DiagnosticArray::_internal_status(int index) const {
  return status_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus& DiagnosticArray::status(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray.status)
  return _internal_status(index);
}
inline ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus* DiagnosticArray::_internal_add_status() {
  return status_.Add();
}
inline ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus* DiagnosticArray::add_status() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray.status)
  return _internal_add_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus >&
DiagnosticArray::status() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray.status)
  return status_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace diagnostic_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto
