// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/ros2_msgs/vision_msgs.proto

#include "openbot_bridge/ros2_msgs/vision_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundingBox2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BoundingBox3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Detection2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Detection3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectHypothesis_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectHypothesisWithPose_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pose2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisionClass_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto;
namespace openbot_bridge {
namespace ros2_msgs {
namespace vision_msgs {
class BoundingBox2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingBox2D> _instance;
} _BoundingBox2D_default_instance_;
class BoundingBox2DArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingBox2DArray> _instance;
} _BoundingBox2DArray_default_instance_;
class BoundingBox3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingBox3D> _instance;
} _BoundingBox3D_default_instance_;
class BoundingBox3DArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingBox3DArray> _instance;
} _BoundingBox3DArray_default_instance_;
class ClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Classification> _instance;
} _Classification_default_instance_;
class Detection2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Detection2D> _instance;
} _Detection2D_default_instance_;
class Detection2DArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Detection2DArray> _instance;
} _Detection2DArray_default_instance_;
class Detection3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Detection3D> _instance;
} _Detection3D_default_instance_;
class Detection3DArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Detection3DArray> _instance;
} _Detection3DArray_default_instance_;
class LabelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelInfo> _instance;
} _LabelInfo_default_instance_;
class ObjectHypothesisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectHypothesis> _instance;
} _ObjectHypothesis_default_instance_;
class ObjectHypothesisWithPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectHypothesisWithPose> _instance;
} _ObjectHypothesisWithPose_default_instance_;
class Point2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point2D> _instance;
} _Point2D_default_instance_;
class Pose2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pose2D> _instance;
} _Pose2D_default_instance_;
class VisionClassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisionClass> _instance;
} _VisionClass_default_instance_;
class VisionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisionInfo> _instance;
} _VisionInfo_default_instance_;
}  // namespace vision_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
static void InitDefaultsscc_info_BoundingBox2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_BoundingBox2D_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundingBox2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BoundingBox2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {
      &scc_info_Pose2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_BoundingBox2DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_BoundingBox2DArray_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2DArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BoundingBox2DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BoundingBox2DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_BoundingBox2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_BoundingBox3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_BoundingBox3D_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BoundingBox3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BoundingBox3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {
      &scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
      &scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_BoundingBox3DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_BoundingBox3DArray_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3DArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BoundingBox3DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BoundingBox3DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_BoundingBox3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Classification_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_Classification_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::Classification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Classification_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Classification_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_ObjectHypothesis_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Detection2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_Detection2D_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Detection2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Detection2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_ObjectHypothesisWithPose_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
      &scc_info_BoundingBox2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Detection2DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_Detection2DArray_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::Detection2DArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Detection2DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Detection2DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Detection2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Detection3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_Detection3D_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Detection3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Detection3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_ObjectHypothesisWithPose_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
      &scc_info_BoundingBox3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Detection3DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_Detection3DArray_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::Detection3DArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Detection3DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Detection3DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Detection3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_LabelInfo_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_LabelInfo_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::LabelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LabelInfo_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LabelInfo_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_VisionClass_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_ObjectHypothesis_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_ObjectHypothesis_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectHypothesis_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectHypothesis_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_ObjectHypothesisWithPose_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_ObjectHypothesisWithPose_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectHypothesisWithPose_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectHypothesisWithPose_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {
      &scc_info_ObjectHypothesis_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
      &scc_info_PoseWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Point2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_Point2D_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::Point2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_Pose2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_Pose2D_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pose2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Pose2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {
      &scc_info_Point2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_VisionClass_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_VisionClass_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisionClass_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VisionClass_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_VisionInfo_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::vision_msgs::_VisionInfo_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::vision_msgs::VisionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VisionInfo_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VisionInfo_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D, center_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D, size_x_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D, size_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2DArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2DArray, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2DArray, boxes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D, center_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3DArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3DArray, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3DArray, boxes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Classification, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Classification, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection2D, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection2D, results_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection2D, bbox_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection2D, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection2DArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection2DArray, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection2DArray, detections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection3D, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection3D, results_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection3D, bbox_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection3D, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection3DArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection3DArray, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Detection3DArray, detections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::LabelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::LabelInfo, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::LabelInfo, class_map_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::LabelInfo, threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis, class_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose, hypothesis_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Point2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Point2D, x_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Point2D, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Pose2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Pose2D, position_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::Pose2D, theta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::VisionClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::VisionClass, class_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::VisionClass, class_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::VisionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::VisionInfo, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::VisionInfo, method_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::VisionInfo, database_location_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::vision_msgs::VisionInfo, database_version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D)},
  { 8, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2DArray)},
  { 15, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D)},
  { 22, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3DArray)},
  { 29, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::Classification)},
  { 36, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::Detection2D)},
  { 45, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::Detection2DArray)},
  { 52, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::Detection3D)},
  { 61, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::Detection3DArray)},
  { 68, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::LabelInfo)},
  { 76, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis)},
  { 83, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose)},
  { 90, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::Point2D)},
  { 97, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::Pose2D)},
  { 104, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::VisionClass)},
  { 111, -1, sizeof(::openbot_bridge::ros2_msgs::vision_msgs::VisionInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_BoundingBox2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_BoundingBox2DArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_BoundingBox3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_BoundingBox3DArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_Detection2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_Detection2DArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_Detection3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_Detection3DArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_LabelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_ObjectHypothesis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_ObjectHypothesisWithPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_Point2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_Pose2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_VisionClass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::vision_msgs::_VisionInfo_default_instance_),
};

const char descriptor_table_protodef_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*openbot_bridge/ros2_msgs/vision_msgs.p"
  "roto\022$openbot_bridge.ros2_msgs.vision_ms"
  "gs\032\'openbot_bridge/ros2_msgs/std_msgs.pr"
  "oto\032,openbot_bridge/ros2_msgs/geometry_m"
  "sgs.proto\"m\n\rBoundingBox2D\022<\n\006center\030\001 \001"
  "(\0132,.openbot_bridge.ros2_msgs.vision_msg"
  "s.Pose2D\022\016\n\006size_x\030\002 \001(\001\022\016\n\006size_y\030\003 \001(\001"
  "\"\223\001\n\022BoundingBox2DArray\0229\n\006header\030\001 \001(\0132"
  ").openbot_bridge.ros2_msgs.std_msgs.Head"
  "er\022B\n\005boxes\030\002 \003(\01323.openbot_bridge.ros2_"
  "msgs.vision_msgs.BoundingBox2D\"\214\001\n\rBound"
  "ingBox3D\022<\n\006center\030\001 \001(\0132,.openbot_bridg"
  "e.ros2_msgs.geometry_msgs.Pose\022=\n\004size\030\002"
  " \001(\0132/.openbot_bridge.ros2_msgs.geometry"
  "_msgs.Vector3\"\223\001\n\022BoundingBox3DArray\0229\n\006"
  "header\030\001 \001(\0132).openbot_bridge.ros2_msgs."
  "std_msgs.Header\022B\n\005boxes\030\002 \003(\01323.openbot"
  "_bridge.ros2_msgs.vision_msgs.BoundingBo"
  "x3D\"\224\001\n\016Classification\0229\n\006header\030\001 \001(\0132)"
  ".openbot_bridge.ros2_msgs.std_msgs.Heade"
  "r\022G\n\007results\030\002 \003(\01326.openbot_bridge.ros2"
  "_msgs.vision_msgs.ObjectHypothesis\"\350\001\n\013D"
  "etection2D\0229\n\006header\030\001 \001(\0132).openbot_bri"
  "dge.ros2_msgs.std_msgs.Header\022O\n\007results"
  "\030\002 \003(\0132>.openbot_bridge.ros2_msgs.vision"
  "_msgs.ObjectHypothesisWithPose\022A\n\004bbox\030\003"
  " \001(\01323.openbot_bridge.ros2_msgs.vision_m"
  "sgs.BoundingBox2D\022\n\n\002id\030\004 \001(\t\"\224\001\n\020Detect"
  "ion2DArray\0229\n\006header\030\001 \001(\0132).openbot_bri"
  "dge.ros2_msgs.std_msgs.Header\022E\n\ndetecti"
  "ons\030\002 \003(\01321.openbot_bridge.ros2_msgs.vis"
  "ion_msgs.Detection2D\"\350\001\n\013Detection3D\0229\n\006"
  "header\030\001 \001(\0132).openbot_bridge.ros2_msgs."
  "std_msgs.Header\022O\n\007results\030\002 \003(\0132>.openb"
  "ot_bridge.ros2_msgs.vision_msgs.ObjectHy"
  "pothesisWithPose\022A\n\004bbox\030\003 \001(\01323.openbot"
  "_bridge.ros2_msgs.vision_msgs.BoundingBo"
  "x3D\022\n\n\002id\030\004 \001(\t\"\224\001\n\020Detection3DArray\0229\n\006"
  "header\030\001 \001(\0132).openbot_bridge.ros2_msgs."
  "std_msgs.Header\022E\n\ndetections\030\002 \003(\01321.op"
  "enbot_bridge.ros2_msgs.vision_msgs.Detec"
  "tion3D\"\237\001\n\tLabelInfo\0229\n\006header\030\001 \001(\0132).o"
  "penbot_bridge.ros2_msgs.std_msgs.Header\022"
  "D\n\tclass_map\030\002 \003(\01321.openbot_bridge.ros2"
  "_msgs.vision_msgs.VisionClass\022\021\n\tthresho"
  "ld\030\003 \001(\002\"3\n\020ObjectHypothesis\022\020\n\010class_id"
  "\030\001 \001(\t\022\r\n\005score\030\002 \001(\001\"\260\001\n\030ObjectHypothes"
  "isWithPose\022J\n\nhypothesis\030\001 \001(\01326.openbot"
  "_bridge.ros2_msgs.vision_msgs.ObjectHypo"
  "thesis\022H\n\004pose\030\002 \001(\0132:.openbot_bridge.ro"
  "s2_msgs.geometry_msgs.PoseWithCovariance"
  "\"\037\n\007Point2D\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"X\n\006Pos"
  "e2D\022\?\n\010position\030\001 \001(\0132-.openbot_bridge.r"
  "os2_msgs.vision_msgs.Point2D\022\r\n\005theta\030\002 "
  "\001(\001\"3\n\013VisionClass\022\020\n\010class_id\030\001 \001(\r\022\022\n\n"
  "class_name\030\002 \001(\t\"\214\001\n\nVisionInfo\0229\n\006heade"
  "r\030\001 \001(\0132).openbot_bridge.ros2_msgs.std_m"
  "sgs.Header\022\016\n\006method\030\002 \001(\t\022\031\n\021database_l"
  "ocation\030\003 \001(\t\022\030\n\020database_version\030\004 \001(\005b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto_deps[2] = {
  &::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto,
  &::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto_sccs[16] = {
  &scc_info_BoundingBox2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_BoundingBox2DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_BoundingBox3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_BoundingBox3DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_Classification_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_Detection2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_Detection2DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_Detection3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_Detection3DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_LabelInfo_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_ObjectHypothesis_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_ObjectHypothesisWithPose_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_Point2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_Pose2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_VisionClass_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
  &scc_info_VisionInfo_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto = {
  false, false, descriptor_table_protodef_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto, "openbot_bridge/ros2_msgs/vision_msgs.proto", 2367,
  &descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto_once, descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto_sccs, descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto_deps, 16, 2,
  schemas, file_default_instances, TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto::offsets,
  file_level_metadata_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto, 16, file_level_enum_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto, file_level_service_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto)), true);
namespace openbot_bridge {
namespace ros2_msgs {
namespace vision_msgs {

// ===================================================================

class BoundingBox2D::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D& center(const BoundingBox2D* msg);
};

const ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D&
BoundingBox2D::_Internal::center(const BoundingBox2D* msg) {
  return *msg->center_;
}
BoundingBox2D::BoundingBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
}
BoundingBox2D::BoundingBox2D(const BoundingBox2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D(*from.center_);
  } else {
    center_ = nullptr;
  }
  ::memcpy(&size_x_, &from.size_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_y_) -
    reinterpret_cast<char*>(&size_x_)) + sizeof(size_y_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
}

void BoundingBox2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundingBox2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&size_y_) -
      reinterpret_cast<char*>(&center_)) + sizeof(size_y_));
}

BoundingBox2D::~BoundingBox2D() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundingBox2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_;
}

void BoundingBox2D::ArenaDtor(void* object) {
  BoundingBox2D* _this = reinterpret_cast< BoundingBox2D* >(object);
  (void)_this;
}
void BoundingBox2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox2D& BoundingBox2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingBox2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox2D::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  ::memset(&size_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_y_) -
      reinterpret_cast<char*>(&size_x_)) + sizeof(size_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingBox2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.vision_msgs.Pose2D center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double size_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          size_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double size_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          size_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.vision_msgs.Pose2D center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // double size_x = 2;
  if (!(this->size_x() <= 0 && this->size_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_size_x(), target);
  }

  // double size_y = 3;
  if (!(this->size_y() <= 0 && this->size_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_size_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
  return target;
}

size_t BoundingBox2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.vision_msgs.Pose2D center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // double size_x = 2;
  if (!(this->size_x() <= 0 && this->size_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double size_y = 3;
  if (!(this->size_y() <= 0 && this->size_y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundingBox2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
    MergeFrom(*source);
  }
}

void BoundingBox2D::MergeFrom(const BoundingBox2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    _internal_mutable_center()->::openbot_bridge::ros2_msgs::vision_msgs::Pose2D::MergeFrom(from._internal_center());
  }
  if (!(from.size_x() <= 0 && from.size_x() >= 0)) {
    _internal_set_size_x(from._internal_size_x());
  }
  if (!(from.size_y() <= 0 && from.size_y() >= 0)) {
    _internal_set_size_y(from._internal_size_y());
  }
}

void BoundingBox2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox2D::CopyFrom(const BoundingBox2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox2D::IsInitialized() const {
  return true;
}

void BoundingBox2D::InternalSwap(BoundingBox2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox2D, size_y_)
      + sizeof(BoundingBox2D::size_y_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox2D, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BoundingBox2DArray::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const BoundingBox2DArray* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
BoundingBox2DArray::_Internal::header(const BoundingBox2DArray* msg) {
  return *msg->header_;
}
void BoundingBox2DArray::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
BoundingBox2DArray::BoundingBox2DArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  boxes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
}
BoundingBox2DArray::BoundingBox2DArray(const BoundingBox2DArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      boxes_(from.boxes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
}

void BoundingBox2DArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundingBox2DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  header_ = nullptr;
}

BoundingBox2DArray::~BoundingBox2DArray() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundingBox2DArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void BoundingBox2DArray::ArenaDtor(void* object) {
  BoundingBox2DArray* _this = reinterpret_cast< BoundingBox2DArray* >(object);
  (void)_this;
}
void BoundingBox2DArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox2DArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox2DArray& BoundingBox2DArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingBox2DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox2DArray::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boxes_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingBox2DArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D boxes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boxes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox2DArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D boxes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boxes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_boxes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
  return target;
}

size_t BoundingBox2DArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D boxes = 2;
  total_size += 1UL * this->_internal_boxes_size();
  for (const auto& msg : this->boxes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox2DArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox2DArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundingBox2DArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
    MergeFrom(*source);
  }
}

void BoundingBox2DArray::MergeFrom(const BoundingBox2DArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boxes_.MergeFrom(from.boxes_);
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
}

void BoundingBox2DArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox2DArray::CopyFrom(const BoundingBox2DArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2DArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox2DArray::IsInitialized() const {
  return true;
}

void BoundingBox2DArray::InternalSwap(BoundingBox2DArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  boxes_.InternalSwap(&other->boxes_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox2DArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BoundingBox3D::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& center(const BoundingBox3D* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& size(const BoundingBox3D* msg);
};

const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&
BoundingBox3D::_Internal::center(const BoundingBox3D* msg) {
  return *msg->center_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&
BoundingBox3D::_Internal::size(const BoundingBox3D* msg) {
  return *msg->size_;
}
void BoundingBox3D::clear_center() {
  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
void BoundingBox3D::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
BoundingBox3D::BoundingBox3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
}
BoundingBox3D::BoundingBox3D(const BoundingBox3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Pose(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
}

void BoundingBox3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundingBox3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&center_)) + sizeof(size_));
}

BoundingBox3D::~BoundingBox3D() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundingBox3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete size_;
}

void BoundingBox3D::ArenaDtor(void* object) {
  BoundingBox3D* _this = reinterpret_cast< BoundingBox3D* >(object);
  (void)_this;
}
void BoundingBox3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox3D& BoundingBox3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingBox3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox3D::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingBox3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.geometry_msgs.Pose center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 size = 2;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
  return target;
}

size_t BoundingBox3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 size = 2;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundingBox3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
    MergeFrom(*source);
  }
}

void BoundingBox3D::MergeFrom(const BoundingBox3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    _internal_mutable_center()->::openbot_bridge::ros2_msgs::geometry_msgs::Pose::MergeFrom(from._internal_center());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::openbot_bridge::ros2_msgs::geometry_msgs::Vector3::MergeFrom(from._internal_size());
  }
}

void BoundingBox3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox3D::CopyFrom(const BoundingBox3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox3D::IsInitialized() const {
  return true;
}

void BoundingBox3D::InternalSwap(BoundingBox3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox3D, size_)
      + sizeof(BoundingBox3D::size_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox3D, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BoundingBox3DArray::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const BoundingBox3DArray* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
BoundingBox3DArray::_Internal::header(const BoundingBox3DArray* msg) {
  return *msg->header_;
}
void BoundingBox3DArray::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
BoundingBox3DArray::BoundingBox3DArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  boxes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
}
BoundingBox3DArray::BoundingBox3DArray(const BoundingBox3DArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      boxes_(from.boxes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
}

void BoundingBox3DArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundingBox3DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  header_ = nullptr;
}

BoundingBox3DArray::~BoundingBox3DArray() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundingBox3DArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void BoundingBox3DArray::ArenaDtor(void* object) {
  BoundingBox3DArray* _this = reinterpret_cast< BoundingBox3DArray* >(object);
  (void)_this;
}
void BoundingBox3DArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox3DArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox3DArray& BoundingBox3DArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingBox3DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox3DArray::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boxes_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingBox3DArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D boxes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boxes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox3DArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D boxes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boxes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_boxes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
  return target;
}

size_t BoundingBox3DArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D boxes = 2;
  total_size += 1UL * this->_internal_boxes_size();
  for (const auto& msg : this->boxes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox3DArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox3DArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundingBox3DArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
    MergeFrom(*source);
  }
}

void BoundingBox3DArray::MergeFrom(const BoundingBox3DArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boxes_.MergeFrom(from.boxes_);
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
}

void BoundingBox3DArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox3DArray::CopyFrom(const BoundingBox3DArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3DArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox3DArray::IsInitialized() const {
  return true;
}

void BoundingBox3DArray::InternalSwap(BoundingBox3DArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  boxes_.InternalSwap(&other->boxes_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox3DArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Classification::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const Classification* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
Classification::_Internal::header(const Classification* msg) {
  return *msg->header_;
}
void Classification::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Classification::Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.Classification)
}
Classification::Classification(const Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.Classification)
}

void Classification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Classification_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  header_ = nullptr;
}

Classification::~Classification() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.Classification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void Classification::ArenaDtor(void* object) {
  Classification* _this = reinterpret_cast< Classification* >(object);
  (void)_this;
}
void Classification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Classification& Classification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Classification_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Classification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.Classification)
  return target;
}

size_t Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.Classification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Classification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const Classification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Classification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.Classification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.Classification)
    MergeFrom(*source);
  }
}

void Classification::MergeFrom(const Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
}

void Classification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Classification::CopyFrom(const Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Classification::IsInitialized() const {
  return true;
}

void Classification::InternalSwap(Classification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Classification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Detection2D::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const Detection2D* msg);
  static const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D& bbox(const Detection2D* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
Detection2D::_Internal::header(const Detection2D* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D&
Detection2D::_Internal::bbox(const Detection2D* msg) {
  return *msg->bbox_;
}
void Detection2D::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Detection2D::Detection2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
}
Detection2D::Detection2D(const Detection2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_bbox()) {
    bbox_ = new ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D(*from.bbox_);
  } else {
    bbox_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
}

void Detection2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Detection2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bbox_) -
      reinterpret_cast<char*>(&header_)) + sizeof(bbox_));
}

Detection2D::~Detection2D() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Detection2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete bbox_;
}

void Detection2D::ArenaDtor(void* object) {
  Detection2D* _this = reinterpret_cast< Detection2D* >(object);
  (void)_this;
}
void Detection2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Detection2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Detection2D& Detection2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Detection2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Detection2D::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  id_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detection2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D bbox = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.vision_msgs.Detection2D.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Detection2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  // .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D bbox = 3;
  if (this->has_bbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bbox(this), target, stream);
  }

  // string id = 4;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.vision_msgs.Detection2D.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
  return target;
}

size_t Detection2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 4;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox2D bbox = 3;
  if (this->has_bbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bbox_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detection2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Detection2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Detection2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
    MergeFrom(*source);
  }
}

void Detection2D::MergeFrom(const Detection2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_bbox()) {
    _internal_mutable_bbox()->::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D::MergeFrom(from._internal_bbox());
  }
}

void Detection2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detection2D::CopyFrom(const Detection2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection2D::IsInitialized() const {
  return true;
}

void Detection2D::InternalSwap(Detection2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detection2D, bbox_)
      + sizeof(Detection2D::bbox_)
      - PROTOBUF_FIELD_OFFSET(Detection2D, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detection2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Detection2DArray::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const Detection2DArray* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
Detection2DArray::_Internal::header(const Detection2DArray* msg) {
  return *msg->header_;
}
void Detection2DArray::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Detection2DArray::Detection2DArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  detections_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
}
Detection2DArray::Detection2DArray(const Detection2DArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detections_(from.detections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
}

void Detection2DArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Detection2DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  header_ = nullptr;
}

Detection2DArray::~Detection2DArray() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Detection2DArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void Detection2DArray::ArenaDtor(void* object) {
  Detection2DArray* _this = reinterpret_cast< Detection2DArray* >(object);
  (void)_this;
}
void Detection2DArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Detection2DArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Detection2DArray& Detection2DArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Detection2DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Detection2DArray::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detections_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detection2DArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.vision_msgs.Detection2D detections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Detection2DArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.Detection2D detections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_detections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
  return target;
}

size_t Detection2DArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.Detection2D detections = 2;
  total_size += 1UL * this->_internal_detections_size();
  for (const auto& msg : this->detections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detection2DArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
  GOOGLE_DCHECK_NE(&from, this);
  const Detection2DArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Detection2DArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
    MergeFrom(*source);
  }
}

void Detection2DArray::MergeFrom(const Detection2DArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detections_.MergeFrom(from.detections_);
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
}

void Detection2DArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detection2DArray::CopyFrom(const Detection2DArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection2DArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection2DArray::IsInitialized() const {
  return true;
}

void Detection2DArray::InternalSwap(Detection2DArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  detections_.InternalSwap(&other->detections_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Detection2DArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Detection3D::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const Detection3D* msg);
  static const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D& bbox(const Detection3D* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
Detection3D::_Internal::header(const Detection3D* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D&
Detection3D::_Internal::bbox(const Detection3D* msg) {
  return *msg->bbox_;
}
void Detection3D::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Detection3D::Detection3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
}
Detection3D::Detection3D(const Detection3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_bbox()) {
    bbox_ = new ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D(*from.bbox_);
  } else {
    bbox_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
}

void Detection3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Detection3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bbox_) -
      reinterpret_cast<char*>(&header_)) + sizeof(bbox_));
}

Detection3D::~Detection3D() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Detection3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete bbox_;
}

void Detection3D::ArenaDtor(void* object) {
  Detection3D* _this = reinterpret_cast< Detection3D* >(object);
  (void)_this;
}
void Detection3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Detection3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Detection3D& Detection3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Detection3D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Detection3D::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  id_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detection3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D bbox = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.vision_msgs.Detection3D.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Detection3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  // .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D bbox = 3;
  if (this->has_bbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bbox(this), target, stream);
  }

  // string id = 4;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.vision_msgs.Detection3D.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
  return target;
}

size_t Detection3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 4;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.vision_msgs.BoundingBox3D bbox = 3;
  if (this->has_bbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bbox_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detection3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Detection3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Detection3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
    MergeFrom(*source);
  }
}

void Detection3D::MergeFrom(const Detection3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_bbox()) {
    _internal_mutable_bbox()->::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D::MergeFrom(from._internal_bbox());
  }
}

void Detection3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detection3D::CopyFrom(const Detection3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection3D::IsInitialized() const {
  return true;
}

void Detection3D::InternalSwap(Detection3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detection3D, bbox_)
      + sizeof(Detection3D::bbox_)
      - PROTOBUF_FIELD_OFFSET(Detection3D, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detection3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Detection3DArray::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const Detection3DArray* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
Detection3DArray::_Internal::header(const Detection3DArray* msg) {
  return *msg->header_;
}
void Detection3DArray::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Detection3DArray::Detection3DArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  detections_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
}
Detection3DArray::Detection3DArray(const Detection3DArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detections_(from.detections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
}

void Detection3DArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Detection3DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  header_ = nullptr;
}

Detection3DArray::~Detection3DArray() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Detection3DArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void Detection3DArray::ArenaDtor(void* object) {
  Detection3DArray* _this = reinterpret_cast< Detection3DArray* >(object);
  (void)_this;
}
void Detection3DArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Detection3DArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Detection3DArray& Detection3DArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Detection3DArray_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Detection3DArray::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detections_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detection3DArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.vision_msgs.Detection3D detections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Detection3DArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.Detection3D detections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_detections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
  return target;
}

size_t Detection3DArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.Detection3D detections = 2;
  total_size += 1UL * this->_internal_detections_size();
  for (const auto& msg : this->detections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detection3DArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
  GOOGLE_DCHECK_NE(&from, this);
  const Detection3DArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Detection3DArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
    MergeFrom(*source);
  }
}

void Detection3DArray::MergeFrom(const Detection3DArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detections_.MergeFrom(from.detections_);
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
}

void Detection3DArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detection3DArray::CopyFrom(const Detection3DArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Detection3DArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection3DArray::IsInitialized() const {
  return true;
}

void Detection3DArray::InternalSwap(Detection3DArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  detections_.InternalSwap(&other->detections_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Detection3DArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LabelInfo::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const LabelInfo* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
LabelInfo::_Internal::header(const LabelInfo* msg) {
  return *msg->header_;
}
void LabelInfo::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
LabelInfo::LabelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  class_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
}
LabelInfo::LabelInfo(const LabelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      class_map_(from.class_map_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
}

void LabelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelInfo_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&header_)) + sizeof(threshold_));
}

LabelInfo::~LabelInfo() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void LabelInfo::ArenaDtor(void* object) {
  LabelInfo* _this = reinterpret_cast< LabelInfo* >(object);
  (void)_this;
}
void LabelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelInfo& LabelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelInfo_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void LabelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_map_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  threshold_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.vision_msgs.VisionClass class_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_class_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // float threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.VisionClass class_map = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_class_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_class_map(i), target, stream);
  }

  // float threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
  return target;
}

size_t LabelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.vision_msgs.VisionClass class_map = 2;
  total_size += 1UL * this->_internal_class_map_size();
  for (const auto& msg : this->class_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // float threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
    MergeFrom(*source);
  }
}

void LabelInfo::MergeFrom(const LabelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  class_map_.MergeFrom(from.class_map_);
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (!(from.threshold() <= 0 && from.threshold() >= 0)) {
    _internal_set_threshold(from._internal_threshold());
  }
}

void LabelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelInfo::CopyFrom(const LabelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.LabelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelInfo::IsInitialized() const {
  return true;
}

void LabelInfo::InternalSwap(LabelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  class_map_.InternalSwap(&other->class_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LabelInfo, threshold_)
      + sizeof(LabelInfo::threshold_)
      - PROTOBUF_FIELD_OFFSET(LabelInfo, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObjectHypothesis::_Internal {
 public:
};

ObjectHypothesis::ObjectHypothesis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
}
ObjectHypothesis::ObjectHypothesis(const ObjectHypothesis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_class_id().empty()) {
    class_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_class_id(), 
      GetArena());
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
}

void ObjectHypothesis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectHypothesis_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  class_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
}

ObjectHypothesis::~ObjectHypothesis() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectHypothesis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  class_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObjectHypothesis::ArenaDtor(void* object) {
  ObjectHypothesis* _this = reinterpret_cast< ObjectHypothesis* >(object);
  (void)_this;
}
void ObjectHypothesis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectHypothesis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectHypothesis& ObjectHypothesis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectHypothesis_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ObjectHypothesis::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_id_.ClearToEmpty();
  score_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectHypothesis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string class_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_class_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis.class_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectHypothesis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_id = 1;
  if (this->class_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_id().data(), static_cast<int>(this->_internal_class_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis.class_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_class_id(), target);
  }

  // double score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
  return target;
}

size_t ObjectHypothesis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_id = 1;
  if (this->class_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_id());
  }

  // double score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectHypothesis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectHypothesis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectHypothesis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
    MergeFrom(*source);
  }
}

void ObjectHypothesis::MergeFrom(const ObjectHypothesis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.class_id().size() > 0) {
    _internal_set_class_id(from._internal_class_id());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
}

void ObjectHypothesis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectHypothesis::CopyFrom(const ObjectHypothesis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectHypothesis::IsInitialized() const {
  return true;
}

void ObjectHypothesis::InternalSwap(ObjectHypothesis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  class_id_.Swap(&other->class_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectHypothesis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObjectHypothesisWithPose::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis& hypothesis(const ObjectHypothesisWithPose* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& pose(const ObjectHypothesisWithPose* msg);
};

const ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis&
ObjectHypothesisWithPose::_Internal::hypothesis(const ObjectHypothesisWithPose* msg) {
  return *msg->hypothesis_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance&
ObjectHypothesisWithPose::_Internal::pose(const ObjectHypothesisWithPose* msg) {
  return *msg->pose_;
}
void ObjectHypothesisWithPose::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
ObjectHypothesisWithPose::ObjectHypothesisWithPose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
}
ObjectHypothesisWithPose::ObjectHypothesisWithPose(const ObjectHypothesisWithPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hypothesis()) {
    hypothesis_ = new ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis(*from.hypothesis_);
  } else {
    hypothesis_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
}

void ObjectHypothesisWithPose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectHypothesisWithPose_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hypothesis_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pose_) -
      reinterpret_cast<char*>(&hypothesis_)) + sizeof(pose_));
}

ObjectHypothesisWithPose::~ObjectHypothesisWithPose() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectHypothesisWithPose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hypothesis_;
  if (this != internal_default_instance()) delete pose_;
}

void ObjectHypothesisWithPose::ArenaDtor(void* object) {
  ObjectHypothesisWithPose* _this = reinterpret_cast< ObjectHypothesisWithPose* >(object);
  (void)_this;
}
void ObjectHypothesisWithPose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectHypothesisWithPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectHypothesisWithPose& ObjectHypothesisWithPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectHypothesisWithPose_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ObjectHypothesisWithPose::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hypothesis_ != nullptr) {
    delete hypothesis_;
  }
  hypothesis_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectHypothesisWithPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis hypothesis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hypothesis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectHypothesisWithPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis hypothesis = 1;
  if (this->has_hypothesis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hypothesis(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
  return target;
}

size_t ObjectHypothesisWithPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesis hypothesis = 1;
  if (this->has_hypothesis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hypothesis_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectHypothesisWithPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectHypothesisWithPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectHypothesisWithPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
    MergeFrom(*source);
  }
}

void ObjectHypothesisWithPose::MergeFrom(const ObjectHypothesisWithPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hypothesis()) {
    _internal_mutable_hypothesis()->::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis::MergeFrom(from._internal_hypothesis());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance::MergeFrom(from._internal_pose());
  }
}

void ObjectHypothesisWithPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectHypothesisWithPose::CopyFrom(const ObjectHypothesisWithPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.ObjectHypothesisWithPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectHypothesisWithPose::IsInitialized() const {
  return true;
}

void ObjectHypothesisWithPose::InternalSwap(ObjectHypothesisWithPose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectHypothesisWithPose, pose_)
      + sizeof(ObjectHypothesisWithPose::pose_)
      - PROTOBUF_FIELD_OFFSET(ObjectHypothesisWithPose, hypothesis_)>(
          reinterpret_cast<char*>(&hypothesis_),
          reinterpret_cast<char*>(&other->hypothesis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectHypothesisWithPose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Point2D::_Internal {
 public:
};

Point2D::Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
}
Point2D::Point2D(const Point2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
}

void Point2D::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point2D::ArenaDtor(void* object) {
  Point2D* _this = reinterpret_cast< Point2D* >(object);
  (void)_this;
}
void Point2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point2D& Point2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
  return target;
}

size_t Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
    MergeFrom(*source);
  }
}

void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {
  return true;
}

void Point2D::InternalSwap(Point2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2D, y_)
      + sizeof(Point2D::y_)
      - PROTOBUF_FIELD_OFFSET(Point2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Pose2D::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::vision_msgs::Point2D& position(const Pose2D* msg);
};

const ::openbot_bridge::ros2_msgs::vision_msgs::Point2D&
Pose2D::_Internal::position(const Pose2D* msg) {
  return *msg->position_;
}
Pose2D::Pose2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
}
Pose2D::Pose2D(const Pose2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::openbot_bridge::ros2_msgs::vision_msgs::Point2D(*from.position_);
  } else {
    position_ = nullptr;
  }
  theta_ = from.theta_;
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
}

void Pose2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pose2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&position_)) + sizeof(theta_));
}

Pose2D::~Pose2D() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pose2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void Pose2D::ArenaDtor(void* object) {
  Pose2D* _this = reinterpret_cast< Pose2D* >(object);
  (void)_this;
}
void Pose2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pose2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pose2D& Pose2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pose2D_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Pose2D::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  theta_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.vision_msgs.Point2D position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double theta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pose2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.vision_msgs.Point2D position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // double theta = 2;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_theta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
  return target;
}

size_t Pose2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.vision_msgs.Point2D position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // double theta = 2;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pose2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
    MergeFrom(*source);
  }
}

void Pose2D::MergeFrom(const Pose2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::openbot_bridge::ros2_msgs::vision_msgs::Point2D::MergeFrom(from._internal_position());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
}

void Pose2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose2D::CopyFrom(const Pose2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.Pose2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose2D::IsInitialized() const {
  return true;
}

void Pose2D::InternalSwap(Pose2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose2D, theta_)
      + sizeof(Pose2D::theta_)
      - PROTOBUF_FIELD_OFFSET(Pose2D, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VisionClass::_Internal {
 public:
};

VisionClass::VisionClass(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
}
VisionClass::VisionClass(const VisionClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_class_name().empty()) {
    class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_class_name(), 
      GetArena());
  }
  class_id_ = from.class_id_;
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
}

void VisionClass::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisionClass_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_id_ = 0u;
}

VisionClass::~VisionClass() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VisionClass::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VisionClass::ArenaDtor(void* object) {
  VisionClass* _this = reinterpret_cast< VisionClass* >(object);
  (void)_this;
}
void VisionClass::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisionClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisionClass& VisionClass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisionClass_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void VisionClass::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmpty();
  class_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisionClass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 class_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          class_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string class_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_class_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.vision_msgs.VisionClass.class_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisionClass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 class_id = 1;
  if (this->class_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_class_id(), target);
  }

  // string class_name = 2;
  if (this->class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.vision_msgs.VisionClass.class_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_class_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
  return target;
}

size_t VisionClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_name = 2;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // uint32 class_id = 1;
  if (this->class_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_class_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisionClass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionClass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisionClass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
    MergeFrom(*source);
  }
}

void VisionClass::MergeFrom(const VisionClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.class_name().size() > 0) {
    _internal_set_class_name(from._internal_class_name());
  }
  if (from.class_id() != 0) {
    _internal_set_class_id(from._internal_class_id());
  }
}

void VisionClass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionClass::CopyFrom(const VisionClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.VisionClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionClass::IsInitialized() const {
  return true;
}

void VisionClass::InternalSwap(VisionClass* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  class_name_.Swap(&other->class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(class_id_, other->class_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionClass::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VisionInfo::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const VisionInfo* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
VisionInfo::_Internal::header(const VisionInfo* msg) {
  return *msg->header_;
}
void VisionInfo::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
VisionInfo::VisionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
}
VisionInfo::VisionInfo(const VisionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_method(), 
      GetArena());
  }
  database_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_database_location().empty()) {
    database_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_database_location(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  database_version_ = from.database_version_;
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
}

void VisionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisionInfo_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  database_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&database_version_) -
      reinterpret_cast<char*>(&header_)) + sizeof(database_version_));
}

VisionInfo::~VisionInfo() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VisionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  database_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void VisionInfo::ArenaDtor(void* object) {
  VisionInfo* _this = reinterpret_cast< VisionInfo* >(object);
  (void)_this;
}
void VisionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisionInfo& VisionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisionInfo_openbot_5fbridge_2fros2_5fmsgs_2fvision_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void VisionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  method_.ClearToEmpty();
  database_location_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  database_version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string database_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_database_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.database_location"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 database_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          database_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string method = 2;
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method(), target);
  }

  // string database_location = 3;
  if (this->database_location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database_location().data(), static_cast<int>(this->_internal_database_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.vision_msgs.VisionInfo.database_location");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_database_location(), target);
  }

  // int32 database_version = 4;
  if (this->database_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_database_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
  return target;
}

size_t VisionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string method = 2;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string database_location = 3;
  if (this->database_location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database_location());
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int32 database_version = 4;
  if (this->database_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_database_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
    MergeFrom(*source);
  }
}

void VisionInfo::MergeFrom(const VisionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.method().size() > 0) {
    _internal_set_method(from._internal_method());
  }
  if (from.database_location().size() > 0) {
    _internal_set_database_location(from._internal_database_location());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.database_version() != 0) {
    _internal_set_database_version(from._internal_database_version());
  }
}

void VisionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionInfo::CopyFrom(const VisionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.vision_msgs.VisionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionInfo::IsInitialized() const {
  return true;
}

void VisionInfo::InternalSwap(VisionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  database_location_.Swap(&other->database_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionInfo, database_version_)
      + sizeof(VisionInfo::database_version_)
      - PROTOBUF_FIELD_OFFSET(VisionInfo, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vision_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2D >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2DArray* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2DArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox2DArray >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3D >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3DArray* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3DArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::BoundingBox3DArray >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::Classification* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::Detection2D >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::Detection2DArray* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::Detection2DArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::Detection2DArray >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::Detection3D >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::Detection3DArray* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::Detection3DArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::Detection3DArray >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::LabelInfo* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::LabelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::LabelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesis >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::ObjectHypothesisWithPose >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::Point2D* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::Point2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::Point2D >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::Pose2D >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::VisionClass >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::vision_msgs::VisionInfo* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::vision_msgs::VisionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::vision_msgs::VisionInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
