// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/ros2_msgs/pcl_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "openbot_bridge/ros2_msgs/std_msgs.pb.h"
#include "openbot_bridge/ros2_msgs/sensor_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto;
namespace openbot_bridge {
namespace ros2_msgs {
namespace pcl_msgs {
class ModelCoefficients;
class ModelCoefficientsDefaultTypeInternal;
extern ModelCoefficientsDefaultTypeInternal _ModelCoefficients_default_instance_;
class PointIndices;
class PointIndicesDefaultTypeInternal;
extern PointIndicesDefaultTypeInternal _PointIndices_default_instance_;
class PolygonMesh;
class PolygonMeshDefaultTypeInternal;
extern PolygonMeshDefaultTypeInternal _PolygonMesh_default_instance_;
class Vertices;
class VerticesDefaultTypeInternal;
extern VerticesDefaultTypeInternal _Vertices_default_instance_;
}  // namespace pcl_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::openbot_bridge::ros2_msgs::pcl_msgs::ModelCoefficients* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::pcl_msgs::ModelCoefficients>(Arena*);
template<> ::openbot_bridge::ros2_msgs::pcl_msgs::PointIndices* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::pcl_msgs::PointIndices>(Arena*);
template<> ::openbot_bridge::ros2_msgs::pcl_msgs::PolygonMesh* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::pcl_msgs::PolygonMesh>(Arena*);
template<> ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::pcl_msgs::Vertices>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openbot_bridge {
namespace ros2_msgs {
namespace pcl_msgs {

// ===================================================================

class Vertices PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.pcl_msgs.Vertices) */ {
 public:
  inline Vertices() : Vertices(nullptr) {}
  virtual ~Vertices();

  Vertices(const Vertices& from);
  Vertices(Vertices&& from) noexcept
    : Vertices() {
    *this = ::std::move(from);
  }

  inline Vertices& operator=(const Vertices& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vertices& operator=(Vertices&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vertices& default_instance();

  static inline const Vertices* internal_default_instance() {
    return reinterpret_cast<const Vertices*>(
               &_Vertices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vertices& a, Vertices& b) {
    a.Swap(&b);
  }
  inline void Swap(Vertices* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vertices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vertices* New() const final {
    return CreateMaybeMessage<Vertices>(nullptr);
  }

  Vertices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vertices>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vertices& from);
  void MergeFrom(const Vertices& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vertices* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.pcl_msgs.Vertices";
  }
  protected:
  explicit Vertices(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
  };
  // repeated uint32 vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vertices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_vertices() const;
  void _internal_add_vertices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_vertices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 vertices(int index) const;
  void set_vertices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_vertices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      vertices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_vertices();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > vertices_;
  mutable std::atomic<int> _vertices_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ModelCoefficients PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients) */ {
 public:
  inline ModelCoefficients() : ModelCoefficients(nullptr) {}
  virtual ~ModelCoefficients();

  ModelCoefficients(const ModelCoefficients& from);
  ModelCoefficients(ModelCoefficients&& from) noexcept
    : ModelCoefficients() {
    *this = ::std::move(from);
  }

  inline ModelCoefficients& operator=(const ModelCoefficients& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelCoefficients& operator=(ModelCoefficients&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelCoefficients& default_instance();

  static inline const ModelCoefficients* internal_default_instance() {
    return reinterpret_cast<const ModelCoefficients*>(
               &_ModelCoefficients_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelCoefficients& a, ModelCoefficients& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelCoefficients* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelCoefficients* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelCoefficients* New() const final {
    return CreateMaybeMessage<ModelCoefficients>(nullptr);
  }

  ModelCoefficients* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelCoefficients>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelCoefficients& from);
  void MergeFrom(const ModelCoefficients& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelCoefficients* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients";
  }
  protected:
  explicit ModelCoefficients(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PointIndices PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices) */ {
 public:
  inline PointIndices() : PointIndices(nullptr) {}
  virtual ~PointIndices();

  PointIndices(const PointIndices& from);
  PointIndices(PointIndices&& from) noexcept
    : PointIndices() {
    *this = ::std::move(from);
  }

  inline PointIndices& operator=(const PointIndices& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointIndices& operator=(PointIndices&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointIndices& default_instance();

  static inline const PointIndices* internal_default_instance() {
    return reinterpret_cast<const PointIndices*>(
               &_PointIndices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PointIndices& a, PointIndices& b) {
    a.Swap(&b);
  }
  inline void Swap(PointIndices* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointIndices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointIndices* New() const final {
    return CreateMaybeMessage<PointIndices>(nullptr);
  }

  PointIndices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointIndices>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointIndices& from);
  void MergeFrom(const PointIndices& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointIndices* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.pcl_msgs.PointIndices";
  }
  protected:
  explicit PointIndices(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndicesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated int32 indices = 2;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_indices() const;
  void _internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices();

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_;
  mutable std::atomic<int> _indices_cached_byte_size_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PolygonMesh PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh) */ {
 public:
  inline PolygonMesh() : PolygonMesh(nullptr) {}
  virtual ~PolygonMesh();

  PolygonMesh(const PolygonMesh& from);
  PolygonMesh(PolygonMesh&& from) noexcept
    : PolygonMesh() {
    *this = ::std::move(from);
  }

  inline PolygonMesh& operator=(const PolygonMesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolygonMesh& operator=(PolygonMesh&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolygonMesh& default_instance();

  static inline const PolygonMesh* internal_default_instance() {
    return reinterpret_cast<const PolygonMesh*>(
               &_PolygonMesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PolygonMesh& a, PolygonMesh& b) {
    a.Swap(&b);
  }
  inline void Swap(PolygonMesh* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolygonMesh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolygonMesh* New() const final {
    return CreateMaybeMessage<PolygonMesh>(nullptr);
  }

  PolygonMesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolygonMesh>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolygonMesh& from);
  void MergeFrom(const PolygonMesh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolygonMesh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh";
  }
  protected:
  explicit PolygonMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonsFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kCloudFieldNumber = 2,
  };
  // repeated .openbot_bridge.ros2_msgs.pcl_msgs.Vertices polygons = 3;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;
  public:
  void clear_polygons();
  ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices >*
      mutable_polygons();
  private:
  const ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices& _internal_polygons(int index) const;
  ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices* _internal_add_polygons();
  public:
  const ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices& polygons(int index) const;
  ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices >&
      polygons() const;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2 cloud = 2;
  bool has_cloud() const;
  private:
  bool _internal_has_cloud() const;
  public:
  void clear_cloud();
  const ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2& cloud() const;
  ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* release_cloud();
  ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* mutable_cloud();
  void set_allocated_cloud(::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* cloud);
  private:
  const ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2& _internal_cloud() const;
  ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* _internal_mutable_cloud();
  public:
  void unsafe_arena_set_allocated_cloud(
      ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* cloud);
  ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* unsafe_arena_release_cloud();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices > polygons_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* cloud_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vertices

// repeated uint32 vertices = 1;
inline int Vertices::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Vertices::vertices_size() const {
  return _internal_vertices_size();
}
inline void Vertices::clear_vertices() {
  vertices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vertices::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vertices::vertices(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.pcl_msgs.Vertices.vertices)
  return _internal_vertices(index);
}
inline void Vertices::set_vertices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vertices_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.pcl_msgs.Vertices.vertices)
}
inline void Vertices::_internal_add_vertices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vertices_.Add(value);
}
inline void Vertices::add_vertices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_vertices(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.pcl_msgs.Vertices.vertices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Vertices::_internal_vertices() const {
  return vertices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Vertices::vertices() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.pcl_msgs.Vertices.vertices)
  return _internal_vertices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Vertices::_internal_mutable_vertices() {
  return &vertices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Vertices::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.pcl_msgs.Vertices.vertices)
  return _internal_mutable_vertices();
}

// -------------------------------------------------------------------

// ModelCoefficients

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool ModelCoefficients::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ModelCoefficients::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& ModelCoefficients::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& ModelCoefficients::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients.header)
  return _internal_header();
}
inline void ModelCoefficients::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* ModelCoefficients::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* ModelCoefficients::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* ModelCoefficients::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* ModelCoefficients::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients.header)
  return _internal_mutable_header();
}
inline void ModelCoefficients::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients.header)
}

// repeated float values = 2;
inline int ModelCoefficients::_internal_values_size() const {
  return values_.size();
}
inline int ModelCoefficients::values_size() const {
  return _internal_values_size();
}
inline void ModelCoefficients::clear_values() {
  values_.Clear();
}
inline float ModelCoefficients::_internal_values(int index) const {
  return values_.Get(index);
}
inline float ModelCoefficients::values(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients.values)
  return _internal_values(index);
}
inline void ModelCoefficients::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients.values)
}
inline void ModelCoefficients::_internal_add_values(float value) {
  values_.Add(value);
}
inline void ModelCoefficients::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ModelCoefficients::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ModelCoefficients::values() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ModelCoefficients::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ModelCoefficients::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// PointIndices

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool PointIndices::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PointIndices::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PointIndices::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PointIndices::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices.header)
  return _internal_header();
}
inline void PointIndices::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointIndices::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointIndices::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointIndices::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointIndices::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices.header)
  return _internal_mutable_header();
}
inline void PointIndices::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices.header)
}

// repeated int32 indices = 2;
inline int PointIndices::_internal_indices_size() const {
  return indices_.size();
}
inline int PointIndices::indices_size() const {
  return _internal_indices_size();
}
inline void PointIndices::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointIndices::_internal_indices(int index) const {
  return indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointIndices::indices(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices.indices)
  return _internal_indices(index);
}
inline void PointIndices::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices.indices)
}
inline void PointIndices::_internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Add(value);
}
inline void PointIndices::add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PointIndices::_internal_indices() const {
  return indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PointIndices::indices() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PointIndices::_internal_mutable_indices() {
  return &indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PointIndices::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices.indices)
  return _internal_mutable_indices();
}

// -------------------------------------------------------------------

// PolygonMesh

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool PolygonMesh::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PolygonMesh::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PolygonMesh::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PolygonMesh::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.header)
  return _internal_header();
}
inline void PolygonMesh::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PolygonMesh::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PolygonMesh::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PolygonMesh::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PolygonMesh::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.header)
  return _internal_mutable_header();
}
inline void PolygonMesh::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.header)
}

// .openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2 cloud = 2;
inline bool PolygonMesh::_internal_has_cloud() const {
  return this != internal_default_instance() && cloud_ != nullptr;
}
inline bool PolygonMesh::has_cloud() const {
  return _internal_has_cloud();
}
inline const ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2& PolygonMesh::_internal_cloud() const {
  const ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* p = cloud_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2&>(
      ::openbot_bridge::ros2_msgs::sensor_msgs::_PointCloud2_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2& PolygonMesh::cloud() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.cloud)
  return _internal_cloud();
}
inline void PolygonMesh::unsafe_arena_set_allocated_cloud(
    ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* cloud) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_);
  }
  cloud_ = cloud;
  if (cloud) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.cloud)
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* PolygonMesh::release_cloud() {
  
  ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* temp = cloud_;
  cloud_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* PolygonMesh::unsafe_arena_release_cloud() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.cloud)
  
  ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* temp = cloud_;
  cloud_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* PolygonMesh::_internal_mutable_cloud() {
  
  if (cloud_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2>(GetArena());
    cloud_ = p;
  }
  return cloud_;
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* PolygonMesh::mutable_cloud() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.cloud)
  return _internal_mutable_cloud();
}
inline void PolygonMesh::set_allocated_cloud(::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* cloud) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_);
  }
  if (cloud) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud)->GetArena();
    if (message_arena != submessage_arena) {
      cloud = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cloud, submessage_arena);
    }
    
  } else {
    
  }
  cloud_ = cloud;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.cloud)
}

// repeated .openbot_bridge.ros2_msgs.pcl_msgs.Vertices polygons = 3;
inline int PolygonMesh::_internal_polygons_size() const {
  return polygons_.size();
}
inline int PolygonMesh::polygons_size() const {
  return _internal_polygons_size();
}
inline void PolygonMesh::clear_polygons() {
  polygons_.Clear();
}
inline ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices* PolygonMesh::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.polygons)
  return polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices >*
PolygonMesh::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.polygons)
  return &polygons_;
}
inline const ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices& PolygonMesh::_internal_polygons(int index) const {
  return polygons_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices& PolygonMesh::polygons(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.polygons)
  return _internal_polygons(index);
}
inline ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices* PolygonMesh::_internal_add_polygons() {
  return polygons_.Add();
}
inline ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices* PolygonMesh::add_polygons() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.polygons)
  return _internal_add_polygons();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices >&
PolygonMesh::polygons() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh.polygons)
  return polygons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pcl_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto
