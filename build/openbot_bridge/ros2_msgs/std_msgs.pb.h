// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/ros2_msgs/std_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "openbot_bridge/ros2_msgs/builtin_interfaces.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto;
namespace openbot_bridge {
namespace ros2_msgs {
namespace std_msgs {
class ColorRGBA;
class ColorRGBADefaultTypeInternal;
extern ColorRGBADefaultTypeInternal _ColorRGBA_default_instance_;
class Float32MultiArray;
class Float32MultiArrayDefaultTypeInternal;
extern Float32MultiArrayDefaultTypeInternal _Float32MultiArray_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class MultiArrayDimension;
class MultiArrayDimensionDefaultTypeInternal;
extern MultiArrayDimensionDefaultTypeInternal _MultiArrayDimension_default_instance_;
class MultiArrayLayout;
class MultiArrayLayoutDefaultTypeInternal;
extern MultiArrayLayoutDefaultTypeInternal _MultiArrayLayout_default_instance_;
}  // namespace std_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA>(Arena*);
template<> ::openbot_bridge::ros2_msgs::std_msgs::Float32MultiArray* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Float32MultiArray>(Arena*);
template<> ::openbot_bridge::ros2_msgs::std_msgs::Header* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(Arena*);
template<> ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension>(Arena*);
template<> ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openbot_bridge {
namespace ros2_msgs {
namespace std_msgs {

// ===================================================================

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.std_msgs.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.std_msgs.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 2,
    kStampFieldNumber = 1,
  };
  // string frame_id = 2;
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .openbot_bridge.ros2_msgs.builtin_interfaces.Time stamp = 1;
  bool has_stamp() const;
  private:
  bool _internal_has_stamp() const;
  public:
  void clear_stamp();
  const ::openbot_bridge::ros2_msgs::builtin_interfaces::Time& stamp() const;
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* release_stamp();
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* mutable_stamp();
  void set_allocated_stamp(::openbot_bridge::ros2_msgs::builtin_interfaces::Time* stamp);
  private:
  const ::openbot_bridge::ros2_msgs::builtin_interfaces::Time& _internal_stamp() const;
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* _internal_mutable_stamp();
  public:
  void unsafe_arena_set_allocated_stamp(
      ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* stamp);
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* unsafe_arena_release_stamp();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.std_msgs.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ColorRGBA PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.std_msgs.ColorRGBA) */ {
 public:
  inline ColorRGBA() : ColorRGBA(nullptr) {}
  virtual ~ColorRGBA();

  ColorRGBA(const ColorRGBA& from);
  ColorRGBA(ColorRGBA&& from) noexcept
    : ColorRGBA() {
    *this = ::std::move(from);
  }

  inline ColorRGBA& operator=(const ColorRGBA& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorRGBA& operator=(ColorRGBA&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorRGBA& default_instance();

  static inline const ColorRGBA* internal_default_instance() {
    return reinterpret_cast<const ColorRGBA*>(
               &_ColorRGBA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ColorRGBA& a, ColorRGBA& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorRGBA* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorRGBA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorRGBA* New() const final {
    return CreateMaybeMessage<ColorRGBA>(nullptr);
  }

  ColorRGBA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorRGBA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorRGBA& from);
  void MergeFrom(const ColorRGBA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorRGBA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.std_msgs.ColorRGBA";
  }
  protected:
  explicit ColorRGBA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // float r = 1;
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // float g = 2;
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // float b = 3;
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // float a = 4;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.std_msgs.ColorRGBA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float r_;
  float g_;
  float b_;
  float a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MultiArrayDimension PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension) */ {
 public:
  inline MultiArrayDimension() : MultiArrayDimension(nullptr) {}
  virtual ~MultiArrayDimension();

  MultiArrayDimension(const MultiArrayDimension& from);
  MultiArrayDimension(MultiArrayDimension&& from) noexcept
    : MultiArrayDimension() {
    *this = ::std::move(from);
  }

  inline MultiArrayDimension& operator=(const MultiArrayDimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiArrayDimension& operator=(MultiArrayDimension&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiArrayDimension& default_instance();

  static inline const MultiArrayDimension* internal_default_instance() {
    return reinterpret_cast<const MultiArrayDimension*>(
               &_MultiArrayDimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MultiArrayDimension& a, MultiArrayDimension& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiArrayDimension* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiArrayDimension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiArrayDimension* New() const final {
    return CreateMaybeMessage<MultiArrayDimension>(nullptr);
  }

  MultiArrayDimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiArrayDimension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiArrayDimension& from);
  void MergeFrom(const MultiArrayDimension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiArrayDimension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension";
  }
  protected:
  explicit MultiArrayDimension(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kSizeFieldNumber = 2,
    kStrideFieldNumber = 3,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // uint32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stride = 3;
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::uint32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MultiArrayLayout PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.std_msgs.MultiArrayLayout) */ {
 public:
  inline MultiArrayLayout() : MultiArrayLayout(nullptr) {}
  virtual ~MultiArrayLayout();

  MultiArrayLayout(const MultiArrayLayout& from);
  MultiArrayLayout(MultiArrayLayout&& from) noexcept
    : MultiArrayLayout() {
    *this = ::std::move(from);
  }

  inline MultiArrayLayout& operator=(const MultiArrayLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiArrayLayout& operator=(MultiArrayLayout&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiArrayLayout& default_instance();

  static inline const MultiArrayLayout* internal_default_instance() {
    return reinterpret_cast<const MultiArrayLayout*>(
               &_MultiArrayLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MultiArrayLayout& a, MultiArrayLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiArrayLayout* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiArrayLayout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiArrayLayout* New() const final {
    return CreateMaybeMessage<MultiArrayLayout>(nullptr);
  }

  MultiArrayLayout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiArrayLayout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiArrayLayout& from);
  void MergeFrom(const MultiArrayLayout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiArrayLayout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.std_msgs.MultiArrayLayout";
  }
  protected:
  explicit MultiArrayLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
    kDataOffsetFieldNumber = 2,
  };
  // repeated .openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension dim = 1;
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension* mutable_dim(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension >*
      mutable_dim();
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension& _internal_dim(int index) const;
  ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension* _internal_add_dim();
  public:
  const ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension& dim(int index) const;
  ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension* add_dim();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension >&
      dim() const;

  // uint32 data_offset = 2;
  void clear_data_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_offset() const;
  void set_data_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_offset() const;
  void _internal_set_data_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.std_msgs.MultiArrayLayout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension > dim_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Float32MultiArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.std_msgs.Float32MultiArray) */ {
 public:
  inline Float32MultiArray() : Float32MultiArray(nullptr) {}
  virtual ~Float32MultiArray();

  Float32MultiArray(const Float32MultiArray& from);
  Float32MultiArray(Float32MultiArray&& from) noexcept
    : Float32MultiArray() {
    *this = ::std::move(from);
  }

  inline Float32MultiArray& operator=(const Float32MultiArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float32MultiArray& operator=(Float32MultiArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Float32MultiArray& default_instance();

  static inline const Float32MultiArray* internal_default_instance() {
    return reinterpret_cast<const Float32MultiArray*>(
               &_Float32MultiArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Float32MultiArray& a, Float32MultiArray& b) {
    a.Swap(&b);
  }
  inline void Swap(Float32MultiArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float32MultiArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Float32MultiArray* New() const final {
    return CreateMaybeMessage<Float32MultiArray>(nullptr);
  }

  Float32MultiArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Float32MultiArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Float32MultiArray& from);
  void MergeFrom(const Float32MultiArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float32MultiArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.std_msgs.Float32MultiArray";
  }
  protected:
  explicit Float32MultiArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kLayoutFieldNumber = 1,
  };
  // repeated float data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // .openbot_bridge.ros2_msgs.std_msgs.MultiArrayLayout layout = 1;
  bool has_layout() const;
  private:
  bool _internal_has_layout() const;
  public:
  void clear_layout();
  const ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout& layout() const;
  ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* release_layout();
  ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* mutable_layout();
  void set_allocated_layout(::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* layout);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout& _internal_layout() const;
  ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* _internal_mutable_layout();
  public:
  void unsafe_arena_set_allocated_layout(
      ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* layout);
  ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* unsafe_arena_release_layout();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.std_msgs.Float32MultiArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* layout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// .openbot_bridge.ros2_msgs.builtin_interfaces.Time stamp = 1;
inline bool Header::_internal_has_stamp() const {
  return this != internal_default_instance() && stamp_ != nullptr;
}
inline bool Header::has_stamp() const {
  return _internal_has_stamp();
}
inline const ::openbot_bridge::ros2_msgs::builtin_interfaces::Time& Header::_internal_stamp() const {
  const ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* p = stamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::builtin_interfaces::Time&>(
      ::openbot_bridge::ros2_msgs::builtin_interfaces::_Time_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::builtin_interfaces::Time& Header::stamp() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.std_msgs.Header.stamp)
  return _internal_stamp();
}
inline void Header::unsafe_arena_set_allocated_stamp(
    ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_);
  }
  stamp_ = stamp;
  if (stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.std_msgs.Header.stamp)
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* Header::release_stamp() {
  
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* temp = stamp_;
  stamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* Header::unsafe_arena_release_stamp() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.std_msgs.Header.stamp)
  
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* temp = stamp_;
  stamp_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* Header::_internal_mutable_stamp() {
  
  if (stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::builtin_interfaces::Time>(GetArena());
    stamp_ = p;
  }
  return stamp_;
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* Header::mutable_stamp() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.std_msgs.Header.stamp)
  return _internal_mutable_stamp();
}
inline void Header::set_allocated_stamp(::openbot_bridge::ros2_msgs::builtin_interfaces::Time* stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_);
  }
  if (stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp)->GetArena();
    if (message_arena != submessage_arena) {
      stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stamp, submessage_arena);
    }
    
  } else {
    
  }
  stamp_ = stamp;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.std_msgs.Header.stamp)
}

// string frame_id = 2;
inline void Header::clear_frame_id() {
  frame_id_.ClearToEmpty();
}
inline const std::string& Header::frame_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.std_msgs.Header.frame_id)
  return _internal_frame_id();
}
inline void Header::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.std_msgs.Header.frame_id)
}
inline std::string* Header::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.std_msgs.Header.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& Header::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void Header::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Header::set_frame_id(std::string&& value) {
  
  frame_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.std_msgs.Header.frame_id)
}
inline void Header::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.std_msgs.Header.frame_id)
}
inline void Header::set_frame_id(const char* value,
    size_t size) {
  
  frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.std_msgs.Header.frame_id)
}
inline std::string* Header::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Header::release_frame_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.std_msgs.Header.frame_id)
  return frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.std_msgs.Header.frame_id)
}

// -------------------------------------------------------------------

// ColorRGBA

// float r = 1;
inline void ColorRGBA::clear_r() {
  r_ = 0;
}
inline float ColorRGBA::_internal_r() const {
  return r_;
}
inline float ColorRGBA::r() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.std_msgs.ColorRGBA.r)
  return _internal_r();
}
inline void ColorRGBA::_internal_set_r(float value) {
  
  r_ = value;
}
inline void ColorRGBA::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.std_msgs.ColorRGBA.r)
}

// float g = 2;
inline void ColorRGBA::clear_g() {
  g_ = 0;
}
inline float ColorRGBA::_internal_g() const {
  return g_;
}
inline float ColorRGBA::g() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.std_msgs.ColorRGBA.g)
  return _internal_g();
}
inline void ColorRGBA::_internal_set_g(float value) {
  
  g_ = value;
}
inline void ColorRGBA::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.std_msgs.ColorRGBA.g)
}

// float b = 3;
inline void ColorRGBA::clear_b() {
  b_ = 0;
}
inline float ColorRGBA::_internal_b() const {
  return b_;
}
inline float ColorRGBA::b() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.std_msgs.ColorRGBA.b)
  return _internal_b();
}
inline void ColorRGBA::_internal_set_b(float value) {
  
  b_ = value;
}
inline void ColorRGBA::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.std_msgs.ColorRGBA.b)
}

// float a = 4;
inline void ColorRGBA::clear_a() {
  a_ = 0;
}
inline float ColorRGBA::_internal_a() const {
  return a_;
}
inline float ColorRGBA::a() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.std_msgs.ColorRGBA.a)
  return _internal_a();
}
inline void ColorRGBA::_internal_set_a(float value) {
  
  a_ = value;
}
inline void ColorRGBA::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.std_msgs.ColorRGBA.a)
}

// -------------------------------------------------------------------

// MultiArrayDimension

// string label = 1;
inline void MultiArrayDimension::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& MultiArrayDimension::label() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension.label)
  return _internal_label();
}
inline void MultiArrayDimension::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension.label)
}
inline std::string* MultiArrayDimension::mutable_label() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension.label)
  return _internal_mutable_label();
}
inline const std::string& MultiArrayDimension::_internal_label() const {
  return label_.Get();
}
inline void MultiArrayDimension::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MultiArrayDimension::set_label(std::string&& value) {
  
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension.label)
}
inline void MultiArrayDimension::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension.label)
}
inline void MultiArrayDimension::set_label(const char* value,
    size_t size) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension.label)
}
inline std::string* MultiArrayDimension::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MultiArrayDimension::release_label() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MultiArrayDimension::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension.label)
}

// uint32 size = 2;
inline void MultiArrayDimension::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MultiArrayDimension::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MultiArrayDimension::size() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension.size)
  return _internal_size();
}
inline void MultiArrayDimension::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void MultiArrayDimension::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension.size)
}

// uint32 stride = 3;
inline void MultiArrayDimension::clear_stride() {
  stride_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MultiArrayDimension::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MultiArrayDimension::stride() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension.stride)
  return _internal_stride();
}
inline void MultiArrayDimension::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stride_ = value;
}
inline void MultiArrayDimension::set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension.stride)
}

// -------------------------------------------------------------------

// MultiArrayLayout

// repeated .openbot_bridge.ros2_msgs.std_msgs.MultiArrayDimension dim = 1;
inline int MultiArrayLayout::_internal_dim_size() const {
  return dim_.size();
}
inline int MultiArrayLayout::dim_size() const {
  return _internal_dim_size();
}
inline void MultiArrayLayout::clear_dim() {
  dim_.Clear();
}
inline ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension* MultiArrayLayout::mutable_dim(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.std_msgs.MultiArrayLayout.dim)
  return dim_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension >*
MultiArrayLayout::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.std_msgs.MultiArrayLayout.dim)
  return &dim_;
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension& MultiArrayLayout::_internal_dim(int index) const {
  return dim_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension& MultiArrayLayout::dim(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.std_msgs.MultiArrayLayout.dim)
  return _internal_dim(index);
}
inline ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension* MultiArrayLayout::_internal_add_dim() {
  return dim_.Add();
}
inline ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension* MultiArrayLayout::add_dim() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.std_msgs.MultiArrayLayout.dim)
  return _internal_add_dim();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayDimension >&
MultiArrayLayout::dim() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.std_msgs.MultiArrayLayout.dim)
  return dim_;
}

// uint32 data_offset = 2;
inline void MultiArrayLayout::clear_data_offset() {
  data_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MultiArrayLayout::_internal_data_offset() const {
  return data_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MultiArrayLayout::data_offset() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.std_msgs.MultiArrayLayout.data_offset)
  return _internal_data_offset();
}
inline void MultiArrayLayout::_internal_set_data_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_offset_ = value;
}
inline void MultiArrayLayout::set_data_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_offset(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.std_msgs.MultiArrayLayout.data_offset)
}

// -------------------------------------------------------------------

// Float32MultiArray

// .openbot_bridge.ros2_msgs.std_msgs.MultiArrayLayout layout = 1;
inline bool Float32MultiArray::_internal_has_layout() const {
  return this != internal_default_instance() && layout_ != nullptr;
}
inline bool Float32MultiArray::has_layout() const {
  return _internal_has_layout();
}
inline void Float32MultiArray::clear_layout() {
  if (GetArena() == nullptr && layout_ != nullptr) {
    delete layout_;
  }
  layout_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout& Float32MultiArray::_internal_layout() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* p = layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_MultiArrayLayout_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout& Float32MultiArray::layout() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.std_msgs.Float32MultiArray.layout)
  return _internal_layout();
}
inline void Float32MultiArray::unsafe_arena_set_allocated_layout(
    ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* layout) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layout_);
  }
  layout_ = layout;
  if (layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.std_msgs.Float32MultiArray.layout)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* Float32MultiArray::release_layout() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* temp = layout_;
  layout_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* Float32MultiArray::unsafe_arena_release_layout() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.std_msgs.Float32MultiArray.layout)
  
  ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* temp = layout_;
  layout_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* Float32MultiArray::_internal_mutable_layout() {
  
  if (layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout>(GetArena());
    layout_ = p;
  }
  return layout_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* Float32MultiArray::mutable_layout() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.std_msgs.Float32MultiArray.layout)
  return _internal_mutable_layout();
}
inline void Float32MultiArray::set_allocated_layout(::openbot_bridge::ros2_msgs::std_msgs::MultiArrayLayout* layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete layout_;
  }
  if (layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(layout);
    if (message_arena != submessage_arena) {
      layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layout, submessage_arena);
    }
    
  } else {
    
  }
  layout_ = layout;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.std_msgs.Float32MultiArray.layout)
}

// repeated float data = 2;
inline int Float32MultiArray::_internal_data_size() const {
  return data_.size();
}
inline int Float32MultiArray::data_size() const {
  return _internal_data_size();
}
inline void Float32MultiArray::clear_data() {
  data_.Clear();
}
inline float Float32MultiArray::_internal_data(int index) const {
  return data_.Get(index);
}
inline float Float32MultiArray::data(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.std_msgs.Float32MultiArray.data)
  return _internal_data(index);
}
inline void Float32MultiArray::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.std_msgs.Float32MultiArray.data)
}
inline void Float32MultiArray::_internal_add_data(float value) {
  data_.Add(value);
}
inline void Float32MultiArray::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.std_msgs.Float32MultiArray.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Float32MultiArray::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Float32MultiArray::data() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.std_msgs.Float32MultiArray.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Float32MultiArray::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Float32MultiArray::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.std_msgs.Float32MultiArray.data)
  return _internal_mutable_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace std_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto
