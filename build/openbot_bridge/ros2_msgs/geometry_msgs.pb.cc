// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/ros2_msgs/geometry_msgs.proto

#include "openbot_bridge/ros2_msgs/geometry_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Accel_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccelWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Inertia_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point32_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transform_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Twist_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TwistWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Wrench_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto;
namespace openbot_bridge {
namespace ros2_msgs {
namespace geometry_msgs {
class AccelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Accel> _instance;
} _Accel_default_instance_;
class AccelStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccelStamped> _instance;
} _AccelStamped_default_instance_;
class AccelWithCovarianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccelWithCovariance> _instance;
} _AccelWithCovariance_default_instance_;
class AccelWithCovarianceStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccelWithCovarianceStamped> _instance;
} _AccelWithCovarianceStamped_default_instance_;
class InertiaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Inertia> _instance;
} _Inertia_default_instance_;
class InertiaStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InertiaStamped> _instance;
} _InertiaStamped_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class PointStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointStamped> _instance;
} _PointStamped_default_instance_;
class Point32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point32> _instance;
} _Point32_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Polygon> _instance;
} _Polygon_default_instance_;
class PolygonStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolygonStamped> _instance;
} _PolygonStamped_default_instance_;
class Pose2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pose2D> _instance;
} _Pose2D_default_instance_;
class PoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pose> _instance;
} _Pose_default_instance_;
class PoseArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseArray> _instance;
} _PoseArray_default_instance_;
class PoseStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseStamped> _instance;
} _PoseStamped_default_instance_;
class PoseWithCovarianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseWithCovariance> _instance;
} _PoseWithCovariance_default_instance_;
class PoseWithCovarianceStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseWithCovarianceStamped> _instance;
} _PoseWithCovarianceStamped_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Quaternion> _instance;
} _Quaternion_default_instance_;
class QuaternionStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuaternionStamped> _instance;
} _QuaternionStamped_default_instance_;
class TransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transform> _instance;
} _Transform_default_instance_;
class TransformStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransformStamped> _instance;
} _TransformStamped_default_instance_;
class TwistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Twist> _instance;
} _Twist_default_instance_;
class TwistStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TwistStamped> _instance;
} _TwistStamped_default_instance_;
class TwistWithCovarianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TwistWithCovariance> _instance;
} _TwistWithCovariance_default_instance_;
class TwistWithCovarianceStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TwistWithCovarianceStamped> _instance;
} _TwistWithCovarianceStamped_default_instance_;
class Vector3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector3> _instance;
} _Vector3_default_instance_;
class Vector3StampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector3Stamped> _instance;
} _Vector3Stamped_default_instance_;
class WrenchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wrench> _instance;
} _Wrench_default_instance_;
class WrenchStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WrenchStamped> _instance;
} _WrenchStamped_default_instance_;
class VelocityStampedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VelocityStamped> _instance;
} _VelocityStamped_default_instance_;
}  // namespace geometry_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
static void InitDefaultsscc_info_Accel_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_Accel_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::Accel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Accel_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Accel_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_AccelStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_AccelStamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::AccelStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccelStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AccelStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Accel_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_AccelWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_AccelWithCovariance_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccelWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccelWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Accel_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_AccelWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_AccelWithCovarianceStamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovarianceStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccelWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AccelWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_AccelWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Inertia_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_Inertia_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Inertia_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Inertia_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_InertiaStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_InertiaStamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::InertiaStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InertiaStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InertiaStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Inertia_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Point_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_Point_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_Point32_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_Point32_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::Point32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point32_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point32_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_PointStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_PointStamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::PointStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PointStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PointStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Point_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Polygon_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_Polygon_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Polygon_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Point32_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_PolygonStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_PolygonStamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::PolygonStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PolygonStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PolygonStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Polygon_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_Pose_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::Pose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Point_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
      &scc_info_Quaternion_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Pose2D_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_Pose2D_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::Pose2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose2D_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pose2D_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_PoseArray_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_PoseArray_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::PoseArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PoseArray_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PoseArray_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_PoseStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_PoseStamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PoseStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PoseStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_PoseWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_PoseWithCovariance_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PoseWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_PoseWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_PoseWithCovarianceStamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovarianceStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PoseWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PoseWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_PoseWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Quaternion_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_Quaternion_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Quaternion_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_QuaternionStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_QuaternionStamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::QuaternionStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QuaternionStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_QuaternionStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Quaternion_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Transform_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_Transform_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::Transform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transform_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Transform_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
      &scc_info_Quaternion_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_TransformStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_TransformStamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::TransformStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransformStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TransformStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Transform_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Twist_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_Twist_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::Twist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Twist_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Twist_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_TwistStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_TwistStamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::TwistStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TwistStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TwistStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Twist_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_TwistWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_TwistWithCovariance_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TwistWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TwistWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Twist_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_TwistWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_TwistWithCovarianceStamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovarianceStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TwistWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TwistWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_TwistWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_Vector3Stamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3Stamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3Stamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Vector3Stamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Vector3Stamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_VelocityStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_VelocityStamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::VelocityStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VelocityStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VelocityStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Twist_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Wrench_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_Wrench_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Wrench_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Wrench_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_WrenchStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::geometry_msgs::_WrenchStamped_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::geometry_msgs::WrenchStamped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WrenchStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WrenchStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Wrench_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto[30];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Accel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Accel, linear_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Accel, angular_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::AccelStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::AccelStamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::AccelStamped, accel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance, accel_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance, covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovarianceStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovarianceStamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovarianceStamped, accel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Inertia, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Inertia, m_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Inertia, com_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Inertia, ixx_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Inertia, ixy_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Inertia, ixz_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Inertia, iyy_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Inertia, iyz_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Inertia, izz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::InertiaStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::InertiaStamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::InertiaStamped, inertia_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Point, x_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Point, y_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Point, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PointStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PointStamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PointStamped, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Point32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Point32, x_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Point32, y_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Point32, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Polygon, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PolygonStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PolygonStamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PolygonStamped, polygon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Pose2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Pose2D, x_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Pose2D, y_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Pose2D, theta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Pose, position_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Pose, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PoseArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PoseArray, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PoseArray, poses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance, pose_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance, covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovarianceStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovarianceStamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovarianceStamped, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion, z_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion, w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::QuaternionStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::QuaternionStamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::QuaternionStamped, quaternion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Transform, translation_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Transform, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::TransformStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::TransformStamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::TransformStamped, child_frame_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::TransformStamped, transform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Twist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Twist, linear_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Twist, angular_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::TwistStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::TwistStamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::TwistStamped, twist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance, twist_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance, covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovarianceStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovarianceStamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovarianceStamped, twist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3Stamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3Stamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3Stamped, vector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Wrench, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Wrench, force_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::Wrench, torque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::WrenchStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::WrenchStamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::WrenchStamped, wrench_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::VelocityStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::VelocityStamped, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::VelocityStamped, body_frame_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::VelocityStamped, reference_frame_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::geometry_msgs::VelocityStamped, velocity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::Accel)},
  { 7, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::AccelStamped)},
  { 14, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance)},
  { 21, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovarianceStamped)},
  { 28, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::Inertia)},
  { 41, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::InertiaStamped)},
  { 48, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::Point)},
  { 56, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::PointStamped)},
  { 63, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::Point32)},
  { 71, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::Polygon)},
  { 77, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::PolygonStamped)},
  { 84, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::Pose2D)},
  { 92, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::Pose)},
  { 99, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::PoseArray)},
  { 106, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped)},
  { 113, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance)},
  { 120, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovarianceStamped)},
  { 127, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion)},
  { 136, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::QuaternionStamped)},
  { 143, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::Transform)},
  { 150, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::TransformStamped)},
  { 158, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::Twist)},
  { 165, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::TwistStamped)},
  { 172, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance)},
  { 179, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovarianceStamped)},
  { 186, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3)},
  { 194, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3Stamped)},
  { 201, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::Wrench)},
  { 208, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::WrenchStamped)},
  { 215, -1, sizeof(::openbot_bridge::ros2_msgs::geometry_msgs::VelocityStamped)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_Accel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_AccelStamped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_AccelWithCovariance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_AccelWithCovarianceStamped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_Inertia_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_InertiaStamped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_PointStamped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_Point32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_PolygonStamped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_Pose2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_Pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_PoseArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_PoseStamped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_PoseWithCovariance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_PoseWithCovarianceStamped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_Quaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_QuaternionStamped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_Transform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_TransformStamped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_Twist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_TwistStamped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_TwistWithCovariance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_TwistWithCovarianceStamped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3Stamped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_Wrench_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_WrenchStamped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::geometry_msgs::_VelocityStamped_default_instance_),
};

const char descriptor_table_protodef_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,openbot_bridge/ros2_msgs/geometry_msgs"
  ".proto\022&openbot_bridge.ros2_msgs.geometr"
  "y_msgs\032\'openbot_bridge/ros2_msgs/std_msg"
  "s.proto\"\212\001\n\005Accel\022\?\n\006linear\030\001 \001(\0132/.open"
  "bot_bridge.ros2_msgs.geometry_msgs.Vecto"
  "r3\022@\n\007angular\030\002 \001(\0132/.openbot_bridge.ros"
  "2_msgs.geometry_msgs.Vector3\"\207\001\n\014AccelSt"
  "amped\0229\n\006header\030\001 \001(\0132).openbot_bridge.r"
  "os2_msgs.std_msgs.Header\022<\n\005accel\030\002 \001(\0132"
  "-.openbot_bridge.ros2_msgs.geometry_msgs"
  ".Accel\"k\n\023AccelWithCovariance\022<\n\005accel\030\001"
  " \001(\0132-.openbot_bridge.ros2_msgs.geometry"
  "_msgs.Accel\022\026\n\ncovariance\030\002 \003(\002B\002\020\001\"\243\001\n\032"
  "AccelWithCovarianceStamped\0229\n\006header\030\001 \001"
  "(\0132).openbot_bridge.ros2_msgs.std_msgs.H"
  "eader\022J\n\005accel\030\002 \001(\0132;.openbot_bridge.ro"
  "s2_msgs.geometry_msgs.AccelWithCovarianc"
  "e\"\240\001\n\007Inertia\022\t\n\001m\030\001 \001(\002\022<\n\003com\030\002 \001(\0132/."
  "openbot_bridge.ros2_msgs.geometry_msgs.V"
  "ector3\022\013\n\003ixx\030\003 \001(\002\022\013\n\003ixy\030\004 \001(\002\022\013\n\003ixz\030"
  "\005 \001(\002\022\013\n\003iyy\030\006 \001(\002\022\013\n\003iyz\030\007 \001(\002\022\013\n\003izz\030\010"
  " \001(\002\"\215\001\n\016InertiaStamped\0229\n\006header\030\001 \001(\0132"
  ").openbot_bridge.ros2_msgs.std_msgs.Head"
  "er\022@\n\007inertia\030\002 \001(\0132/.openbot_bridge.ros"
  "2_msgs.geometry_msgs.Inertia\"(\n\005Point\022\t\n"
  "\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\207\001\n\014Point"
  "Stamped\0229\n\006header\030\001 \001(\0132).openbot_bridge"
  ".ros2_msgs.std_msgs.Header\022<\n\005point\030\002 \001("
  "\0132-.openbot_bridge.ros2_msgs.geometry_ms"
  "gs.Point\"*\n\007Point32\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001("
  "\002\022\t\n\001z\030\003 \001(\002\"J\n\007Polygon\022\?\n\006points\030\001 \003(\0132"
  "/.openbot_bridge.ros2_msgs.geometry_msgs"
  ".Point32\"\215\001\n\016PolygonStamped\0229\n\006header\030\001 "
  "\001(\0132).openbot_bridge.ros2_msgs.std_msgs."
  "Header\022@\n\007polygon\030\002 \001(\0132/.openbot_bridge"
  ".ros2_msgs.geometry_msgs.Polygon\"-\n\006Pose"
  "2D\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\r\n\005theta\030\003 \001(\001\""
  "\220\001\n\004Pose\022\?\n\010position\030\001 \001(\0132-.openbot_bri"
  "dge.ros2_msgs.geometry_msgs.Point\022G\n\013ori"
  "entation\030\002 \001(\01322.openbot_bridge.ros2_msg"
  "s.geometry_msgs.Quaternion\"\203\001\n\tPoseArray"
  "\0229\n\006header\030\001 \001(\0132).openbot_bridge.ros2_m"
  "sgs.std_msgs.Header\022;\n\005poses\030\002 \003(\0132,.ope"
  "nbot_bridge.ros2_msgs.geometry_msgs.Pose"
  "\"\204\001\n\013PoseStamped\0229\n\006header\030\001 \001(\0132).openb"
  "ot_bridge.ros2_msgs.std_msgs.Header\022:\n\004p"
  "ose\030\002 \001(\0132,.openbot_bridge.ros2_msgs.geo"
  "metry_msgs.Pose\"h\n\022PoseWithCovariance\022:\n"
  "\004pose\030\001 \001(\0132,.openbot_bridge.ros2_msgs.g"
  "eometry_msgs.Pose\022\026\n\ncovariance\030\002 \003(\001B\002\020"
  "\001\"\240\001\n\031PoseWithCovarianceStamped\0229\n\006heade"
  "r\030\001 \001(\0132).openbot_bridge.ros2_msgs.std_m"
  "sgs.Header\022H\n\004pose\030\002 \001(\0132:.openbot_bridg"
  "e.ros2_msgs.geometry_msgs.PoseWithCovari"
  "ance\"8\n\nQuaternion\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001"
  "\022\t\n\001z\030\003 \001(\001\022\t\n\001w\030\004 \001(\001\"\226\001\n\021QuaternionSta"
  "mped\0229\n\006header\030\001 \001(\0132).openbot_bridge.ro"
  "s2_msgs.std_msgs.Header\022F\n\nquaternion\030\002 "
  "\001(\01322.openbot_bridge.ros2_msgs.geometry_"
  "msgs.Quaternion\"\227\001\n\tTransform\022D\n\013transla"
  "tion\030\001 \001(\0132/.openbot_bridge.ros2_msgs.ge"
  "ometry_msgs.Vector3\022D\n\010rotation\030\002 \001(\01322."
  "openbot_bridge.ros2_msgs.geometry_msgs.Q"
  "uaternion\"\253\001\n\020TransformStamped\0229\n\006header"
  "\030\001 \001(\0132).openbot_bridge.ros2_msgs.std_ms"
  "gs.Header\022\026\n\016child_frame_id\030\002 \001(\t\022D\n\ttra"
  "nsform\030\003 \001(\01321.openbot_bridge.ros2_msgs."
  "geometry_msgs.Transform\"\212\001\n\005Twist\022\?\n\006lin"
  "ear\030\001 \001(\0132/.openbot_bridge.ros2_msgs.geo"
  "metry_msgs.Vector3\022@\n\007angular\030\002 \001(\0132/.op"
  "enbot_bridge.ros2_msgs.geometry_msgs.Vec"
  "tor3\"\207\001\n\014TwistStamped\0229\n\006header\030\001 \001(\0132)."
  "openbot_bridge.ros2_msgs.std_msgs.Header"
  "\022<\n\005twist\030\002 \001(\0132-.openbot_bridge.ros2_ms"
  "gs.geometry_msgs.Twist\"k\n\023TwistWithCovar"
  "iance\022<\n\005twist\030\001 \001(\0132-.openbot_bridge.ro"
  "s2_msgs.geometry_msgs.Twist\022\026\n\ncovarianc"
  "e\030\002 \003(\001B\002\020\001\"\243\001\n\032TwistWithCovarianceStamp"
  "ed\0229\n\006header\030\001 \001(\0132).openbot_bridge.ros2"
  "_msgs.std_msgs.Header\022J\n\005twist\030\002 \001(\0132;.o"
  "penbot_bridge.ros2_msgs.geometry_msgs.Tw"
  "istWithCovariance\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022"
  "\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\214\001\n\016Vector3Stamped"
  "\0229\n\006header\030\001 \001(\0132).openbot_bridge.ros2_m"
  "sgs.std_msgs.Header\022\?\n\006vector\030\002 \001(\0132/.op"
  "enbot_bridge.ros2_msgs.geometry_msgs.Vec"
  "tor3\"\211\001\n\006Wrench\022>\n\005force\030\001 \001(\0132/.openbot"
  "_bridge.ros2_msgs.geometry_msgs.Vector3\022"
  "\?\n\006torque\030\002 \001(\0132/.openbot_bridge.ros2_ms"
  "gs.geometry_msgs.Vector3\"\212\001\n\rWrenchStamp"
  "ed\0229\n\006header\030\001 \001(\0132).openbot_bridge.ros2"
  "_msgs.std_msgs.Header\022>\n\006wrench\030\002 \001(\0132.."
  "openbot_bridge.ros2_msgs.geometry_msgs.W"
  "rench\"\300\001\n\017VelocityStamped\0229\n\006header\030\001 \001("
  "\0132).openbot_bridge.ros2_msgs.std_msgs.He"
  "ader\022\025\n\rbody_frame_id\030\002 \001(\t\022\032\n\022reference"
  "_frame_id\030\003 \001(\t\022\?\n\010velocity\030\004 \001(\0132-.open"
  "bot_bridge.ros2_msgs.geometry_msgs.Twist"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto_deps[1] = {
  &::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto_sccs[30] = {
  &scc_info_Accel_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_AccelStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_AccelWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_AccelWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_Inertia_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_InertiaStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_Point_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_Point32_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_PointStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_Polygon_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_PolygonStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_Pose2D_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_PoseArray_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_PoseStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_PoseWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_PoseWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_Quaternion_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_QuaternionStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_Transform_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_TransformStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_Twist_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_TwistStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_TwistWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_TwistWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_Vector3Stamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_VelocityStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_Wrench_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
  &scc_info_WrenchStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto = {
  false, false, descriptor_table_protodef_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto, "openbot_bridge/ros2_msgs/geometry_msgs.proto", 3928,
  &descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto_once, descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto_sccs, descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto_deps, 30, 1,
  schemas, file_default_instances, TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto::offsets,
  file_level_metadata_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto, 30, file_level_enum_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto, file_level_service_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto)), true);
namespace openbot_bridge {
namespace ros2_msgs {
namespace geometry_msgs {

// ===================================================================

class Accel::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& linear(const Accel* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& angular(const Accel* msg);
};

const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&
Accel::_Internal::linear(const Accel* msg) {
  return *msg->linear_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&
Accel::_Internal::angular(const Accel* msg) {
  return *msg->angular_;
}
Accel::Accel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
}
Accel::Accel(const Accel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear()) {
    linear_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3(*from.linear_);
  } else {
    linear_ = nullptr;
  }
  if (from._internal_has_angular()) {
    angular_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3(*from.angular_);
  } else {
    angular_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
}

void Accel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Accel_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&linear_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
}

Accel::~Accel() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Accel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete linear_;
  if (this != internal_default_instance()) delete angular_;
}

void Accel::ArenaDtor(void* object) {
  Accel* _this = reinterpret_cast< Accel* >(object);
  (void)_this;
}
void Accel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Accel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Accel& Accel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Accel_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Accel::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
  if (GetArena() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Accel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 linear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 angular = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Accel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 linear = 1;
  if (this->has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 angular = 2;
  if (this->has_angular()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
  return target;
}

size_t Accel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 linear = 1;
  if (this->has_linear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 angular = 2;
  if (this->has_angular()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
  GOOGLE_DCHECK_NE(&from, this);
  const Accel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Accel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
    MergeFrom(*source);
  }
}

void Accel::MergeFrom(const Accel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear()) {
    _internal_mutable_linear()->::openbot_bridge::ros2_msgs::geometry_msgs::Vector3::MergeFrom(from._internal_linear());
  }
  if (from.has_angular()) {
    _internal_mutable_angular()->::openbot_bridge::ros2_msgs::geometry_msgs::Vector3::MergeFrom(from._internal_angular());
  }
}

void Accel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accel::CopyFrom(const Accel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel::IsInitialized() const {
  return true;
}

void Accel::InternalSwap(Accel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Accel, angular_)
      + sizeof(Accel::angular_)
      - PROTOBUF_FIELD_OFFSET(Accel, linear_)>(
          reinterpret_cast<char*>(&linear_),
          reinterpret_cast<char*>(&other->linear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Accel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccelStamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const AccelStamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel& accel(const AccelStamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
AccelStamped::_Internal::header(const AccelStamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel&
AccelStamped::_Internal::accel(const AccelStamped* msg) {
  return *msg->accel_;
}
void AccelStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
AccelStamped::AccelStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
}
AccelStamped::AccelStamped(const AccelStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_accel()) {
    accel_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Accel(*from.accel_);
  } else {
    accel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
}

void AccelStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccelStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&accel_) -
      reinterpret_cast<char*>(&header_)) + sizeof(accel_));
}

AccelStamped::~AccelStamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccelStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete accel_;
}

void AccelStamped::ArenaDtor(void* object) {
  AccelStamped* _this = reinterpret_cast< AccelStamped* >(object);
  (void)_this;
}
void AccelStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccelStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccelStamped& AccelStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccelStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AccelStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && accel_ != nullptr) {
    delete accel_;
  }
  accel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Accel accel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccelStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Accel accel = 2;
  if (this->has_accel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::accel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
  return target;
}

size_t AccelStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Accel accel = 2;
  if (this->has_accel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccelStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccelStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
    MergeFrom(*source);
  }
}

void AccelStamped::MergeFrom(const AccelStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_accel()) {
    _internal_mutable_accel()->::openbot_bridge::ros2_msgs::geometry_msgs::Accel::MergeFrom(from._internal_accel());
  }
}

void AccelStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelStamped::CopyFrom(const AccelStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelStamped::IsInitialized() const {
  return true;
}

void AccelStamped::InternalSwap(AccelStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccelStamped, accel_)
      + sizeof(AccelStamped::accel_)
      - PROTOBUF_FIELD_OFFSET(AccelStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccelWithCovariance::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel& accel(const AccelWithCovariance* msg);
};

const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel&
AccelWithCovariance::_Internal::accel(const AccelWithCovariance* msg) {
  return *msg->accel_;
}
AccelWithCovariance::AccelWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  covariance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
}
AccelWithCovariance::AccelWithCovariance(const AccelWithCovariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      covariance_(from.covariance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_accel()) {
    accel_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Accel(*from.accel_);
  } else {
    accel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
}

void AccelWithCovariance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccelWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  accel_ = nullptr;
}

AccelWithCovariance::~AccelWithCovariance() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccelWithCovariance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete accel_;
}

void AccelWithCovariance::ArenaDtor(void* object) {
  AccelWithCovariance* _this = reinterpret_cast< AccelWithCovariance* >(object);
  (void)_this;
}
void AccelWithCovariance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccelWithCovariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccelWithCovariance& AccelWithCovariance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccelWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AccelWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_.Clear();
  if (GetArena() == nullptr && accel_ != nullptr) {
    delete accel_;
  }
  accel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelWithCovariance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.geometry_msgs.Accel accel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float covariance = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccelWithCovariance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Accel accel = 1;
  if (this->has_accel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accel(this), target, stream);
  }

  // repeated float covariance = 2 [packed = true];
  if (this->_internal_covariance_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
  return target;
}

size_t AccelWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float covariance = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Accel accel = 1;
  if (this->has_accel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccelWithCovariance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelWithCovariance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccelWithCovariance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
    MergeFrom(*source);
  }
}

void AccelWithCovariance::MergeFrom(const AccelWithCovariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_.MergeFrom(from.covariance_);
  if (from.has_accel()) {
    _internal_mutable_accel()->::openbot_bridge::ros2_msgs::geometry_msgs::Accel::MergeFrom(from._internal_accel());
  }
}

void AccelWithCovariance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelWithCovariance::CopyFrom(const AccelWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelWithCovariance::IsInitialized() const {
  return true;
}

void AccelWithCovariance::InternalSwap(AccelWithCovariance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  covariance_.InternalSwap(&other->covariance_);
  swap(accel_, other->accel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelWithCovariance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccelWithCovarianceStamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const AccelWithCovarianceStamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance& accel(const AccelWithCovarianceStamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
AccelWithCovarianceStamped::_Internal::header(const AccelWithCovarianceStamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance&
AccelWithCovarianceStamped::_Internal::accel(const AccelWithCovarianceStamped* msg) {
  return *msg->accel_;
}
void AccelWithCovarianceStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
AccelWithCovarianceStamped::AccelWithCovarianceStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
}
AccelWithCovarianceStamped::AccelWithCovarianceStamped(const AccelWithCovarianceStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_accel()) {
    accel_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance(*from.accel_);
  } else {
    accel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
}

void AccelWithCovarianceStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccelWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&accel_) -
      reinterpret_cast<char*>(&header_)) + sizeof(accel_));
}

AccelWithCovarianceStamped::~AccelWithCovarianceStamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccelWithCovarianceStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete accel_;
}

void AccelWithCovarianceStamped::ArenaDtor(void* object) {
  AccelWithCovarianceStamped* _this = reinterpret_cast< AccelWithCovarianceStamped* >(object);
  (void)_this;
}
void AccelWithCovarianceStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccelWithCovarianceStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccelWithCovarianceStamped& AccelWithCovarianceStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccelWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AccelWithCovarianceStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && accel_ != nullptr) {
    delete accel_;
  }
  accel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelWithCovarianceStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance accel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccelWithCovarianceStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance accel = 2;
  if (this->has_accel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::accel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
  return target;
}

size_t AccelWithCovarianceStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance accel = 2;
  if (this->has_accel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccelWithCovarianceStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelWithCovarianceStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccelWithCovarianceStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
    MergeFrom(*source);
  }
}

void AccelWithCovarianceStamped::MergeFrom(const AccelWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_accel()) {
    _internal_mutable_accel()->::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance::MergeFrom(from._internal_accel());
  }
}

void AccelWithCovarianceStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelWithCovarianceStamped::CopyFrom(const AccelWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelWithCovarianceStamped::IsInitialized() const {
  return true;
}

void AccelWithCovarianceStamped::InternalSwap(AccelWithCovarianceStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccelWithCovarianceStamped, accel_)
      + sizeof(AccelWithCovarianceStamped::accel_)
      - PROTOBUF_FIELD_OFFSET(AccelWithCovarianceStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelWithCovarianceStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Inertia::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& com(const Inertia* msg);
};

const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&
Inertia::_Internal::com(const Inertia* msg) {
  return *msg->com_;
}
Inertia::Inertia(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
}
Inertia::Inertia(const Inertia& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_com()) {
    com_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3(*from.com_);
  } else {
    com_ = nullptr;
  }
  ::memcpy(&m_, &from.m_,
    static_cast<size_t>(reinterpret_cast<char*>(&izz_) -
    reinterpret_cast<char*>(&m_)) + sizeof(izz_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
}

void Inertia::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Inertia_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&com_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&izz_) -
      reinterpret_cast<char*>(&com_)) + sizeof(izz_));
}

Inertia::~Inertia() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Inertia::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete com_;
}

void Inertia::ArenaDtor(void* object) {
  Inertia* _this = reinterpret_cast< Inertia* >(object);
  (void)_this;
}
void Inertia::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Inertia::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Inertia& Inertia::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Inertia_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Inertia::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && com_ != nullptr) {
    delete com_;
  }
  com_ = nullptr;
  ::memset(&m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&izz_) -
      reinterpret_cast<char*>(&m_)) + sizeof(izz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inertia::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 com = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_com(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ixx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ixx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ixy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ixy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ixz = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ixz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iyy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          iyy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iyz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          iyz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float izz = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          izz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Inertia::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float m = 1;
  if (!(this->m() <= 0 && this->m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_m(), target);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 com = 2;
  if (this->has_com()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::com(this), target, stream);
  }

  // float ixx = 3;
  if (!(this->ixx() <= 0 && this->ixx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_ixx(), target);
  }

  // float ixy = 4;
  if (!(this->ixy() <= 0 && this->ixy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_ixy(), target);
  }

  // float ixz = 5;
  if (!(this->ixz() <= 0 && this->ixz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_ixz(), target);
  }

  // float iyy = 6;
  if (!(this->iyy() <= 0 && this->iyy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_iyy(), target);
  }

  // float iyz = 7;
  if (!(this->iyz() <= 0 && this->iyz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_iyz(), target);
  }

  // float izz = 8;
  if (!(this->izz() <= 0 && this->izz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_izz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
  return target;
}

size_t Inertia::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 com = 2;
  if (this->has_com()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *com_);
  }

  // float m = 1;
  if (!(this->m() <= 0 && this->m() >= 0)) {
    total_size += 1 + 4;
  }

  // float ixx = 3;
  if (!(this->ixx() <= 0 && this->ixx() >= 0)) {
    total_size += 1 + 4;
  }

  // float ixy = 4;
  if (!(this->ixy() <= 0 && this->ixy() >= 0)) {
    total_size += 1 + 4;
  }

  // float ixz = 5;
  if (!(this->ixz() <= 0 && this->ixz() >= 0)) {
    total_size += 1 + 4;
  }

  // float iyy = 6;
  if (!(this->iyy() <= 0 && this->iyy() >= 0)) {
    total_size += 1 + 4;
  }

  // float iyz = 7;
  if (!(this->iyz() <= 0 && this->iyz() >= 0)) {
    total_size += 1 + 4;
  }

  // float izz = 8;
  if (!(this->izz() <= 0 && this->izz() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Inertia::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
  GOOGLE_DCHECK_NE(&from, this);
  const Inertia* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Inertia>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
    MergeFrom(*source);
  }
}

void Inertia::MergeFrom(const Inertia& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_com()) {
    _internal_mutable_com()->::openbot_bridge::ros2_msgs::geometry_msgs::Vector3::MergeFrom(from._internal_com());
  }
  if (!(from.m() <= 0 && from.m() >= 0)) {
    _internal_set_m(from._internal_m());
  }
  if (!(from.ixx() <= 0 && from.ixx() >= 0)) {
    _internal_set_ixx(from._internal_ixx());
  }
  if (!(from.ixy() <= 0 && from.ixy() >= 0)) {
    _internal_set_ixy(from._internal_ixy());
  }
  if (!(from.ixz() <= 0 && from.ixz() >= 0)) {
    _internal_set_ixz(from._internal_ixz());
  }
  if (!(from.iyy() <= 0 && from.iyy() >= 0)) {
    _internal_set_iyy(from._internal_iyy());
  }
  if (!(from.iyz() <= 0 && from.iyz() >= 0)) {
    _internal_set_iyz(from._internal_iyz());
  }
  if (!(from.izz() <= 0 && from.izz() >= 0)) {
    _internal_set_izz(from._internal_izz());
  }
}

void Inertia::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inertia::CopyFrom(const Inertia& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inertia::IsInitialized() const {
  return true;
}

void Inertia::InternalSwap(Inertia* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Inertia, izz_)
      + sizeof(Inertia::izz_)
      - PROTOBUF_FIELD_OFFSET(Inertia, com_)>(
          reinterpret_cast<char*>(&com_),
          reinterpret_cast<char*>(&other->com_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Inertia::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InertiaStamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const InertiaStamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia& inertia(const InertiaStamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
InertiaStamped::_Internal::header(const InertiaStamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia&
InertiaStamped::_Internal::inertia(const InertiaStamped* msg) {
  return *msg->inertia_;
}
void InertiaStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
InertiaStamped::InertiaStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
}
InertiaStamped::InertiaStamped(const InertiaStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_inertia()) {
    inertia_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia(*from.inertia_);
  } else {
    inertia_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
}

void InertiaStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InertiaStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&inertia_) -
      reinterpret_cast<char*>(&header_)) + sizeof(inertia_));
}

InertiaStamped::~InertiaStamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InertiaStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete inertia_;
}

void InertiaStamped::ArenaDtor(void* object) {
  InertiaStamped* _this = reinterpret_cast< InertiaStamped* >(object);
  (void)_this;
}
void InertiaStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InertiaStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InertiaStamped& InertiaStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InertiaStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void InertiaStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && inertia_ != nullptr) {
    delete inertia_;
  }
  inertia_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InertiaStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Inertia inertia = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inertia(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InertiaStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Inertia inertia = 2;
  if (this->has_inertia()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::inertia(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
  return target;
}

size_t InertiaStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Inertia inertia = 2;
  if (this->has_inertia()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inertia_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InertiaStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const InertiaStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InertiaStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
    MergeFrom(*source);
  }
}

void InertiaStamped::MergeFrom(const InertiaStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_inertia()) {
    _internal_mutable_inertia()->::openbot_bridge::ros2_msgs::geometry_msgs::Inertia::MergeFrom(from._internal_inertia());
  }
}

void InertiaStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InertiaStamped::CopyFrom(const InertiaStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InertiaStamped::IsInitialized() const {
  return true;
}

void InertiaStamped::InternalSwap(InertiaStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InertiaStamped, inertia_)
      + sizeof(InertiaStamped::inertia_)
      - PROTOBUF_FIELD_OFFSET(InertiaStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InertiaStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Point)
}

void Point::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, z_)
      + sizeof(Point::z_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PointStamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const PointStamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& point(const PointStamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
PointStamped::_Internal::header(const PointStamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Point&
PointStamped::_Internal::point(const PointStamped* msg) {
  return *msg->point_;
}
void PointStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
PointStamped::PointStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
}
PointStamped::PointStamped(const PointStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_point()) {
    point_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Point(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
}

void PointStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PointStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(point_));
}

PointStamped::~PointStamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete point_;
}

void PointStamped::ArenaDtor(void* object) {
  PointStamped* _this = reinterpret_cast< PointStamped* >(object);
  (void)_this;
}
void PointStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointStamped& PointStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PointStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Point point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Point point = 2;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
  return target;
}

size_t PointStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Point point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const PointStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
    MergeFrom(*source);
  }
}

void PointStamped::MergeFrom(const PointStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_point()) {
    _internal_mutable_point()->::openbot_bridge::ros2_msgs::geometry_msgs::Point::MergeFrom(from._internal_point());
  }
}

void PointStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointStamped::CopyFrom(const PointStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointStamped::IsInitialized() const {
  return true;
}

void PointStamped::InternalSwap(PointStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointStamped, point_)
      + sizeof(PointStamped::point_)
      - PROTOBUF_FIELD_OFFSET(PointStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Point32::_Internal {
 public:
};

Point32::Point32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
}
Point32::Point32(const Point32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
}

void Point32::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point32::~Point32() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point32::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point32::ArenaDtor(void* object) {
  Point32* _this = reinterpret_cast< Point32* >(object);
  (void)_this;
}
void Point32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point32& Point32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point32_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Point32::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
  return target;
}

size_t Point32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
  GOOGLE_DCHECK_NE(&from, this);
  const Point32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
    MergeFrom(*source);
  }
}

void Point32::MergeFrom(const Point32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point32::CopyFrom(const Point32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point32::IsInitialized() const {
  return true;
}

void Point32::InternalSwap(Point32* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point32, z_)
      + sizeof(Point32::z_)
      - PROTOBUF_FIELD_OFFSET(Point32, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Polygon::_Internal {
 public:
};

Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
}

void Polygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Polygon_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Polygon::ArenaDtor(void* object) {
  Polygon* _this = reinterpret_cast< Polygon* >(object);
  (void)_this;
}
void Polygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Polygon& Polygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Polygon_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point32 points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point32 points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point32 points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void Polygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PolygonStamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const PolygonStamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon& polygon(const PolygonStamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
PolygonStamped::_Internal::header(const PolygonStamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon&
PolygonStamped::_Internal::polygon(const PolygonStamped* msg) {
  return *msg->polygon_;
}
void PolygonStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
PolygonStamped::PolygonStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
}
PolygonStamped::PolygonStamped(const PolygonStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_polygon()) {
    polygon_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon(*from.polygon_);
  } else {
    polygon_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
}

void PolygonStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolygonStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&polygon_) -
      reinterpret_cast<char*>(&header_)) + sizeof(polygon_));
}

PolygonStamped::~PolygonStamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PolygonStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete polygon_;
}

void PolygonStamped::ArenaDtor(void* object) {
  PolygonStamped* _this = reinterpret_cast< PolygonStamped* >(object);
  (void)_this;
}
void PolygonStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolygonStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolygonStamped& PolygonStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolygonStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PolygonStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && polygon_ != nullptr) {
    delete polygon_;
  }
  polygon_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolygonStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Polygon polygon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolygonStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Polygon polygon = 2;
  if (this->has_polygon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::polygon(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
  return target;
}

size_t PolygonStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Polygon polygon = 2;
  if (this->has_polygon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *polygon_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolygonStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const PolygonStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolygonStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
    MergeFrom(*source);
  }
}

void PolygonStamped::MergeFrom(const PolygonStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_polygon()) {
    _internal_mutable_polygon()->::openbot_bridge::ros2_msgs::geometry_msgs::Polygon::MergeFrom(from._internal_polygon());
  }
}

void PolygonStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolygonStamped::CopyFrom(const PolygonStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolygonStamped::IsInitialized() const {
  return true;
}

void PolygonStamped::InternalSwap(PolygonStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolygonStamped, polygon_)
      + sizeof(PolygonStamped::polygon_)
      - PROTOBUF_FIELD_OFFSET(PolygonStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolygonStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Pose2D::_Internal {
 public:
};

Pose2D::Pose2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
}
Pose2D::Pose2D(const Pose2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&x_)) + sizeof(theta_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
}

void Pose2D::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&x_)) + sizeof(theta_));
}

Pose2D::~Pose2D() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pose2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pose2D::ArenaDtor(void* object) {
  Pose2D* _this = reinterpret_cast< Pose2D* >(object);
  (void)_this;
}
void Pose2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pose2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pose2D& Pose2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pose2D_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Pose2D::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&x_)) + sizeof(theta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double theta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pose2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double theta = 3;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_theta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
  return target;
}

size_t Pose2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double theta = 3;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pose2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
    MergeFrom(*source);
  }
}

void Pose2D::MergeFrom(const Pose2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
}

void Pose2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose2D::CopyFrom(const Pose2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose2D::IsInitialized() const {
  return true;
}

void Pose2D::InternalSwap(Pose2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose2D, theta_)
      + sizeof(Pose2D::theta_)
      - PROTOBUF_FIELD_OFFSET(Pose2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Pose::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& position(const Pose* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& orientation(const Pose* msg);
};

const ::openbot_bridge::ros2_msgs::geometry_msgs::Point&
Pose::_Internal::position(const Pose* msg) {
  return *msg->position_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion&
Pose::_Internal::orientation(const Pose* msg) {
  return *msg->orientation_;
}
Pose::Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
}
Pose::Pose(const Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Point(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
}

void Pose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&position_)) + sizeof(orientation_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void Pose::ArenaDtor(void* object) {
  Pose* _this = reinterpret_cast< Pose* >(object);
  (void)_this;
}
void Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pose& Pose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.geometry_msgs.Point position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Point position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion orientation = 2;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Point position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::openbot_bridge::ros2_msgs::geometry_msgs::Point::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion::MergeFrom(from._internal_orientation());
  }
}

void Pose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, orientation_)
      + sizeof(Pose::orientation_)
      - PROTOBUF_FIELD_OFFSET(Pose, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PoseArray::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const PoseArray* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
PoseArray::_Internal::header(const PoseArray* msg) {
  return *msg->header_;
}
void PoseArray::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
PoseArray::PoseArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  poses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
}
PoseArray::PoseArray(const PoseArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      poses_(from.poses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
}

void PoseArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoseArray_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  header_ = nullptr;
}

PoseArray::~PoseArray() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoseArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void PoseArray::ArenaDtor(void* object) {
  PoseArray* _this = reinterpret_cast< PoseArray* >(object);
  (void)_this;
}
void PoseArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseArray& PoseArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseArray_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PoseArray::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poses_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Pose poses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Pose poses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_poses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_poses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
  return target;
}

size_t PoseArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Pose poses = 2;
  total_size += 1UL * this->_internal_poses_size();
  for (const auto& msg : this->poses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
    MergeFrom(*source);
  }
}

void PoseArray::MergeFrom(const PoseArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  poses_.MergeFrom(from.poses_);
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
}

void PoseArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseArray::CopyFrom(const PoseArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseArray::IsInitialized() const {
  return true;
}

void PoseArray::InternalSwap(PoseArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  poses_.InternalSwap(&other->poses_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PoseStamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const PoseStamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& pose(const PoseStamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
PoseStamped::_Internal::header(const PoseStamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&
PoseStamped::_Internal::pose(const PoseStamped* msg) {
  return *msg->pose_;
}
void PoseStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
PoseStamped::PoseStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
}
PoseStamped::PoseStamped(const PoseStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
}

void PoseStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoseStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pose_) -
      reinterpret_cast<char*>(&header_)) + sizeof(pose_));
}

PoseStamped::~PoseStamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoseStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
}

void PoseStamped::ArenaDtor(void* object) {
  PoseStamped* _this = reinterpret_cast< PoseStamped* >(object);
  (void)_this;
}
void PoseStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseStamped& PoseStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PoseStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
  return target;
}

size_t PoseStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
    MergeFrom(*source);
  }
}

void PoseStamped::MergeFrom(const PoseStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::openbot_bridge::ros2_msgs::geometry_msgs::Pose::MergeFrom(from._internal_pose());
  }
}

void PoseStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseStamped::CopyFrom(const PoseStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseStamped::IsInitialized() const {
  return true;
}

void PoseStamped::InternalSwap(PoseStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseStamped, pose_)
      + sizeof(PoseStamped::pose_)
      - PROTOBUF_FIELD_OFFSET(PoseStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PoseWithCovariance::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& pose(const PoseWithCovariance* msg);
};

const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&
PoseWithCovariance::_Internal::pose(const PoseWithCovariance* msg) {
  return *msg->pose_;
}
PoseWithCovariance::PoseWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  covariance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
}
PoseWithCovariance::PoseWithCovariance(const PoseWithCovariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      covariance_(from.covariance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
}

void PoseWithCovariance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoseWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  pose_ = nullptr;
}

PoseWithCovariance::~PoseWithCovariance() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoseWithCovariance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void PoseWithCovariance::ArenaDtor(void* object) {
  PoseWithCovariance* _this = reinterpret_cast< PoseWithCovariance* >(object);
  (void)_this;
}
void PoseWithCovariance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseWithCovariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseWithCovariance& PoseWithCovariance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PoseWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_.Clear();
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseWithCovariance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double covariance = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseWithCovariance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 1;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // repeated double covariance = 2 [packed = true];
  if (this->_internal_covariance_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
  return target;
}

size_t PoseWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double covariance = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseWithCovariance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseWithCovariance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseWithCovariance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
    MergeFrom(*source);
  }
}

void PoseWithCovariance::MergeFrom(const PoseWithCovariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_.MergeFrom(from.covariance_);
  if (from.has_pose()) {
    _internal_mutable_pose()->::openbot_bridge::ros2_msgs::geometry_msgs::Pose::MergeFrom(from._internal_pose());
  }
}

void PoseWithCovariance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseWithCovariance::CopyFrom(const PoseWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseWithCovariance::IsInitialized() const {
  return true;
}

void PoseWithCovariance::InternalSwap(PoseWithCovariance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  covariance_.InternalSwap(&other->covariance_);
  swap(pose_, other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseWithCovariance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PoseWithCovarianceStamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const PoseWithCovarianceStamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& pose(const PoseWithCovarianceStamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
PoseWithCovarianceStamped::_Internal::header(const PoseWithCovarianceStamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance&
PoseWithCovarianceStamped::_Internal::pose(const PoseWithCovarianceStamped* msg) {
  return *msg->pose_;
}
void PoseWithCovarianceStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
PoseWithCovarianceStamped::PoseWithCovarianceStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
}
PoseWithCovarianceStamped::PoseWithCovarianceStamped(const PoseWithCovarianceStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
}

void PoseWithCovarianceStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoseWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pose_) -
      reinterpret_cast<char*>(&header_)) + sizeof(pose_));
}

PoseWithCovarianceStamped::~PoseWithCovarianceStamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoseWithCovarianceStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
}

void PoseWithCovarianceStamped::ArenaDtor(void* object) {
  PoseWithCovarianceStamped* _this = reinterpret_cast< PoseWithCovarianceStamped* >(object);
  (void)_this;
}
void PoseWithCovarianceStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseWithCovarianceStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseWithCovarianceStamped& PoseWithCovarianceStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PoseWithCovarianceStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseWithCovarianceStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseWithCovarianceStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
  return target;
}

size_t PoseWithCovarianceStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseWithCovarianceStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseWithCovarianceStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseWithCovarianceStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
    MergeFrom(*source);
  }
}

void PoseWithCovarianceStamped::MergeFrom(const PoseWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance::MergeFrom(from._internal_pose());
  }
}

void PoseWithCovarianceStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseWithCovarianceStamped::CopyFrom(const PoseWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseWithCovarianceStamped::IsInitialized() const {
  return true;
}

void PoseWithCovarianceStamped::InternalSwap(PoseWithCovarianceStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseWithCovarianceStamped, pose_)
      + sizeof(PoseWithCovarianceStamped::pose_)
      - PROTOBUF_FIELD_OFFSET(PoseWithCovarianceStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseWithCovarianceStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
}

void Quaternion::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Quaternion::ArenaDtor(void* object) {
  Quaternion* _this = reinterpret_cast< Quaternion* >(object);
  (void)_this;
}
void Quaternion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quaternion& Quaternion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Quaternion_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double w = 4;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double w = 4;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
}

void Quaternion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, w_)
      + sizeof(Quaternion::w_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QuaternionStamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const QuaternionStamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& quaternion(const QuaternionStamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
QuaternionStamped::_Internal::header(const QuaternionStamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion&
QuaternionStamped::_Internal::quaternion(const QuaternionStamped* msg) {
  return *msg->quaternion_;
}
void QuaternionStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
QuaternionStamped::QuaternionStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
}
QuaternionStamped::QuaternionStamped(const QuaternionStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_quaternion()) {
    quaternion_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion(*from.quaternion_);
  } else {
    quaternion_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
}

void QuaternionStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuaternionStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&quaternion_) -
      reinterpret_cast<char*>(&header_)) + sizeof(quaternion_));
}

QuaternionStamped::~QuaternionStamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuaternionStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete quaternion_;
}

void QuaternionStamped::ArenaDtor(void* object) {
  QuaternionStamped* _this = reinterpret_cast< QuaternionStamped* >(object);
  (void)_this;
}
void QuaternionStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuaternionStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuaternionStamped& QuaternionStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuaternionStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void QuaternionStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && quaternion_ != nullptr) {
    delete quaternion_;
  }
  quaternion_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuaternionStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion quaternion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quaternion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuaternionStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion quaternion = 2;
  if (this->has_quaternion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quaternion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
  return target;
}

size_t QuaternionStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion quaternion = 2;
  if (this->has_quaternion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quaternion_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuaternionStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const QuaternionStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuaternionStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
    MergeFrom(*source);
  }
}

void QuaternionStamped::MergeFrom(const QuaternionStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_quaternion()) {
    _internal_mutable_quaternion()->::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion::MergeFrom(from._internal_quaternion());
  }
}

void QuaternionStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuaternionStamped::CopyFrom(const QuaternionStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuaternionStamped::IsInitialized() const {
  return true;
}

void QuaternionStamped::InternalSwap(QuaternionStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuaternionStamped, quaternion_)
      + sizeof(QuaternionStamped::quaternion_)
      - PROTOBUF_FIELD_OFFSET(QuaternionStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuaternionStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transform::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& translation(const Transform* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& rotation(const Transform* msg);
};

const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&
Transform::_Internal::translation(const Transform* msg) {
  return *msg->translation_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion&
Transform::_Internal::rotation(const Transform* msg) {
  return *msg->rotation_;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    translation_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
}

void Transform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transform_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&translation_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(rotation_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete rotation_;
}

void Transform::ArenaDtor(void* object) {
  Transform* _this = reinterpret_cast< Transform* >(object);
  (void)_this;
}
void Transform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transform& Transform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transform_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 translation = 1;
  if (this->has_translation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::translation(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion rotation = 2;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 translation = 1;
  if (this->has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  const Transform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_translation()) {
    _internal_mutable_translation()->::openbot_bridge::ros2_msgs::geometry_msgs::Vector3::MergeFrom(from._internal_translation());
  }
  if (from.has_rotation()) {
    _internal_mutable_rotation()->::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion::MergeFrom(from._internal_rotation());
  }
}

void Transform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, rotation_)
      + sizeof(Transform::rotation_)
      - PROTOBUF_FIELD_OFFSET(Transform, translation_)>(
          reinterpret_cast<char*>(&translation_),
          reinterpret_cast<char*>(&other->translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransformStamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const TransformStamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Transform& transform(const TransformStamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
TransformStamped::_Internal::header(const TransformStamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Transform&
TransformStamped::_Internal::transform(const TransformStamped* msg) {
  return *msg->transform_;
}
void TransformStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
TransformStamped::TransformStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
}
TransformStamped::TransformStamped(const TransformStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  child_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_child_frame_id().empty()) {
    child_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_child_frame_id(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_transform()) {
    transform_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
}

void TransformStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransformStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  child_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&transform_) -
      reinterpret_cast<char*>(&header_)) + sizeof(transform_));
}

TransformStamped::~TransformStamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransformStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  child_frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete transform_;
}

void TransformStamped::ArenaDtor(void* object) {
  TransformStamped* _this = reinterpret_cast< TransformStamped* >(object);
  (void)_this;
}
void TransformStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransformStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformStamped& TransformStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransformStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TransformStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_frame_id_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransformStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string child_frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_child_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.child_frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Transform transform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransformStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string child_frame_id = 2;
  if (this->child_frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_child_frame_id().data(), static_cast<int>(this->_internal_child_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.child_frame_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_child_frame_id(), target);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Transform transform = 3;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
  return target;
}

size_t TransformStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string child_frame_id = 2;
  if (this->child_frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_child_frame_id());
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Transform transform = 3;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransformStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
    MergeFrom(*source);
  }
}

void TransformStamped::MergeFrom(const TransformStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.child_frame_id().size() > 0) {
    _internal_set_child_frame_id(from._internal_child_frame_id());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_transform()) {
    _internal_mutable_transform()->::openbot_bridge::ros2_msgs::geometry_msgs::Transform::MergeFrom(from._internal_transform());
  }
}

void TransformStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformStamped::CopyFrom(const TransformStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformStamped::IsInitialized() const {
  return true;
}

void TransformStamped::InternalSwap(TransformStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  child_frame_id_.Swap(&other->child_frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransformStamped, transform_)
      + sizeof(TransformStamped::transform_)
      - PROTOBUF_FIELD_OFFSET(TransformStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Twist::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& linear(const Twist* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& angular(const Twist* msg);
};

const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&
Twist::_Internal::linear(const Twist* msg) {
  return *msg->linear_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&
Twist::_Internal::angular(const Twist* msg) {
  return *msg->angular_;
}
Twist::Twist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
}
Twist::Twist(const Twist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear()) {
    linear_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3(*from.linear_);
  } else {
    linear_ = nullptr;
  }
  if (from._internal_has_angular()) {
    angular_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3(*from.angular_);
  } else {
    angular_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
}

void Twist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Twist_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&linear_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
}

Twist::~Twist() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Twist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete linear_;
  if (this != internal_default_instance()) delete angular_;
}

void Twist::ArenaDtor(void* object) {
  Twist* _this = reinterpret_cast< Twist* >(object);
  (void)_this;
}
void Twist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Twist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Twist& Twist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Twist_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Twist::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
  if (GetArena() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Twist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 linear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 angular = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Twist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 linear = 1;
  if (this->has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 angular = 2;
  if (this->has_angular()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
  return target;
}

size_t Twist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 linear = 1;
  if (this->has_linear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 angular = 2;
  if (this->has_angular()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Twist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
  GOOGLE_DCHECK_NE(&from, this);
  const Twist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Twist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
    MergeFrom(*source);
  }
}

void Twist::MergeFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear()) {
    _internal_mutable_linear()->::openbot_bridge::ros2_msgs::geometry_msgs::Vector3::MergeFrom(from._internal_linear());
  }
  if (from.has_angular()) {
    _internal_mutable_angular()->::openbot_bridge::ros2_msgs::geometry_msgs::Vector3::MergeFrom(from._internal_angular());
  }
}

void Twist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Twist::CopyFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Twist::IsInitialized() const {
  return true;
}

void Twist::InternalSwap(Twist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Twist, angular_)
      + sizeof(Twist::angular_)
      - PROTOBUF_FIELD_OFFSET(Twist, linear_)>(
          reinterpret_cast<char*>(&linear_),
          reinterpret_cast<char*>(&other->linear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Twist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TwistStamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const TwistStamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& twist(const TwistStamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
TwistStamped::_Internal::header(const TwistStamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist&
TwistStamped::_Internal::twist(const TwistStamped* msg) {
  return *msg->twist_;
}
void TwistStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
TwistStamped::TwistStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
}
TwistStamped::TwistStamped(const TwistStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_twist()) {
    twist_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Twist(*from.twist_);
  } else {
    twist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
}

void TwistStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TwistStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&twist_) -
      reinterpret_cast<char*>(&header_)) + sizeof(twist_));
}

TwistStamped::~TwistStamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TwistStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete twist_;
}

void TwistStamped::ArenaDtor(void* object) {
  TwistStamped* _this = reinterpret_cast< TwistStamped* >(object);
  (void)_this;
}
void TwistStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TwistStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TwistStamped& TwistStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TwistStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TwistStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && twist_ != nullptr) {
    delete twist_;
  }
  twist_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TwistStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Twist twist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_twist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TwistStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Twist twist = 2;
  if (this->has_twist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::twist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
  return target;
}

size_t TwistStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Twist twist = 2;
  if (this->has_twist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *twist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TwistStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const TwistStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TwistStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
    MergeFrom(*source);
  }
}

void TwistStamped::MergeFrom(const TwistStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_twist()) {
    _internal_mutable_twist()->::openbot_bridge::ros2_msgs::geometry_msgs::Twist::MergeFrom(from._internal_twist());
  }
}

void TwistStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwistStamped::CopyFrom(const TwistStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwistStamped::IsInitialized() const {
  return true;
}

void TwistStamped::InternalSwap(TwistStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TwistStamped, twist_)
      + sizeof(TwistStamped::twist_)
      - PROTOBUF_FIELD_OFFSET(TwistStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TwistStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TwistWithCovariance::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& twist(const TwistWithCovariance* msg);
};

const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist&
TwistWithCovariance::_Internal::twist(const TwistWithCovariance* msg) {
  return *msg->twist_;
}
TwistWithCovariance::TwistWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  covariance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
}
TwistWithCovariance::TwistWithCovariance(const TwistWithCovariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      covariance_(from.covariance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_twist()) {
    twist_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Twist(*from.twist_);
  } else {
    twist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
}

void TwistWithCovariance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TwistWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  twist_ = nullptr;
}

TwistWithCovariance::~TwistWithCovariance() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TwistWithCovariance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete twist_;
}

void TwistWithCovariance::ArenaDtor(void* object) {
  TwistWithCovariance* _this = reinterpret_cast< TwistWithCovariance* >(object);
  (void)_this;
}
void TwistWithCovariance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TwistWithCovariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TwistWithCovariance& TwistWithCovariance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TwistWithCovariance_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TwistWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_.Clear();
  if (GetArena() == nullptr && twist_ != nullptr) {
    delete twist_;
  }
  twist_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TwistWithCovariance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.geometry_msgs.Twist twist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_twist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double covariance = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TwistWithCovariance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Twist twist = 1;
  if (this->has_twist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::twist(this), target, stream);
  }

  // repeated double covariance = 2 [packed = true];
  if (this->_internal_covariance_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
  return target;
}

size_t TwistWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double covariance = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Twist twist = 1;
  if (this->has_twist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *twist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TwistWithCovariance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  const TwistWithCovariance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TwistWithCovariance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
    MergeFrom(*source);
  }
}

void TwistWithCovariance::MergeFrom(const TwistWithCovariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_.MergeFrom(from.covariance_);
  if (from.has_twist()) {
    _internal_mutable_twist()->::openbot_bridge::ros2_msgs::geometry_msgs::Twist::MergeFrom(from._internal_twist());
  }
}

void TwistWithCovariance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwistWithCovariance::CopyFrom(const TwistWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwistWithCovariance::IsInitialized() const {
  return true;
}

void TwistWithCovariance::InternalSwap(TwistWithCovariance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  covariance_.InternalSwap(&other->covariance_);
  swap(twist_, other->twist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TwistWithCovariance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TwistWithCovarianceStamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const TwistWithCovarianceStamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance& twist(const TwistWithCovarianceStamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
TwistWithCovarianceStamped::_Internal::header(const TwistWithCovarianceStamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance&
TwistWithCovarianceStamped::_Internal::twist(const TwistWithCovarianceStamped* msg) {
  return *msg->twist_;
}
void TwistWithCovarianceStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
TwistWithCovarianceStamped::TwistWithCovarianceStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
}
TwistWithCovarianceStamped::TwistWithCovarianceStamped(const TwistWithCovarianceStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_twist()) {
    twist_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance(*from.twist_);
  } else {
    twist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
}

void TwistWithCovarianceStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TwistWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&twist_) -
      reinterpret_cast<char*>(&header_)) + sizeof(twist_));
}

TwistWithCovarianceStamped::~TwistWithCovarianceStamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TwistWithCovarianceStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete twist_;
}

void TwistWithCovarianceStamped::ArenaDtor(void* object) {
  TwistWithCovarianceStamped* _this = reinterpret_cast< TwistWithCovarianceStamped* >(object);
  (void)_this;
}
void TwistWithCovarianceStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TwistWithCovarianceStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TwistWithCovarianceStamped& TwistWithCovarianceStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TwistWithCovarianceStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TwistWithCovarianceStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && twist_ != nullptr) {
    delete twist_;
  }
  twist_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TwistWithCovarianceStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance twist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_twist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TwistWithCovarianceStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance twist = 2;
  if (this->has_twist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::twist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
  return target;
}

size_t TwistWithCovarianceStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance twist = 2;
  if (this->has_twist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *twist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TwistWithCovarianceStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const TwistWithCovarianceStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TwistWithCovarianceStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
    MergeFrom(*source);
  }
}

void TwistWithCovarianceStamped::MergeFrom(const TwistWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_twist()) {
    _internal_mutable_twist()->::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance::MergeFrom(from._internal_twist());
  }
}

void TwistWithCovarianceStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwistWithCovarianceStamped::CopyFrom(const TwistWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwistWithCovarianceStamped::IsInitialized() const {
  return true;
}

void TwistWithCovarianceStamped::InternalSwap(TwistWithCovarianceStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TwistWithCovarianceStamped, twist_)
      + sizeof(TwistWithCovarianceStamped::twist_)
      - PROTOBUF_FIELD_OFFSET(TwistWithCovarianceStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TwistWithCovarianceStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
}

void Vector3::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3::ArenaDtor(void* object) {
  Vector3* _this = reinterpret_cast< Vector3* >(object);
  (void)_this;
}
void Vector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector3& Vector3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_)
      + sizeof(Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vector3Stamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const Vector3Stamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& vector(const Vector3Stamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
Vector3Stamped::_Internal::header(const Vector3Stamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&
Vector3Stamped::_Internal::vector(const Vector3Stamped* msg) {
  return *msg->vector_;
}
void Vector3Stamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Vector3Stamped::Vector3Stamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
}
Vector3Stamped::Vector3Stamped(const Vector3Stamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_vector()) {
    vector_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3(*from.vector_);
  } else {
    vector_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
}

void Vector3Stamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vector3Stamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vector_) -
      reinterpret_cast<char*>(&header_)) + sizeof(vector_));
}

Vector3Stamped::~Vector3Stamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3Stamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete vector_;
}

void Vector3Stamped::ArenaDtor(void* object) {
  Vector3Stamped* _this = reinterpret_cast< Vector3Stamped* >(object);
  (void)_this;
}
void Vector3Stamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3Stamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector3Stamped& Vector3Stamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector3Stamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Vector3Stamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && vector_ != nullptr) {
    delete vector_;
  }
  vector_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3Stamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3Stamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 vector = 2;
  if (this->has_vector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vector(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
  return target;
}

size_t Vector3Stamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 vector = 2;
  if (this->has_vector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vector_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3Stamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3Stamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3Stamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
    MergeFrom(*source);
  }
}

void Vector3Stamped::MergeFrom(const Vector3Stamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_vector()) {
    _internal_mutable_vector()->::openbot_bridge::ros2_msgs::geometry_msgs::Vector3::MergeFrom(from._internal_vector());
  }
}

void Vector3Stamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3Stamped::CopyFrom(const Vector3Stamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3Stamped::IsInitialized() const {
  return true;
}

void Vector3Stamped::InternalSwap(Vector3Stamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3Stamped, vector_)
      + sizeof(Vector3Stamped::vector_)
      - PROTOBUF_FIELD_OFFSET(Vector3Stamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3Stamped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Wrench::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& force(const Wrench* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& torque(const Wrench* msg);
};

const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&
Wrench::_Internal::force(const Wrench* msg) {
  return *msg->force_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&
Wrench::_Internal::torque(const Wrench* msg) {
  return *msg->torque_;
}
Wrench::Wrench(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
}
Wrench::Wrench(const Wrench& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_force()) {
    force_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3(*from.force_);
  } else {
    force_ = nullptr;
  }
  if (from._internal_has_torque()) {
    torque_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3(*from.torque_);
  } else {
    torque_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
}

void Wrench::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Wrench_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&force_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&torque_) -
      reinterpret_cast<char*>(&force_)) + sizeof(torque_));
}

Wrench::~Wrench() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Wrench::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete force_;
  if (this != internal_default_instance()) delete torque_;
}

void Wrench::ArenaDtor(void* object) {
  Wrench* _this = reinterpret_cast< Wrench* >(object);
  (void)_this;
}
void Wrench::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Wrench::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wrench& Wrench::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wrench_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Wrench::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
  if (GetArena() == nullptr && torque_ != nullptr) {
    delete torque_;
  }
  torque_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wrench::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 force = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_force(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 torque = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_torque(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wrench::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 force = 1;
  if (this->has_force()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::force(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 torque = 2;
  if (this->has_torque()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::torque(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
  return target;
}

size_t Wrench::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 force = 1;
  if (this->has_force()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *force_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 torque = 2;
  if (this->has_torque()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *torque_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wrench::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
  GOOGLE_DCHECK_NE(&from, this);
  const Wrench* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wrench>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
    MergeFrom(*source);
  }
}

void Wrench::MergeFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_force()) {
    _internal_mutable_force()->::openbot_bridge::ros2_msgs::geometry_msgs::Vector3::MergeFrom(from._internal_force());
  }
  if (from.has_torque()) {
    _internal_mutable_torque()->::openbot_bridge::ros2_msgs::geometry_msgs::Vector3::MergeFrom(from._internal_torque());
  }
}

void Wrench::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wrench::CopyFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wrench::IsInitialized() const {
  return true;
}

void Wrench::InternalSwap(Wrench* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wrench, torque_)
      + sizeof(Wrench::torque_)
      - PROTOBUF_FIELD_OFFSET(Wrench, force_)>(
          reinterpret_cast<char*>(&force_),
          reinterpret_cast<char*>(&other->force_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Wrench::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WrenchStamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const WrenchStamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench& wrench(const WrenchStamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
WrenchStamped::_Internal::header(const WrenchStamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench&
WrenchStamped::_Internal::wrench(const WrenchStamped* msg) {
  return *msg->wrench_;
}
void WrenchStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
WrenchStamped::WrenchStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
}
WrenchStamped::WrenchStamped(const WrenchStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_wrench()) {
    wrench_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench(*from.wrench_);
  } else {
    wrench_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
}

void WrenchStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WrenchStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&wrench_) -
      reinterpret_cast<char*>(&header_)) + sizeof(wrench_));
}

WrenchStamped::~WrenchStamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WrenchStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete wrench_;
}

void WrenchStamped::ArenaDtor(void* object) {
  WrenchStamped* _this = reinterpret_cast< WrenchStamped* >(object);
  (void)_this;
}
void WrenchStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WrenchStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WrenchStamped& WrenchStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WrenchStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void WrenchStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && wrench_ != nullptr) {
    delete wrench_;
  }
  wrench_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WrenchStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Wrench wrench = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_wrench(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WrenchStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Wrench wrench = 2;
  if (this->has_wrench()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::wrench(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
  return target;
}

size_t WrenchStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Wrench wrench = 2;
  if (this->has_wrench()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wrench_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrenchStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const WrenchStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WrenchStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
    MergeFrom(*source);
  }
}

void WrenchStamped::MergeFrom(const WrenchStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_wrench()) {
    _internal_mutable_wrench()->::openbot_bridge::ros2_msgs::geometry_msgs::Wrench::MergeFrom(from._internal_wrench());
  }
}

void WrenchStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrenchStamped::CopyFrom(const WrenchStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrenchStamped::IsInitialized() const {
  return true;
}

void WrenchStamped::InternalSwap(WrenchStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WrenchStamped, wrench_)
      + sizeof(WrenchStamped::wrench_)
      - PROTOBUF_FIELD_OFFSET(WrenchStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WrenchStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VelocityStamped::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const VelocityStamped* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& velocity(const VelocityStamped* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
VelocityStamped::_Internal::header(const VelocityStamped* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist&
VelocityStamped::_Internal::velocity(const VelocityStamped* msg) {
  return *msg->velocity_;
}
void VelocityStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
VelocityStamped::VelocityStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
}
VelocityStamped::VelocityStamped(const VelocityStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  body_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body_frame_id().empty()) {
    body_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body_frame_id(), 
      GetArena());
  }
  reference_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_frame_id().empty()) {
    reference_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference_frame_id(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Twist(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
}

void VelocityStamped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VelocityStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  body_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&velocity_) -
      reinterpret_cast<char*>(&header_)) + sizeof(velocity_));
}

VelocityStamped::~VelocityStamped() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VelocityStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  body_frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete velocity_;
}

void VelocityStamped::ArenaDtor(void* object) {
  VelocityStamped* _this = reinterpret_cast< VelocityStamped* >(object);
  (void)_this;
}
void VelocityStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VelocityStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VelocityStamped& VelocityStamped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VelocityStamped_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void VelocityStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_frame_id_.ClearToEmpty();
  reference_frame_id_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VelocityStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string body_frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_body_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.body_frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference_frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reference_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.reference_frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Twist velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VelocityStamped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string body_frame_id = 2;
  if (this->body_frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body_frame_id().data(), static_cast<int>(this->_internal_body_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.body_frame_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body_frame_id(), target);
  }

  // string reference_frame_id = 3;
  if (this->reference_frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_frame_id().data(), static_cast<int>(this->_internal_reference_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.reference_frame_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reference_frame_id(), target);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Twist velocity = 4;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
  return target;
}

size_t VelocityStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string body_frame_id = 2;
  if (this->body_frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body_frame_id());
  }

  // string reference_frame_id = 3;
  if (this->reference_frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_frame_id());
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Twist velocity = 4;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelocityStamped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const VelocityStamped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelocityStamped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
    MergeFrom(*source);
  }
}

void VelocityStamped::MergeFrom(const VelocityStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body_frame_id().size() > 0) {
    _internal_set_body_frame_id(from._internal_body_frame_id());
  }
  if (from.reference_frame_id().size() > 0) {
    _internal_set_reference_frame_id(from._internal_reference_frame_id());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::openbot_bridge::ros2_msgs::geometry_msgs::Twist::MergeFrom(from._internal_velocity());
  }
}

void VelocityStamped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityStamped::CopyFrom(const VelocityStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityStamped::IsInitialized() const {
  return true;
}

void VelocityStamped::InternalSwap(VelocityStamped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  body_frame_id_.Swap(&other->body_frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_frame_id_.Swap(&other->reference_frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelocityStamped, velocity_)
      + sizeof(VelocityStamped::velocity_)
      - PROTOBUF_FIELD_OFFSET(VelocityStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VelocityStamped::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace geometry_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::Accel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::Accel >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::AccelStamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::AccelStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::AccelStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovarianceStamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovarianceStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovarianceStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::InertiaStamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::InertiaStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::InertiaStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::Point* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::PointStamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::PointStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::PointStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::Point32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::Point32 >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::PolygonStamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::PolygonStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::PolygonStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::Pose2D* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::Pose2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::Pose2D >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::PoseArray* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::PoseArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::PoseArray >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovarianceStamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovarianceStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovarianceStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::QuaternionStamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::QuaternionStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::QuaternionStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::TransformStamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::TransformStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::TransformStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::Twist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::Twist >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::TwistStamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::TwistStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::TwistStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovarianceStamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovarianceStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovarianceStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3Stamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3Stamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3Stamped >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::WrenchStamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::WrenchStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::WrenchStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::geometry_msgs::VelocityStamped* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::geometry_msgs::VelocityStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::geometry_msgs::VelocityStamped >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
