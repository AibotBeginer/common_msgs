// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/ros2_msgs/visualization_msgs.proto

#include "openbot_bridge/ros2_msgs/visualization_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fbuiltin_5finterfaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Duration_openbot_5fbridge_2fros2_5fmsgs_2fbuiltin_5finterfaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompressedImage_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorRGBA_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_InteractiveMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InteractiveMarkerControl_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InteractiveMarkerPose_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Marker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MenuEntry_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeshFile_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UVCoordinate_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
namespace openbot_bridge {
namespace ros2_msgs {
namespace visualization_msgs {
class ImageMarkerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageMarker> _instance;
} _ImageMarker_default_instance_;
class InteractiveMarkerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InteractiveMarker> _instance;
} _InteractiveMarker_default_instance_;
class InteractiveMarkerControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InteractiveMarkerControl> _instance;
} _InteractiveMarkerControl_default_instance_;
class InteractiveMarkerFeedbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InteractiveMarkerFeedback> _instance;
} _InteractiveMarkerFeedback_default_instance_;
class InteractiveMarkerInitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InteractiveMarkerInit> _instance;
} _InteractiveMarkerInit_default_instance_;
class InteractiveMarkerPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InteractiveMarkerPose> _instance;
} _InteractiveMarkerPose_default_instance_;
class InteractiveMarkerUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InteractiveMarkerUpdate> _instance;
} _InteractiveMarkerUpdate_default_instance_;
class MarkerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Marker> _instance;
} _Marker_default_instance_;
class MarkerArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarkerArray> _instance;
} _MarkerArray_default_instance_;
class MenuEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MenuEntry> _instance;
} _MenuEntry_default_instance_;
class MeshFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshFile> _instance;
} _MeshFile_default_instance_;
class UVCoordinateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UVCoordinate> _instance;
} _UVCoordinate_default_instance_;
}  // namespace visualization_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
static void InitDefaultsscc_info_ImageMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::visualization_msgs::_ImageMarker_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ImageMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ImageMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Point_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
      &scc_info_ColorRGBA_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Duration_openbot_5fbridge_2fros2_5fmsgs_2fbuiltin_5finterfaces_2eproto.base,}};

static void InitDefaultsscc_info_InteractiveMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::visualization_msgs::_InteractiveMarker_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_InteractiveMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_InteractiveMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
      &scc_info_MenuEntry_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
      &scc_info_InteractiveMarkerControl_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_InteractiveMarkerControl_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::visualization_msgs::_InteractiveMarkerControl_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InteractiveMarkerControl_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InteractiveMarkerControl_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto}, {
      &scc_info_Quaternion_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
      &scc_info_Marker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_InteractiveMarkerFeedback_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::visualization_msgs::_InteractiveMarkerFeedback_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InteractiveMarkerFeedback_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_InteractiveMarkerFeedback_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
      &scc_info_Point_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_InteractiveMarkerInit_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::visualization_msgs::_InteractiveMarkerInit_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerInit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InteractiveMarkerInit_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InteractiveMarkerInit_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto}, {
      &scc_info_InteractiveMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_InteractiveMarkerPose_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::visualization_msgs::_InteractiveMarkerPose_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InteractiveMarkerPose_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InteractiveMarkerPose_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_InteractiveMarkerUpdate_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::visualization_msgs::_InteractiveMarkerUpdate_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InteractiveMarkerUpdate_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InteractiveMarkerUpdate_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto}, {
      &scc_info_InteractiveMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
      &scc_info_InteractiveMarkerPose_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Marker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::visualization_msgs::_Marker_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::visualization_msgs::Marker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Marker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_Marker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Pose_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
      &scc_info_Vector3_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
      &scc_info_ColorRGBA_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_Duration_openbot_5fbridge_2fros2_5fmsgs_2fbuiltin_5finterfaces_2eproto.base,
      &scc_info_Point_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.base,
      &scc_info_CompressedImage_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.base,
      &scc_info_UVCoordinate_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
      &scc_info_MeshFile_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MarkerArray_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::visualization_msgs::_MarkerArray_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::visualization_msgs::MarkerArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarkerArray_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarkerArray_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto}, {
      &scc_info_Marker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MenuEntry_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::visualization_msgs::_MenuEntry_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MenuEntry_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MenuEntry_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MeshFile_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::visualization_msgs::_MeshFile_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeshFile_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MeshFile_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_UVCoordinate_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::visualization_msgs::_UVCoordinate_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UVCoordinate_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UVCoordinate_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, ns_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, type_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, action_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, position_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, scale_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, outline_color_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, filled_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, fill_color_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, lifetime_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, points_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker, outline_colors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker, pose_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker, name_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker, description_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker, scale_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker, menu_entries_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker, controls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl, name_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl, orientation_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl, orientation_mode_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl, interaction_mode_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl, always_visible_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl, markers_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl, independent_marker_orientation_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback, client_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback, marker_name_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback, control_name_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback, event_type_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback, pose_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback, menu_entry_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback, mouse_point_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback, mouse_point_valid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerInit, server_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerInit, seq_num_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerInit, markers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose, pose_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate, server_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate, seq_num_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate, type_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate, markers_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate, poses_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate, erases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, ns_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, type_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, action_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, pose_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, scale_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, color_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, lifetime_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, frame_locked_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, points_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, colors_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, texture_resource_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, texture_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, uv_coordinates_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, text_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, mesh_resource_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, mesh_file_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::Marker, mesh_use_embedded_materials_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::MarkerArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::MarkerArray, markers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry, id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry, parent_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry, title_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry, command_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry, command_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile, filename_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate, u_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate, v_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker)},
  { 18, -1, sizeof(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker)},
  { 30, -1, sizeof(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl)},
  { 43, -1, sizeof(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback)},
  { 57, -1, sizeof(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerInit)},
  { 65, -1, sizeof(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose)},
  { 73, -1, sizeof(::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate)},
  { 84, -1, sizeof(::openbot_bridge::ros2_msgs::visualization_msgs::Marker)},
  { 108, -1, sizeof(::openbot_bridge::ros2_msgs::visualization_msgs::MarkerArray)},
  { 114, -1, sizeof(::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry)},
  { 124, -1, sizeof(::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile)},
  { 131, -1, sizeof(::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::visualization_msgs::_ImageMarker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::visualization_msgs::_InteractiveMarker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::visualization_msgs::_InteractiveMarkerControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::visualization_msgs::_InteractiveMarkerFeedback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::visualization_msgs::_InteractiveMarkerInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::visualization_msgs::_InteractiveMarkerPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::visualization_msgs::_InteractiveMarkerUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::visualization_msgs::_Marker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::visualization_msgs::_MarkerArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::visualization_msgs::_MenuEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::visualization_msgs::_MeshFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::visualization_msgs::_UVCoordinate_default_instance_),
};

const char descriptor_table_protodef_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1openbot_bridge/ros2_msgs/visualization"
  "_msgs.proto\022+openbot_bridge.ros2_msgs.vi"
  "sualization_msgs\032\'openbot_bridge/ros2_ms"
  "gs/std_msgs.proto\032*openbot_bridge/ros2_m"
  "sgs/sensor_msgs.proto\032,openbot_bridge/ro"
  "s2_msgs/geometry_msgs.proto\0321openbot_bri"
  "dge/ros2_msgs/builtin_interfaces.proto\"\263"
  "\004\n\013ImageMarker\0229\n\006header\030\001 \001(\0132).openbot"
  "_bridge.ros2_msgs.std_msgs.Header\022\n\n\002ns\030"
  "\002 \001(\t\022\n\n\002id\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\022\016\n\006actio"
  "n\030\005 \001(\005\022\?\n\010position\030\006 \001(\0132-.openbot_brid"
  "ge.ros2_msgs.geometry_msgs.Point\022\r\n\005scal"
  "e\030\007 \001(\001\022C\n\routline_color\030\010 \001(\0132,.openbot"
  "_bridge.ros2_msgs.std_msgs.ColorRGBA\022\016\n\006"
  "filled\030\t \001(\r\022@\n\nfill_color\030\n \001(\0132,.openb"
  "ot_bridge.ros2_msgs.std_msgs.ColorRGBA\022G"
  "\n\010lifetime\030\013 \001(\01325.openbot_bridge.ros2_m"
  "sgs.builtin_interfaces.Duration\022=\n\006point"
  "s\030\014 \003(\0132-.openbot_bridge.ros2_msgs.geome"
  "try_msgs.Point\022D\n\016outline_colors\030\r \003(\0132,"
  ".openbot_bridge.ros2_msgs.std_msgs.Color"
  "RGBA\"\343\002\n\021InteractiveMarker\0229\n\006header\030\001 \001"
  "(\0132).openbot_bridge.ros2_msgs.std_msgs.H"
  "eader\022:\n\004pose\030\002 \001(\0132,.openbot_bridge.ros"
  "2_msgs.geometry_msgs.Pose\022\014\n\004name\030\003 \001(\t\022"
  "\023\n\013description\030\004 \001(\t\022\r\n\005scale\030\005 \001(\001\022L\n\014m"
  "enu_entries\030\006 \003(\01326.openbot_bridge.ros2_"
  "msgs.visualization_msgs.MenuEntry\022W\n\010con"
  "trols\030\007 \003(\0132E.openbot_bridge.ros2_msgs.v"
  "isualization_msgs.InteractiveMarkerContr"
  "ol\"\300\002\n\030InteractiveMarkerControl\022\014\n\004name\030"
  "\001 \001(\t\022G\n\013orientation\030\002 \001(\01322.openbot_bri"
  "dge.ros2_msgs.geometry_msgs.Quaternion\022\030"
  "\n\020orientation_mode\030\003 \001(\r\022\030\n\020interaction_"
  "mode\030\004 \001(\r\022\026\n\016always_visible\030\005 \001(\010\022D\n\007ma"
  "rkers\030\006 \003(\01323.openbot_bridge.ros2_msgs.v"
  "isualization_msgs.Marker\022&\n\036independent_"
  "marker_orientation\030\007 \001(\010\022\023\n\013description\030"
  "\010 \001(\t\"\332\002\n\031InteractiveMarkerFeedback\0229\n\006h"
  "eader\030\001 \001(\0132).openbot_bridge.ros2_msgs.s"
  "td_msgs.Header\022\021\n\tclient_id\030\002 \001(\t\022\023\n\013mar"
  "ker_name\030\003 \001(\t\022\024\n\014control_name\030\004 \001(\t\022\022\n\n"
  "event_type\030\005 \001(\r\022:\n\004pose\030\006 \001(\0132,.openbot"
  "_bridge.ros2_msgs.geometry_msgs.Pose\022\025\n\r"
  "menu_entry_id\030\007 \001(\r\022B\n\013mouse_point\030\010 \001(\013"
  "2-.openbot_bridge.ros2_msgs.geometry_msg"
  "s.Point\022\031\n\021mouse_point_valid\030\t \001(\010\"\214\001\n\025I"
  "nteractiveMarkerInit\022\021\n\tserver_id\030\001 \001(\t\022"
  "\017\n\007seq_num\030\002 \001(\004\022O\n\007markers\030\003 \003(\0132>.open"
  "bot_bridge.ros2_msgs.visualization_msgs."
  "InteractiveMarker\"\234\001\n\025InteractiveMarkerP"
  "ose\0229\n\006header\030\001 \001(\0132).openbot_bridge.ros"
  "2_msgs.std_msgs.Header\022:\n\004pose\030\002 \001(\0132,.o"
  "penbot_bridge.ros2_msgs.geometry_msgs.Po"
  "se\022\014\n\004name\030\003 \001(\t\"\377\001\n\027InteractiveMarkerUp"
  "date\022\021\n\tserver_id\030\001 \001(\t\022\017\n\007seq_num\030\002 \001(\004"
  "\022\014\n\004type\030\003 \001(\r\022O\n\007markers\030\004 \003(\0132>.openbo"
  "t_bridge.ros2_msgs.visualization_msgs.In"
  "teractiveMarker\022Q\n\005poses\030\005 \003(\0132B.openbot"
  "_bridge.ros2_msgs.visualization_msgs.Int"
  "eractiveMarkerPose\022\016\n\006erases\030\006 \003(\t\"\327\006\n\006M"
  "arker\0229\n\006header\030\001 \001(\0132).openbot_bridge.r"
  "os2_msgs.std_msgs.Header\022\n\n\002ns\030\002 \001(\t\022\n\n\002"
  "id\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\022\016\n\006action\030\005 \001(\005\022:"
  "\n\004pose\030\006 \001(\0132,.openbot_bridge.ros2_msgs."
  "geometry_msgs.Pose\022>\n\005scale\030\007 \001(\0132/.open"
  "bot_bridge.ros2_msgs.geometry_msgs.Vecto"
  "r3\022;\n\005color\030\010 \001(\0132,.openbot_bridge.ros2_"
  "msgs.std_msgs.ColorRGBA\022G\n\010lifetime\030\t \001("
  "\01325.openbot_bridge.ros2_msgs.builtin_int"
  "erfaces.Duration\022\024\n\014frame_locked\030\n \001(\010\022="
  "\n\006points\030\013 \003(\0132-.openbot_bridge.ros2_msg"
  "s.geometry_msgs.Point\022<\n\006colors\030\014 \003(\0132,."
  "openbot_bridge.ros2_msgs.std_msgs.ColorR"
  "GBA\022\030\n\020texture_resource\030\r \001(\t\022F\n\007texture"
  "\030\016 \001(\01325.openbot_bridge.ros2_msgs.sensor"
  "_msgs.CompressedImage\022Q\n\016uv_coordinates\030"
  "\017 \003(\01329.openbot_bridge.ros2_msgs.visuali"
  "zation_msgs.UVCoordinate\022\014\n\004text\030\020 \001(\t\022\025"
  "\n\rmesh_resource\030\021 \001(\t\022H\n\tmesh_file\030\022 \001(\013"
  "25.openbot_bridge.ros2_msgs.visualizatio"
  "n_msgs.MeshFile\022#\n\033mesh_use_embedded_mat"
  "erials\030\023 \001(\010\"S\n\013MarkerArray\022D\n\007markers\030\001"
  " \003(\01323.openbot_bridge.ros2_msgs.visualiz"
  "ation_msgs.Marker\"`\n\tMenuEntry\022\n\n\002id\030\001 \001"
  "(\r\022\021\n\tparent_id\030\002 \001(\r\022\r\n\005title\030\003 \001(\t\022\017\n\007"
  "command\030\004 \001(\t\022\024\n\014command_type\030\005 \001(\r\"*\n\010M"
  "eshFile\022\020\n\010filename\030\001 \001(\t\022\014\n\004data\030\002 \003(\r\""
  "$\n\014UVCoordinate\022\t\n\001u\030\001 \001(\001\022\t\n\001v\030\002 \001(\001b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto_deps[4] = {
  &::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fbuiltin_5finterfaces_2eproto,
  &::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto,
  &::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto,
  &::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto_sccs[12] = {
  &scc_info_ImageMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
  &scc_info_InteractiveMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
  &scc_info_InteractiveMarkerControl_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
  &scc_info_InteractiveMarkerFeedback_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
  &scc_info_InteractiveMarkerInit_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
  &scc_info_InteractiveMarkerPose_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
  &scc_info_InteractiveMarkerUpdate_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
  &scc_info_Marker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
  &scc_info_MarkerArray_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
  &scc_info_MenuEntry_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
  &scc_info_MeshFile_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
  &scc_info_UVCoordinate_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto = {
  false, false, descriptor_table_protodef_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto, "openbot_bridge/ros2_msgs/visualization_msgs.proto", 3565,
  &descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto_once, descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto_sccs, descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto_deps, 12, 4,
  schemas, file_default_instances, TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto::offsets,
  file_level_metadata_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto, 12, file_level_enum_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto, file_level_service_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto)), true);
namespace openbot_bridge {
namespace ros2_msgs {
namespace visualization_msgs {

// ===================================================================

class ImageMarker::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const ImageMarker* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& position(const ImageMarker* msg);
  static const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& outline_color(const ImageMarker* msg);
  static const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& fill_color(const ImageMarker* msg);
  static const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration& lifetime(const ImageMarker* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
ImageMarker::_Internal::header(const ImageMarker* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Point&
ImageMarker::_Internal::position(const ImageMarker* msg) {
  return *msg->position_;
}
const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA&
ImageMarker::_Internal::outline_color(const ImageMarker* msg) {
  return *msg->outline_color_;
}
const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA&
ImageMarker::_Internal::fill_color(const ImageMarker* msg) {
  return *msg->fill_color_;
}
const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration&
ImageMarker::_Internal::lifetime(const ImageMarker* msg) {
  return *msg->lifetime_;
}
void ImageMarker::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void ImageMarker::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void ImageMarker::clear_outline_color() {
  if (GetArena() == nullptr && outline_color_ != nullptr) {
    delete outline_color_;
  }
  outline_color_ = nullptr;
}
void ImageMarker::clear_fill_color() {
  if (GetArena() == nullptr && fill_color_ != nullptr) {
    delete fill_color_;
  }
  fill_color_ = nullptr;
}
void ImageMarker::clear_lifetime() {
  if (GetArena() == nullptr && lifetime_ != nullptr) {
    delete lifetime_;
  }
  lifetime_ = nullptr;
}
void ImageMarker::clear_points() {
  points_.Clear();
}
void ImageMarker::clear_outline_colors() {
  outline_colors_.Clear();
}
ImageMarker::ImageMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena),
  outline_colors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
}
ImageMarker::ImageMarker(const ImageMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_),
      outline_colors_(from.outline_colors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ns().empty()) {
    ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ns(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Point(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_outline_color()) {
    outline_color_ = new ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA(*from.outline_color_);
  } else {
    outline_color_ = nullptr;
  }
  if (from._internal_has_fill_color()) {
    fill_color_ = new ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA(*from.fill_color_);
  } else {
    fill_color_ = nullptr;
  }
  if (from._internal_has_lifetime()) {
    lifetime_ = new ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration(*from.lifetime_);
  } else {
    lifetime_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&filled_) -
    reinterpret_cast<char*>(&id_)) + sizeof(filled_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
}

void ImageMarker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  ns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&filled_) -
      reinterpret_cast<char*>(&header_)) + sizeof(filled_));
}

ImageMarker::~ImageMarker() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageMarker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ns_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete outline_color_;
  if (this != internal_default_instance()) delete fill_color_;
  if (this != internal_default_instance()) delete lifetime_;
}

void ImageMarker::ArenaDtor(void* object) {
  ImageMarker* _this = reinterpret_cast< ImageMarker* >(object);
  (void)_this;
}
void ImageMarker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageMarker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageMarker& ImageMarker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ImageMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  outline_colors_.Clear();
  ns_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && outline_color_ != nullptr) {
    delete outline_color_;
  }
  outline_color_ = nullptr;
  if (GetArena() == nullptr && fill_color_ != nullptr) {
    delete fill_color_;
  }
  fill_color_ = nullptr;
  if (GetArena() == nullptr && lifetime_ != nullptr) {
    delete lifetime_;
  }
  lifetime_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filled_) -
      reinterpret_cast<char*>(&id_)) + sizeof(filled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageMarker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ns();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.ns"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Point position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA outline_color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_outline_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 filled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA fill_color = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.builtin_interfaces.Duration lifetime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_lifetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point points = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA outline_colors = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outline_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageMarker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string ns = 2;
  if (this->ns().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ns().data(), static_cast<int>(this->_internal_ns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.ns");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ns(), target);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  // int32 action = 5;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_action(), target);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Point position = 6;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::position(this), target, stream);
  }

  // double scale = 7;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_scale(), target);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA outline_color = 8;
  if (this->has_outline_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::outline_color(this), target, stream);
  }

  // uint32 filled = 9;
  if (this->filled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_filled(), target);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA fill_color = 10;
  if (this->has_fill_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::fill_color(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.builtin_interfaces.Duration lifetime = 11;
  if (this->has_lifetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::lifetime(this), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point points = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_points(i), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA outline_colors = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outline_colors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_outline_colors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
  return target;
}

size_t ImageMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point points = 12;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA outline_colors = 13;
  total_size += 1UL * this->_internal_outline_colors_size();
  for (const auto& msg : this->outline_colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ns = 2;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ns());
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Point position = 6;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA outline_color = 8;
  if (this->has_outline_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outline_color_);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA fill_color = 10;
  if (this->has_fill_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fill_color_);
  }

  // .openbot_bridge.ros2_msgs.builtin_interfaces.Duration lifetime = 11;
  if (this->has_lifetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lifetime_);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // double scale = 7;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 action = 5;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());
  }

  // uint32 filled = 9;
  if (this->filled() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_filled());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageMarker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageMarker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageMarker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
    MergeFrom(*source);
  }
}

void ImageMarker::MergeFrom(const ImageMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  outline_colors_.MergeFrom(from.outline_colors_);
  if (from.ns().size() > 0) {
    _internal_set_ns(from._internal_ns());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::openbot_bridge::ros2_msgs::geometry_msgs::Point::MergeFrom(from._internal_position());
  }
  if (from.has_outline_color()) {
    _internal_mutable_outline_color()->::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA::MergeFrom(from._internal_outline_color());
  }
  if (from.has_fill_color()) {
    _internal_mutable_fill_color()->::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA::MergeFrom(from._internal_fill_color());
  }
  if (from.has_lifetime()) {
    _internal_mutable_lifetime()->::openbot_bridge::ros2_msgs::builtin_interfaces::Duration::MergeFrom(from._internal_lifetime());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.filled() != 0) {
    _internal_set_filled(from._internal_filled());
  }
}

void ImageMarker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMarker::CopyFrom(const ImageMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMarker::IsInitialized() const {
  return true;
}

void ImageMarker::InternalSwap(ImageMarker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  outline_colors_.InternalSwap(&other->outline_colors_);
  ns_.Swap(&other->ns_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageMarker, filled_)
      + sizeof(ImageMarker::filled_)
      - PROTOBUF_FIELD_OFFSET(ImageMarker, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageMarker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InteractiveMarker::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const InteractiveMarker* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& pose(const InteractiveMarker* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
InteractiveMarker::_Internal::header(const InteractiveMarker* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&
InteractiveMarker::_Internal::pose(const InteractiveMarker* msg) {
  return *msg->pose_;
}
void InteractiveMarker::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void InteractiveMarker::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
InteractiveMarker::InteractiveMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  menu_entries_(arena),
  controls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
}
InteractiveMarker::InteractiveMarker(const InteractiveMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      menu_entries_(from.menu_entries_),
      controls_(from.controls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
}

void InteractiveMarker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InteractiveMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&header_)) + sizeof(scale_));
}

InteractiveMarker::~InteractiveMarker() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InteractiveMarker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
}

void InteractiveMarker::ArenaDtor(void* object) {
  InteractiveMarker* _this = reinterpret_cast< InteractiveMarker* >(object);
  (void)_this;
}
void InteractiveMarker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InteractiveMarker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InteractiveMarker& InteractiveMarker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InteractiveMarker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void InteractiveMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  menu_entries_.Clear();
  controls_.Clear();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  scale_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InteractiveMarker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double scale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry menu_entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_menu_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl controls = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_controls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InteractiveMarker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // double scale = 5;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_scale(), target);
  }

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry menu_entries = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_menu_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_menu_entries(i), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl controls = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_controls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_controls(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
  return target;
}

size_t InteractiveMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry menu_entries = 6;
  total_size += 1UL * this->_internal_menu_entries_size();
  for (const auto& msg : this->menu_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl controls = 7;
  total_size += 1UL * this->_internal_controls_size();
  for (const auto& msg : this->controls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // double scale = 5;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InteractiveMarker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
  GOOGLE_DCHECK_NE(&from, this);
  const InteractiveMarker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InteractiveMarker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
    MergeFrom(*source);
  }
}

void InteractiveMarker::MergeFrom(const InteractiveMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  menu_entries_.MergeFrom(from.menu_entries_);
  controls_.MergeFrom(from.controls_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::openbot_bridge::ros2_msgs::geometry_msgs::Pose::MergeFrom(from._internal_pose());
  }
  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
}

void InteractiveMarker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractiveMarker::CopyFrom(const InteractiveMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractiveMarker::IsInitialized() const {
  return true;
}

void InteractiveMarker::InternalSwap(InteractiveMarker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  menu_entries_.InternalSwap(&other->menu_entries_);
  controls_.InternalSwap(&other->controls_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InteractiveMarker, scale_)
      + sizeof(InteractiveMarker::scale_)
      - PROTOBUF_FIELD_OFFSET(InteractiveMarker, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InteractiveMarker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InteractiveMarkerControl::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& orientation(const InteractiveMarkerControl* msg);
};

const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion&
InteractiveMarkerControl::_Internal::orientation(const InteractiveMarkerControl* msg) {
  return *msg->orientation_;
}
void InteractiveMarkerControl::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
InteractiveMarkerControl::InteractiveMarkerControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  markers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
}
InteractiveMarkerControl::InteractiveMarkerControl(const InteractiveMarkerControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markers_(from.markers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&orientation_mode_, &from.orientation_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&independent_marker_orientation_) -
    reinterpret_cast<char*>(&orientation_mode_)) + sizeof(independent_marker_orientation_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
}

void InteractiveMarkerControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InteractiveMarkerControl_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&independent_marker_orientation_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(independent_marker_orientation_));
}

InteractiveMarkerControl::~InteractiveMarkerControl() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InteractiveMarkerControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete orientation_;
}

void InteractiveMarkerControl::ArenaDtor(void* object) {
  InteractiveMarkerControl* _this = reinterpret_cast< InteractiveMarkerControl* >(object);
  (void)_this;
}
void InteractiveMarkerControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InteractiveMarkerControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InteractiveMarkerControl& InteractiveMarkerControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InteractiveMarkerControl_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void InteractiveMarkerControl::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markers_.Clear();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&orientation_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&independent_marker_orientation_) -
      reinterpret_cast<char*>(&orientation_mode_)) + sizeof(independent_marker_orientation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InteractiveMarkerControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 orientation_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          orientation_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 interaction_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          interaction_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool always_visible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          always_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.visualization_msgs.Marker markers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool independent_marker_orientation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          independent_marker_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InteractiveMarkerControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion orientation = 2;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  // uint32 orientation_mode = 3;
  if (this->orientation_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_orientation_mode(), target);
  }

  // uint32 interaction_mode = 4;
  if (this->interaction_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_interaction_mode(), target);
  }

  // bool always_visible = 5;
  if (this->always_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_always_visible(), target);
  }

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.Marker markers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_markers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_markers(i), target, stream);
  }

  // bool independent_marker_orientation = 7;
  if (this->independent_marker_orientation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_independent_marker_orientation(), target);
  }

  // string description = 8;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.description");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
  return target;
}

size_t InteractiveMarkerControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.Marker markers = 6;
  total_size += 1UL * this->_internal_markers_size();
  for (const auto& msg : this->markers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 8;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // uint32 orientation_mode = 3;
  if (this->orientation_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_orientation_mode());
  }

  // uint32 interaction_mode = 4;
  if (this->interaction_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_interaction_mode());
  }

  // bool always_visible = 5;
  if (this->always_visible() != 0) {
    total_size += 1 + 1;
  }

  // bool independent_marker_orientation = 7;
  if (this->independent_marker_orientation() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InteractiveMarkerControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
  GOOGLE_DCHECK_NE(&from, this);
  const InteractiveMarkerControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InteractiveMarkerControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
    MergeFrom(*source);
  }
}

void InteractiveMarkerControl::MergeFrom(const InteractiveMarkerControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markers_.MergeFrom(from.markers_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion::MergeFrom(from._internal_orientation());
  }
  if (from.orientation_mode() != 0) {
    _internal_set_orientation_mode(from._internal_orientation_mode());
  }
  if (from.interaction_mode() != 0) {
    _internal_set_interaction_mode(from._internal_interaction_mode());
  }
  if (from.always_visible() != 0) {
    _internal_set_always_visible(from._internal_always_visible());
  }
  if (from.independent_marker_orientation() != 0) {
    _internal_set_independent_marker_orientation(from._internal_independent_marker_orientation());
  }
}

void InteractiveMarkerControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractiveMarkerControl::CopyFrom(const InteractiveMarkerControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractiveMarkerControl::IsInitialized() const {
  return true;
}

void InteractiveMarkerControl::InternalSwap(InteractiveMarkerControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  markers_.InternalSwap(&other->markers_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InteractiveMarkerControl, independent_marker_orientation_)
      + sizeof(InteractiveMarkerControl::independent_marker_orientation_)
      - PROTOBUF_FIELD_OFFSET(InteractiveMarkerControl, orientation_)>(
          reinterpret_cast<char*>(&orientation_),
          reinterpret_cast<char*>(&other->orientation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InteractiveMarkerControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InteractiveMarkerFeedback::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const InteractiveMarkerFeedback* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& pose(const InteractiveMarkerFeedback* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& mouse_point(const InteractiveMarkerFeedback* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
InteractiveMarkerFeedback::_Internal::header(const InteractiveMarkerFeedback* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&
InteractiveMarkerFeedback::_Internal::pose(const InteractiveMarkerFeedback* msg) {
  return *msg->pose_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Point&
InteractiveMarkerFeedback::_Internal::mouse_point(const InteractiveMarkerFeedback* msg) {
  return *msg->mouse_point_;
}
void InteractiveMarkerFeedback::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void InteractiveMarkerFeedback::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
void InteractiveMarkerFeedback::clear_mouse_point() {
  if (GetArena() == nullptr && mouse_point_ != nullptr) {
    delete mouse_point_;
  }
  mouse_point_ = nullptr;
}
InteractiveMarkerFeedback::InteractiveMarkerFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
}
InteractiveMarkerFeedback::InteractiveMarkerFeedback(const InteractiveMarkerFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_id(), 
      GetArena());
  }
  marker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marker_name().empty()) {
    marker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marker_name(), 
      GetArena());
  }
  control_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_control_name().empty()) {
    control_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_control_name(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_mouse_point()) {
    mouse_point_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Point(*from.mouse_point_);
  } else {
    mouse_point_ = nullptr;
  }
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&mouse_point_valid_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(mouse_point_valid_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
}

void InteractiveMarkerFeedback::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InteractiveMarkerFeedback_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  control_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mouse_point_valid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(mouse_point_valid_));
}

InteractiveMarkerFeedback::~InteractiveMarkerFeedback() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InteractiveMarkerFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marker_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  control_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete mouse_point_;
}

void InteractiveMarkerFeedback::ArenaDtor(void* object) {
  InteractiveMarkerFeedback* _this = reinterpret_cast< InteractiveMarkerFeedback* >(object);
  (void)_this;
}
void InteractiveMarkerFeedback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InteractiveMarkerFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InteractiveMarkerFeedback& InteractiveMarkerFeedback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InteractiveMarkerFeedback_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void InteractiveMarkerFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmpty();
  marker_name_.ClearToEmpty();
  control_name_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && mouse_point_ != nullptr) {
    delete mouse_point_;
  }
  mouse_point_ = nullptr;
  ::memset(&event_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mouse_point_valid_) -
      reinterpret_cast<char*>(&event_type_)) + sizeof(mouse_point_valid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InteractiveMarkerFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marker_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_marker_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.marker_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string control_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_control_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.control_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 event_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 menu_entry_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          menu_entry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Point mouse_point = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mouse_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mouse_point_valid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          mouse_point_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InteractiveMarkerFeedback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.client_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_id(), target);
  }

  // string marker_name = 3;
  if (this->marker_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marker_name().data(), static_cast<int>(this->_internal_marker_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.marker_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_marker_name(), target);
  }

  // string control_name = 4;
  if (this->control_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_control_name().data(), static_cast<int>(this->_internal_control_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.control_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_control_name(), target);
  }

  // uint32 event_type = 5;
  if (this->event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_event_type(), target);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 6;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pose(this), target, stream);
  }

  // uint32 menu_entry_id = 7;
  if (this->menu_entry_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_menu_entry_id(), target);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Point mouse_point = 8;
  if (this->has_mouse_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::mouse_point(this), target, stream);
  }

  // bool mouse_point_valid = 9;
  if (this->mouse_point_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_mouse_point_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
  return target;
}

size_t InteractiveMarkerFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string marker_name = 3;
  if (this->marker_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marker_name());
  }

  // string control_name = 4;
  if (this->control_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_control_name());
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 6;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Point mouse_point = 8;
  if (this->has_mouse_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mouse_point_);
  }

  // uint32 event_type = 5;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_type());
  }

  // uint32 menu_entry_id = 7;
  if (this->menu_entry_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_menu_entry_id());
  }

  // bool mouse_point_valid = 9;
  if (this->mouse_point_valid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InteractiveMarkerFeedback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const InteractiveMarkerFeedback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InteractiveMarkerFeedback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
    MergeFrom(*source);
  }
}

void InteractiveMarkerFeedback::MergeFrom(const InteractiveMarkerFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from.marker_name().size() > 0) {
    _internal_set_marker_name(from._internal_marker_name());
  }
  if (from.control_name().size() > 0) {
    _internal_set_control_name(from._internal_control_name());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::openbot_bridge::ros2_msgs::geometry_msgs::Pose::MergeFrom(from._internal_pose());
  }
  if (from.has_mouse_point()) {
    _internal_mutable_mouse_point()->::openbot_bridge::ros2_msgs::geometry_msgs::Point::MergeFrom(from._internal_mouse_point());
  }
  if (from.event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
  if (from.menu_entry_id() != 0) {
    _internal_set_menu_entry_id(from._internal_menu_entry_id());
  }
  if (from.mouse_point_valid() != 0) {
    _internal_set_mouse_point_valid(from._internal_mouse_point_valid());
  }
}

void InteractiveMarkerFeedback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractiveMarkerFeedback::CopyFrom(const InteractiveMarkerFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractiveMarkerFeedback::IsInitialized() const {
  return true;
}

void InteractiveMarkerFeedback::InternalSwap(InteractiveMarkerFeedback* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marker_name_.Swap(&other->marker_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  control_name_.Swap(&other->control_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InteractiveMarkerFeedback, mouse_point_valid_)
      + sizeof(InteractiveMarkerFeedback::mouse_point_valid_)
      - PROTOBUF_FIELD_OFFSET(InteractiveMarkerFeedback, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InteractiveMarkerFeedback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InteractiveMarkerInit::_Internal {
 public:
};

InteractiveMarkerInit::InteractiveMarkerInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  markers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
}
InteractiveMarkerInit::InteractiveMarkerInit(const InteractiveMarkerInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markers_(from.markers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_id().empty()) {
    server_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_id(), 
      GetArena());
  }
  seq_num_ = from.seq_num_;
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
}

void InteractiveMarkerInit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InteractiveMarkerInit_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seq_num_ = PROTOBUF_ULONGLONG(0);
}

InteractiveMarkerInit::~InteractiveMarkerInit() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InteractiveMarkerInit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InteractiveMarkerInit::ArenaDtor(void* object) {
  InteractiveMarkerInit* _this = reinterpret_cast< InteractiveMarkerInit* >(object);
  (void)_this;
}
void InteractiveMarkerInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InteractiveMarkerInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InteractiveMarkerInit& InteractiveMarkerInit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InteractiveMarkerInit_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void InteractiveMarkerInit::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markers_.Clear();
  server_id_.ClearToEmpty();
  seq_num_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InteractiveMarkerInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_server_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.server_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seq_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker markers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InteractiveMarkerInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_id = 1;
  if (this->server_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_id().data(), static_cast<int>(this->_internal_server_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.server_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_id(), target);
  }

  // uint64 seq_num = 2;
  if (this->seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seq_num(), target);
  }

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker markers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_markers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_markers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
  return target;
}

size_t InteractiveMarkerInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker markers = 3;
  total_size += 1UL * this->_internal_markers_size();
  for (const auto& msg : this->markers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string server_id = 1;
  if (this->server_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_id());
  }

  // uint64 seq_num = 2;
  if (this->seq_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InteractiveMarkerInit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
  GOOGLE_DCHECK_NE(&from, this);
  const InteractiveMarkerInit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InteractiveMarkerInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
    MergeFrom(*source);
  }
}

void InteractiveMarkerInit::MergeFrom(const InteractiveMarkerInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markers_.MergeFrom(from.markers_);
  if (from.server_id().size() > 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.seq_num() != 0) {
    _internal_set_seq_num(from._internal_seq_num());
  }
}

void InteractiveMarkerInit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractiveMarkerInit::CopyFrom(const InteractiveMarkerInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractiveMarkerInit::IsInitialized() const {
  return true;
}

void InteractiveMarkerInit::InternalSwap(InteractiveMarkerInit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  markers_.InternalSwap(&other->markers_);
  server_id_.Swap(&other->server_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(seq_num_, other->seq_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InteractiveMarkerInit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InteractiveMarkerPose::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const InteractiveMarkerPose* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& pose(const InteractiveMarkerPose* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
InteractiveMarkerPose::_Internal::header(const InteractiveMarkerPose* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&
InteractiveMarkerPose::_Internal::pose(const InteractiveMarkerPose* msg) {
  return *msg->pose_;
}
void InteractiveMarkerPose::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void InteractiveMarkerPose::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
InteractiveMarkerPose::InteractiveMarkerPose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
}
InteractiveMarkerPose::InteractiveMarkerPose(const InteractiveMarkerPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
}

void InteractiveMarkerPose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InteractiveMarkerPose_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pose_) -
      reinterpret_cast<char*>(&header_)) + sizeof(pose_));
}

InteractiveMarkerPose::~InteractiveMarkerPose() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InteractiveMarkerPose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
}

void InteractiveMarkerPose::ArenaDtor(void* object) {
  InteractiveMarkerPose* _this = reinterpret_cast< InteractiveMarkerPose* >(object);
  (void)_this;
}
void InteractiveMarkerPose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InteractiveMarkerPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InteractiveMarkerPose& InteractiveMarkerPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InteractiveMarkerPose_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void InteractiveMarkerPose::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InteractiveMarkerPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InteractiveMarkerPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
  return target;
}

size_t InteractiveMarkerPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InteractiveMarkerPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
  GOOGLE_DCHECK_NE(&from, this);
  const InteractiveMarkerPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InteractiveMarkerPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
    MergeFrom(*source);
  }
}

void InteractiveMarkerPose::MergeFrom(const InteractiveMarkerPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::openbot_bridge::ros2_msgs::geometry_msgs::Pose::MergeFrom(from._internal_pose());
  }
}

void InteractiveMarkerPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractiveMarkerPose::CopyFrom(const InteractiveMarkerPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractiveMarkerPose::IsInitialized() const {
  return true;
}

void InteractiveMarkerPose::InternalSwap(InteractiveMarkerPose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InteractiveMarkerPose, pose_)
      + sizeof(InteractiveMarkerPose::pose_)
      - PROTOBUF_FIELD_OFFSET(InteractiveMarkerPose, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InteractiveMarkerPose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InteractiveMarkerUpdate::_Internal {
 public:
};

InteractiveMarkerUpdate::InteractiveMarkerUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  markers_(arena),
  poses_(arena),
  erases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
}
InteractiveMarkerUpdate::InteractiveMarkerUpdate(const InteractiveMarkerUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markers_(from.markers_),
      poses_(from.poses_),
      erases_(from.erases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_id().empty()) {
    server_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_id(), 
      GetArena());
  }
  ::memcpy(&seq_num_, &from.seq_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&seq_num_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
}

void InteractiveMarkerUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InteractiveMarkerUpdate_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&seq_num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&seq_num_)) + sizeof(type_));
}

InteractiveMarkerUpdate::~InteractiveMarkerUpdate() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InteractiveMarkerUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InteractiveMarkerUpdate::ArenaDtor(void* object) {
  InteractiveMarkerUpdate* _this = reinterpret_cast< InteractiveMarkerUpdate* >(object);
  (void)_this;
}
void InteractiveMarkerUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InteractiveMarkerUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InteractiveMarkerUpdate& InteractiveMarkerUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InteractiveMarkerUpdate_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void InteractiveMarkerUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markers_.Clear();
  poses_.Clear();
  erases_.Clear();
  server_id_.ClearToEmpty();
  ::memset(&seq_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&seq_num_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InteractiveMarkerUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_server_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.server_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seq_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker markers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose poses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string erases = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_erases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InteractiveMarkerUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_id = 1;
  if (this->server_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_id().data(), static_cast<int>(this->_internal_server_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.server_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_id(), target);
  }

  // uint64 seq_num = 2;
  if (this->seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seq_num(), target);
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker markers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_markers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_markers(i), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose poses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_poses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_poses(i), target, stream);
  }

  // repeated string erases = 6;
  for (int i = 0, n = this->_internal_erases_size(); i < n; i++) {
    const auto& s = this->_internal_erases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
  return target;
}

size_t InteractiveMarkerUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker markers = 4;
  total_size += 1UL * this->_internal_markers_size();
  for (const auto& msg : this->markers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose poses = 5;
  total_size += 1UL * this->_internal_poses_size();
  for (const auto& msg : this->poses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string erases = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(erases_.size());
  for (int i = 0, n = erases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      erases_.Get(i));
  }

  // string server_id = 1;
  if (this->server_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_id());
  }

  // uint64 seq_num = 2;
  if (this->seq_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_num());
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InteractiveMarkerUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const InteractiveMarkerUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InteractiveMarkerUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
    MergeFrom(*source);
  }
}

void InteractiveMarkerUpdate::MergeFrom(const InteractiveMarkerUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markers_.MergeFrom(from.markers_);
  poses_.MergeFrom(from.poses_);
  erases_.MergeFrom(from.erases_);
  if (from.server_id().size() > 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.seq_num() != 0) {
    _internal_set_seq_num(from._internal_seq_num());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void InteractiveMarkerUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractiveMarkerUpdate::CopyFrom(const InteractiveMarkerUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractiveMarkerUpdate::IsInitialized() const {
  return true;
}

void InteractiveMarkerUpdate::InternalSwap(InteractiveMarkerUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  markers_.InternalSwap(&other->markers_);
  poses_.InternalSwap(&other->poses_);
  erases_.InternalSwap(&other->erases_);
  server_id_.Swap(&other->server_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InteractiveMarkerUpdate, type_)
      + sizeof(InteractiveMarkerUpdate::type_)
      - PROTOBUF_FIELD_OFFSET(InteractiveMarkerUpdate, seq_num_)>(
          reinterpret_cast<char*>(&seq_num_),
          reinterpret_cast<char*>(&other->seq_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InteractiveMarkerUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Marker::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const Marker* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& pose(const Marker* msg);
  static const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& scale(const Marker* msg);
  static const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& color(const Marker* msg);
  static const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration& lifetime(const Marker* msg);
  static const ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage& texture(const Marker* msg);
  static const ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile& mesh_file(const Marker* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
Marker::_Internal::header(const Marker* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&
Marker::_Internal::pose(const Marker* msg) {
  return *msg->pose_;
}
const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&
Marker::_Internal::scale(const Marker* msg) {
  return *msg->scale_;
}
const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA&
Marker::_Internal::color(const Marker* msg) {
  return *msg->color_;
}
const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration&
Marker::_Internal::lifetime(const Marker* msg) {
  return *msg->lifetime_;
}
const ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage&
Marker::_Internal::texture(const Marker* msg) {
  return *msg->texture_;
}
const ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile&
Marker::_Internal::mesh_file(const Marker* msg) {
  return *msg->mesh_file_;
}
void Marker::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void Marker::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
void Marker::clear_scale() {
  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
}
void Marker::clear_color() {
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
void Marker::clear_lifetime() {
  if (GetArena() == nullptr && lifetime_ != nullptr) {
    delete lifetime_;
  }
  lifetime_ = nullptr;
}
void Marker::clear_points() {
  points_.Clear();
}
void Marker::clear_colors() {
  colors_.Clear();
}
void Marker::clear_texture() {
  if (GetArena() == nullptr && texture_ != nullptr) {
    delete texture_;
  }
  texture_ = nullptr;
}
Marker::Marker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena),
  colors_(arena),
  uv_coordinates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
}
Marker::Marker(const Marker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_),
      colors_(from.colors_),
      uv_coordinates_(from.uv_coordinates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ns().empty()) {
    ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ns(), 
      GetArena());
  }
  texture_resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_texture_resource().empty()) {
    texture_resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_texture_resource(), 
      GetArena());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  mesh_resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mesh_resource().empty()) {
    mesh_resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mesh_resource(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_scale()) {
    scale_ = new ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from._internal_has_lifetime()) {
    lifetime_ = new ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration(*from.lifetime_);
  } else {
    lifetime_ = nullptr;
  }
  if (from._internal_has_texture()) {
    texture_ = new ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage(*from.texture_);
  } else {
    texture_ = nullptr;
  }
  if (from._internal_has_mesh_file()) {
    mesh_file_ = new ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile(*from.mesh_file_);
  } else {
    mesh_file_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mesh_use_embedded_materials_) -
    reinterpret_cast<char*>(&id_)) + sizeof(mesh_use_embedded_materials_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
}

void Marker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Marker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  ns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texture_resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mesh_resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mesh_use_embedded_materials_) -
      reinterpret_cast<char*>(&header_)) + sizeof(mesh_use_embedded_materials_));
}

Marker::~Marker() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Marker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ns_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  texture_resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mesh_resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete lifetime_;
  if (this != internal_default_instance()) delete texture_;
  if (this != internal_default_instance()) delete mesh_file_;
}

void Marker::ArenaDtor(void* object) {
  Marker* _this = reinterpret_cast< Marker* >(object);
  (void)_this;
}
void Marker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Marker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Marker& Marker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Marker_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Marker::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  colors_.Clear();
  uv_coordinates_.Clear();
  ns_.ClearToEmpty();
  texture_resource_.ClearToEmpty();
  text_.ClearToEmpty();
  mesh_resource_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  if (GetArena() == nullptr && lifetime_ != nullptr) {
    delete lifetime_;
  }
  lifetime_ = nullptr;
  if (GetArena() == nullptr && texture_ != nullptr) {
    delete texture_;
  }
  texture_ = nullptr;
  if (GetArena() == nullptr && mesh_file_ != nullptr) {
    delete mesh_file_;
  }
  mesh_file_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mesh_use_embedded_materials_) -
      reinterpret_cast<char*>(&id_)) + sizeof(mesh_use_embedded_materials_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Marker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ns();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.Marker.ns"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.builtin_interfaces.Duration lifetime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_lifetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool frame_locked = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          frame_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point points = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA colors = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // string texture_resource = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_texture_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture_resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage texture = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate uv_coordinates = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uv_coordinates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // string text = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.Marker.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mesh_resource = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_mesh_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.visualization_msgs.MeshFile mesh_file = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesh_use_embedded_materials = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          mesh_use_embedded_materials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Marker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string ns = 2;
  if (this->ns().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ns().data(), static_cast<int>(this->_internal_ns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.Marker.ns");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ns(), target);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  // int32 action = 5;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_action(), target);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 6;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pose(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 scale = 7;
  if (this->has_scale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::scale(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA color = 8;
  if (this->has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::color(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.builtin_interfaces.Duration lifetime = 9;
  if (this->has_lifetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::lifetime(this), target, stream);
  }

  // bool frame_locked = 10;
  if (this->frame_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_frame_locked(), target);
  }

  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point points = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_points(i), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA colors = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_colors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_colors(i), target, stream);
  }

  // string texture_resource = 13;
  if (this->texture_resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_texture_resource().data(), static_cast<int>(this->_internal_texture_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture_resource");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_texture_resource(), target);
  }

  // .openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage texture = 14;
  if (this->has_texture()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::texture(this), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate uv_coordinates = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uv_coordinates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_uv_coordinates(i), target, stream);
  }

  // string text = 16;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.Marker.text");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_text(), target);
  }

  // string mesh_resource = 17;
  if (this->mesh_resource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mesh_resource().data(), static_cast<int>(this->_internal_mesh_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_resource");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_mesh_resource(), target);
  }

  // .openbot_bridge.ros2_msgs.visualization_msgs.MeshFile mesh_file = 18;
  if (this->has_mesh_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::mesh_file(this), target, stream);
  }

  // bool mesh_use_embedded_materials = 19;
  if (this->mesh_use_embedded_materials() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_mesh_use_embedded_materials(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
  return target;
}

size_t Marker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point points = 11;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA colors = 12;
  total_size += 1UL * this->_internal_colors_size();
  for (const auto& msg : this->colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate uv_coordinates = 15;
  total_size += 1UL * this->_internal_uv_coordinates_size();
  for (const auto& msg : this->uv_coordinates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ns = 2;
  if (this->ns().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ns());
  }

  // string texture_resource = 13;
  if (this->texture_resource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_texture_resource());
  }

  // string text = 16;
  if (this->text().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string mesh_resource = 17;
  if (this->mesh_resource().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mesh_resource());
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 6;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 scale = 7;
  if (this->has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA color = 8;
  if (this->has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // .openbot_bridge.ros2_msgs.builtin_interfaces.Duration lifetime = 9;
  if (this->has_lifetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lifetime_);
  }

  // .openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage texture = 14;
  if (this->has_texture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texture_);
  }

  // .openbot_bridge.ros2_msgs.visualization_msgs.MeshFile mesh_file = 18;
  if (this->has_mesh_file()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mesh_file_);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 action = 5;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());
  }

  // bool frame_locked = 10;
  if (this->frame_locked() != 0) {
    total_size += 1 + 1;
  }

  // bool mesh_use_embedded_materials = 19;
  if (this->mesh_use_embedded_materials() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Marker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
  GOOGLE_DCHECK_NE(&from, this);
  const Marker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Marker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
    MergeFrom(*source);
  }
}

void Marker::MergeFrom(const Marker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  colors_.MergeFrom(from.colors_);
  uv_coordinates_.MergeFrom(from.uv_coordinates_);
  if (from.ns().size() > 0) {
    _internal_set_ns(from._internal_ns());
  }
  if (from.texture_resource().size() > 0) {
    _internal_set_texture_resource(from._internal_texture_resource());
  }
  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.mesh_resource().size() > 0) {
    _internal_set_mesh_resource(from._internal_mesh_resource());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::openbot_bridge::ros2_msgs::geometry_msgs::Pose::MergeFrom(from._internal_pose());
  }
  if (from.has_scale()) {
    _internal_mutable_scale()->::openbot_bridge::ros2_msgs::geometry_msgs::Vector3::MergeFrom(from._internal_scale());
  }
  if (from.has_color()) {
    _internal_mutable_color()->::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA::MergeFrom(from._internal_color());
  }
  if (from.has_lifetime()) {
    _internal_mutable_lifetime()->::openbot_bridge::ros2_msgs::builtin_interfaces::Duration::MergeFrom(from._internal_lifetime());
  }
  if (from.has_texture()) {
    _internal_mutable_texture()->::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage::MergeFrom(from._internal_texture());
  }
  if (from.has_mesh_file()) {
    _internal_mutable_mesh_file()->::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile::MergeFrom(from._internal_mesh_file());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.frame_locked() != 0) {
    _internal_set_frame_locked(from._internal_frame_locked());
  }
  if (from.mesh_use_embedded_materials() != 0) {
    _internal_set_mesh_use_embedded_materials(from._internal_mesh_use_embedded_materials());
  }
}

void Marker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Marker::CopyFrom(const Marker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marker::IsInitialized() const {
  return true;
}

void Marker::InternalSwap(Marker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  colors_.InternalSwap(&other->colors_);
  uv_coordinates_.InternalSwap(&other->uv_coordinates_);
  ns_.Swap(&other->ns_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  texture_resource_.Swap(&other->texture_resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mesh_resource_.Swap(&other->mesh_resource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Marker, mesh_use_embedded_materials_)
      + sizeof(Marker::mesh_use_embedded_materials_)
      - PROTOBUF_FIELD_OFFSET(Marker, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Marker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarkerArray::_Internal {
 public:
};

MarkerArray::MarkerArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  markers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
}
MarkerArray::MarkerArray(const MarkerArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markers_(from.markers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
}

void MarkerArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarkerArray_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
}

MarkerArray::~MarkerArray() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarkerArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarkerArray::ArenaDtor(void* object) {
  MarkerArray* _this = reinterpret_cast< MarkerArray* >(object);
  (void)_this;
}
void MarkerArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarkerArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarkerArray& MarkerArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarkerArray_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MarkerArray::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarkerArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .openbot_bridge.ros2_msgs.visualization_msgs.Marker markers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarkerArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.Marker markers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_markers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_markers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
  return target;
}

size_t MarkerArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.Marker markers = 1;
  total_size += 1UL * this->_internal_markers_size();
  for (const auto& msg : this->markers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarkerArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkerArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarkerArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
    MergeFrom(*source);
  }
}

void MarkerArray::MergeFrom(const MarkerArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markers_.MergeFrom(from.markers_);
}

void MarkerArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkerArray::CopyFrom(const MarkerArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkerArray::IsInitialized() const {
  return true;
}

void MarkerArray::InternalSwap(MarkerArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  markers_.InternalSwap(&other->markers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkerArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MenuEntry::_Internal {
 public:
};

MenuEntry::MenuEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
}
MenuEntry::MenuEntry(const MenuEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(command_type_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
}

void MenuEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MenuEntry_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&command_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(command_type_));
}

MenuEntry::~MenuEntry() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MenuEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MenuEntry::ArenaDtor(void* object) {
  MenuEntry* _this = reinterpret_cast< MenuEntry* >(object);
  (void)_this;
}
void MenuEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MenuEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MenuEntry& MenuEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MenuEntry_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MenuEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  command_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(command_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MenuEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 parent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.command"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 command_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          command_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MenuEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 parent_id = 2;
  if (this->parent_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_parent_id(), target);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // string command = 4;
  if (this->command().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.command");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_command(), target);
  }

  // uint32 command_type = 5;
  if (this->command_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_command_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
  return target;
}

size_t MenuEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 3;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string command = 4;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 parent_id = 2;
  if (this->parent_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_parent_id());
  }

  // uint32 command_type = 5;
  if (this->command_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_command_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MenuEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MenuEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MenuEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
    MergeFrom(*source);
  }
}

void MenuEntry::MergeFrom(const MenuEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.command().size() > 0) {
    _internal_set_command(from._internal_command());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.parent_id() != 0) {
    _internal_set_parent_id(from._internal_parent_id());
  }
  if (from.command_type() != 0) {
    _internal_set_command_type(from._internal_command_type());
  }
}

void MenuEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuEntry::CopyFrom(const MenuEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuEntry::IsInitialized() const {
  return true;
}

void MenuEntry::InternalSwap(MenuEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MenuEntry, command_type_)
      + sizeof(MenuEntry::command_type_)
      - PROTOBUF_FIELD_OFFSET(MenuEntry, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MenuEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MeshFile::_Internal {
 public:
};

MeshFile::MeshFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
}
MeshFile::MeshFile(const MeshFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
}

void MeshFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshFile_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MeshFile::~MeshFile() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeshFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MeshFile::ArenaDtor(void* object) {
  MeshFile* _this = reinterpret_cast< MeshFile* >(object);
  (void)_this;
}
void MeshFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshFile& MeshFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshFile_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MeshFile::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  filename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // repeated uint32 data = 2;
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
  return target;
}

size_t MeshFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
    MergeFrom(*source);
  }
}

void MeshFile::MergeFrom(const MeshFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
}

void MeshFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshFile::CopyFrom(const MeshFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshFile::IsInitialized() const {
  return true;
}

void MeshFile::InternalSwap(MeshFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UVCoordinate::_Internal {
 public:
};

UVCoordinate::UVCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
}
UVCoordinate::UVCoordinate(const UVCoordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&u_, &from.u_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&u_)) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
}

void UVCoordinate::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&u_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&u_)) + sizeof(v_));
}

UVCoordinate::~UVCoordinate() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UVCoordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UVCoordinate::ArenaDtor(void* object) {
  UVCoordinate* _this = reinterpret_cast< UVCoordinate* >(object);
  (void)_this;
}
void UVCoordinate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UVCoordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UVCoordinate& UVCoordinate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UVCoordinate_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void UVCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&u_)) + sizeof(v_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UVCoordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double u = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UVCoordinate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double u = 1;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_u(), target);
  }

  // double v = 2;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
  return target;
}

size_t UVCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double u = 1;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    total_size += 1 + 8;
  }

  // double v = 2;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UVCoordinate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const UVCoordinate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UVCoordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
    MergeFrom(*source);
  }
}

void UVCoordinate::MergeFrom(const UVCoordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.u() <= 0 && from.u() >= 0)) {
    _internal_set_u(from._internal_u());
  }
  if (!(from.v() <= 0 && from.v() >= 0)) {
    _internal_set_v(from._internal_v());
  }
}

void UVCoordinate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UVCoordinate::CopyFrom(const UVCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UVCoordinate::IsInitialized() const {
  return true;
}

void UVCoordinate::InternalSwap(UVCoordinate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UVCoordinate, v_)
      + sizeof(UVCoordinate::v_)
      - PROTOBUF_FIELD_OFFSET(UVCoordinate, u_)>(
          reinterpret_cast<char*>(&u_),
          reinterpret_cast<char*>(&other->u_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UVCoordinate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace visualization_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerInit* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerInit >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::visualization_msgs::Marker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::visualization_msgs::Marker >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::visualization_msgs::MarkerArray* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::visualization_msgs::MarkerArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::visualization_msgs::MarkerArray >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
