// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/ros2_msgs/visualization_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "openbot_bridge/ros2_msgs/std_msgs.pb.h"
#include "openbot_bridge/ros2_msgs/sensor_msgs.pb.h"
#include "openbot_bridge/ros2_msgs/geometry_msgs.pb.h"
#include "openbot_bridge/ros2_msgs/builtin_interfaces.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
namespace openbot_bridge {
namespace ros2_msgs {
namespace visualization_msgs {
class ImageMarker;
class ImageMarkerDefaultTypeInternal;
extern ImageMarkerDefaultTypeInternal _ImageMarker_default_instance_;
class InteractiveMarker;
class InteractiveMarkerDefaultTypeInternal;
extern InteractiveMarkerDefaultTypeInternal _InteractiveMarker_default_instance_;
class InteractiveMarkerControl;
class InteractiveMarkerControlDefaultTypeInternal;
extern InteractiveMarkerControlDefaultTypeInternal _InteractiveMarkerControl_default_instance_;
class InteractiveMarkerFeedback;
class InteractiveMarkerFeedbackDefaultTypeInternal;
extern InteractiveMarkerFeedbackDefaultTypeInternal _InteractiveMarkerFeedback_default_instance_;
class InteractiveMarkerInit;
class InteractiveMarkerInitDefaultTypeInternal;
extern InteractiveMarkerInitDefaultTypeInternal _InteractiveMarkerInit_default_instance_;
class InteractiveMarkerPose;
class InteractiveMarkerPoseDefaultTypeInternal;
extern InteractiveMarkerPoseDefaultTypeInternal _InteractiveMarkerPose_default_instance_;
class InteractiveMarkerUpdate;
class InteractiveMarkerUpdateDefaultTypeInternal;
extern InteractiveMarkerUpdateDefaultTypeInternal _InteractiveMarkerUpdate_default_instance_;
class Marker;
class MarkerDefaultTypeInternal;
extern MarkerDefaultTypeInternal _Marker_default_instance_;
class MarkerArray;
class MarkerArrayDefaultTypeInternal;
extern MarkerArrayDefaultTypeInternal _MarkerArray_default_instance_;
class MenuEntry;
class MenuEntryDefaultTypeInternal;
extern MenuEntryDefaultTypeInternal _MenuEntry_default_instance_;
class MeshFile;
class MeshFileDefaultTypeInternal;
extern MeshFileDefaultTypeInternal _MeshFile_default_instance_;
class UVCoordinate;
class UVCoordinateDefaultTypeInternal;
extern UVCoordinateDefaultTypeInternal _UVCoordinate_default_instance_;
}  // namespace visualization_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::visualization_msgs::ImageMarker>(Arena*);
template<> ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker>(Arena*);
template<> ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl>(Arena*);
template<> ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerFeedback>(Arena*);
template<> ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerInit* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerInit>(Arena*);
template<> ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose>(Arena*);
template<> ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerUpdate>(Arena*);
template<> ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::visualization_msgs::Marker>(Arena*);
template<> ::openbot_bridge::ros2_msgs::visualization_msgs::MarkerArray* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::visualization_msgs::MarkerArray>(Arena*);
template<> ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry>(Arena*);
template<> ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile>(Arena*);
template<> ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openbot_bridge {
namespace ros2_msgs {
namespace visualization_msgs {

// ===================================================================

class ImageMarker PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker) */ {
 public:
  inline ImageMarker() : ImageMarker(nullptr) {}
  virtual ~ImageMarker();

  ImageMarker(const ImageMarker& from);
  ImageMarker(ImageMarker&& from) noexcept
    : ImageMarker() {
    *this = ::std::move(from);
  }

  inline ImageMarker& operator=(const ImageMarker& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMarker& operator=(ImageMarker&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageMarker& default_instance();

  static inline const ImageMarker* internal_default_instance() {
    return reinterpret_cast<const ImageMarker*>(
               &_ImageMarker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageMarker& a, ImageMarker& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageMarker* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageMarker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageMarker* New() const final {
    return CreateMaybeMessage<ImageMarker>(nullptr);
  }

  ImageMarker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageMarker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageMarker& from);
  void MergeFrom(const ImageMarker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMarker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker";
  }
  protected:
  explicit ImageMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 12,
    kOutlineColorsFieldNumber = 13,
    kNsFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kPositionFieldNumber = 6,
    kOutlineColorFieldNumber = 8,
    kFillColorFieldNumber = 10,
    kLifetimeFieldNumber = 11,
    kIdFieldNumber = 3,
    kTypeFieldNumber = 4,
    kScaleFieldNumber = 7,
    kActionFieldNumber = 5,
    kFilledFieldNumber = 9,
  };
  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point points = 12;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >*
      mutable_points();
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& _internal_points(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* _internal_add_points();
  public:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& points(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >&
      points() const;

  // repeated .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA outline_colors = 13;
  int outline_colors_size() const;
  private:
  int _internal_outline_colors_size() const;
  public:
  void clear_outline_colors();
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* mutable_outline_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA >*
      mutable_outline_colors();
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& _internal_outline_colors(int index) const;
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* _internal_add_outline_colors();
  public:
  const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& outline_colors(int index) const;
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* add_outline_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA >&
      outline_colors() const;

  // string ns = 2;
  void clear_ns();
  const std::string& ns() const;
  void set_ns(const std::string& value);
  void set_ns(std::string&& value);
  void set_ns(const char* value);
  void set_ns(const char* value, size_t size);
  std::string* mutable_ns();
  std::string* release_ns();
  void set_allocated_ns(std::string* ns);
  private:
  const std::string& _internal_ns() const;
  void _internal_set_ns(const std::string& value);
  std::string* _internal_mutable_ns();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Point position = 6;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& position() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* release_position();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* mutable_position();
  void set_allocated_position(::openbot_bridge::ros2_msgs::geometry_msgs::Point* position);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& _internal_position() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Point* position);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* unsafe_arena_release_position();

  // .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA outline_color = 8;
  bool has_outline_color() const;
  private:
  bool _internal_has_outline_color() const;
  public:
  void clear_outline_color();
  const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& outline_color() const;
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* release_outline_color();
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* mutable_outline_color();
  void set_allocated_outline_color(::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* outline_color);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& _internal_outline_color() const;
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* _internal_mutable_outline_color();
  public:
  void unsafe_arena_set_allocated_outline_color(
      ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* outline_color);
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* unsafe_arena_release_outline_color();

  // .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA fill_color = 10;
  bool has_fill_color() const;
  private:
  bool _internal_has_fill_color() const;
  public:
  void clear_fill_color();
  const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& fill_color() const;
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* release_fill_color();
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* mutable_fill_color();
  void set_allocated_fill_color(::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* fill_color);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& _internal_fill_color() const;
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* _internal_mutable_fill_color();
  public:
  void unsafe_arena_set_allocated_fill_color(
      ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* fill_color);
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* unsafe_arena_release_fill_color();

  // .openbot_bridge.ros2_msgs.builtin_interfaces.Duration lifetime = 11;
  bool has_lifetime() const;
  private:
  bool _internal_has_lifetime() const;
  public:
  void clear_lifetime();
  const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration& lifetime() const;
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* release_lifetime();
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* mutable_lifetime();
  void set_allocated_lifetime(::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* lifetime);
  private:
  const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration& _internal_lifetime() const;
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* _internal_mutable_lifetime();
  public:
  void unsafe_arena_set_allocated_lifetime(
      ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* lifetime);
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* unsafe_arena_release_lifetime();

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double scale = 7;
  void clear_scale();
  double scale() const;
  void set_scale(double value);
  private:
  double _internal_scale() const;
  void _internal_set_scale(double value);
  public:

  // int32 action = 5;
  void clear_action();
  ::PROTOBUF_NAMESPACE_ID::int32 action() const;
  void set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action() const;
  void _internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 filled = 9;
  void clear_filled();
  ::PROTOBUF_NAMESPACE_ID::uint32 filled() const;
  void set_filled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filled() const;
  void _internal_set_filled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA > outline_colors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ns_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* position_;
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* outline_color_;
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* fill_color_;
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* lifetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  double scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class InteractiveMarker PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker) */ {
 public:
  inline InteractiveMarker() : InteractiveMarker(nullptr) {}
  virtual ~InteractiveMarker();

  InteractiveMarker(const InteractiveMarker& from);
  InteractiveMarker(InteractiveMarker&& from) noexcept
    : InteractiveMarker() {
    *this = ::std::move(from);
  }

  inline InteractiveMarker& operator=(const InteractiveMarker& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractiveMarker& operator=(InteractiveMarker&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InteractiveMarker& default_instance();

  static inline const InteractiveMarker* internal_default_instance() {
    return reinterpret_cast<const InteractiveMarker*>(
               &_InteractiveMarker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InteractiveMarker& a, InteractiveMarker& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractiveMarker* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractiveMarker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InteractiveMarker* New() const final {
    return CreateMaybeMessage<InteractiveMarker>(nullptr);
  }

  InteractiveMarker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InteractiveMarker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InteractiveMarker& from);
  void MergeFrom(const InteractiveMarker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InteractiveMarker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker";
  }
  protected:
  explicit InteractiveMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMenuEntriesFieldNumber = 6,
    kControlsFieldNumber = 7,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 2,
    kScaleFieldNumber = 5,
  };
  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry menu_entries = 6;
  int menu_entries_size() const;
  private:
  int _internal_menu_entries_size() const;
  public:
  void clear_menu_entries();
  ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry* mutable_menu_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry >*
      mutable_menu_entries();
  private:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry& _internal_menu_entries(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry* _internal_add_menu_entries();
  public:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry& menu_entries(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry* add_menu_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry >&
      menu_entries() const;

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl controls = 7;
  int controls_size() const;
  private:
  int _internal_controls_size() const;
  public:
  void clear_controls();
  ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl* mutable_controls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl >*
      mutable_controls();
  private:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl& _internal_controls(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl* _internal_add_controls();
  public:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl& controls(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl* add_controls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl >&
      controls() const;

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* release_pose();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* mutable_pose();
  void set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& _internal_pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* unsafe_arena_release_pose();

  // double scale = 5;
  void clear_scale();
  double scale() const;
  void set_scale(double value);
  private:
  double _internal_scale() const;
  void _internal_set_scale(double value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry > menu_entries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl > controls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose_;
  double scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class InteractiveMarkerControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl) */ {
 public:
  inline InteractiveMarkerControl() : InteractiveMarkerControl(nullptr) {}
  virtual ~InteractiveMarkerControl();

  InteractiveMarkerControl(const InteractiveMarkerControl& from);
  InteractiveMarkerControl(InteractiveMarkerControl&& from) noexcept
    : InteractiveMarkerControl() {
    *this = ::std::move(from);
  }

  inline InteractiveMarkerControl& operator=(const InteractiveMarkerControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractiveMarkerControl& operator=(InteractiveMarkerControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InteractiveMarkerControl& default_instance();

  static inline const InteractiveMarkerControl* internal_default_instance() {
    return reinterpret_cast<const InteractiveMarkerControl*>(
               &_InteractiveMarkerControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InteractiveMarkerControl& a, InteractiveMarkerControl& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractiveMarkerControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractiveMarkerControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InteractiveMarkerControl* New() const final {
    return CreateMaybeMessage<InteractiveMarkerControl>(nullptr);
  }

  InteractiveMarkerControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InteractiveMarkerControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InteractiveMarkerControl& from);
  void MergeFrom(const InteractiveMarkerControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InteractiveMarkerControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl";
  }
  protected:
  explicit InteractiveMarkerControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkersFieldNumber = 6,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 8,
    kOrientationFieldNumber = 2,
    kOrientationModeFieldNumber = 3,
    kInteractionModeFieldNumber = 4,
    kAlwaysVisibleFieldNumber = 5,
    kIndependentMarkerOrientationFieldNumber = 7,
  };
  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.Marker markers = 6;
  int markers_size() const;
  private:
  int _internal_markers_size() const;
  public:
  void clear_markers();
  ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* mutable_markers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::Marker >*
      mutable_markers();
  private:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::Marker& _internal_markers(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* _internal_add_markers();
  public:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::Marker& markers(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* add_markers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::Marker >&
      markers() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 8;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& orientation() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* release_orientation();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& _internal_orientation() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* unsafe_arena_release_orientation();

  // uint32 orientation_mode = 3;
  void clear_orientation_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 orientation_mode() const;
  void set_orientation_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_orientation_mode() const;
  void _internal_set_orientation_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 interaction_mode = 4;
  void clear_interaction_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 interaction_mode() const;
  void set_interaction_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_interaction_mode() const;
  void _internal_set_interaction_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool always_visible = 5;
  void clear_always_visible();
  bool always_visible() const;
  void set_always_visible(bool value);
  private:
  bool _internal_always_visible() const;
  void _internal_set_always_visible(bool value);
  public:

  // bool independent_marker_orientation = 7;
  void clear_independent_marker_orientation();
  bool independent_marker_orientation() const;
  void set_independent_marker_orientation(bool value);
  private:
  bool _internal_independent_marker_orientation() const;
  void _internal_set_independent_marker_orientation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::Marker > markers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 orientation_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interaction_mode_;
  bool always_visible_;
  bool independent_marker_orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class InteractiveMarkerFeedback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback) */ {
 public:
  inline InteractiveMarkerFeedback() : InteractiveMarkerFeedback(nullptr) {}
  virtual ~InteractiveMarkerFeedback();

  InteractiveMarkerFeedback(const InteractiveMarkerFeedback& from);
  InteractiveMarkerFeedback(InteractiveMarkerFeedback&& from) noexcept
    : InteractiveMarkerFeedback() {
    *this = ::std::move(from);
  }

  inline InteractiveMarkerFeedback& operator=(const InteractiveMarkerFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractiveMarkerFeedback& operator=(InteractiveMarkerFeedback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InteractiveMarkerFeedback& default_instance();

  static inline const InteractiveMarkerFeedback* internal_default_instance() {
    return reinterpret_cast<const InteractiveMarkerFeedback*>(
               &_InteractiveMarkerFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InteractiveMarkerFeedback& a, InteractiveMarkerFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractiveMarkerFeedback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractiveMarkerFeedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InteractiveMarkerFeedback* New() const final {
    return CreateMaybeMessage<InteractiveMarkerFeedback>(nullptr);
  }

  InteractiveMarkerFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InteractiveMarkerFeedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InteractiveMarkerFeedback& from);
  void MergeFrom(const InteractiveMarkerFeedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InteractiveMarkerFeedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback";
  }
  protected:
  explicit InteractiveMarkerFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 2,
    kMarkerNameFieldNumber = 3,
    kControlNameFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 6,
    kMousePointFieldNumber = 8,
    kEventTypeFieldNumber = 5,
    kMenuEntryIdFieldNumber = 7,
    kMousePointValidFieldNumber = 9,
  };
  // string client_id = 2;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string marker_name = 3;
  void clear_marker_name();
  const std::string& marker_name() const;
  void set_marker_name(const std::string& value);
  void set_marker_name(std::string&& value);
  void set_marker_name(const char* value);
  void set_marker_name(const char* value, size_t size);
  std::string* mutable_marker_name();
  std::string* release_marker_name();
  void set_allocated_marker_name(std::string* marker_name);
  private:
  const std::string& _internal_marker_name() const;
  void _internal_set_marker_name(const std::string& value);
  std::string* _internal_mutable_marker_name();
  public:

  // string control_name = 4;
  void clear_control_name();
  const std::string& control_name() const;
  void set_control_name(const std::string& value);
  void set_control_name(std::string&& value);
  void set_control_name(const char* value);
  void set_control_name(const char* value, size_t size);
  std::string* mutable_control_name();
  std::string* release_control_name();
  void set_allocated_control_name(std::string* control_name);
  private:
  const std::string& _internal_control_name() const;
  void _internal_set_control_name(const std::string& value);
  std::string* _internal_mutable_control_name();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 6;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* release_pose();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* mutable_pose();
  void set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& _internal_pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* unsafe_arena_release_pose();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Point mouse_point = 8;
  bool has_mouse_point() const;
  private:
  bool _internal_has_mouse_point() const;
  public:
  void clear_mouse_point();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& mouse_point() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* release_mouse_point();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* mutable_mouse_point();
  void set_allocated_mouse_point(::openbot_bridge::ros2_msgs::geometry_msgs::Point* mouse_point);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& _internal_mouse_point() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* _internal_mutable_mouse_point();
  public:
  void unsafe_arena_set_allocated_mouse_point(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Point* mouse_point);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* unsafe_arena_release_mouse_point();

  // uint32 event_type = 5;
  void clear_event_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_type() const;
  void set_event_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_type() const;
  void _internal_set_event_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 menu_entry_id = 7;
  void clear_menu_entry_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 menu_entry_id() const;
  void set_menu_entry_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_menu_entry_id() const;
  void _internal_set_menu_entry_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool mouse_point_valid = 9;
  void clear_mouse_point_valid();
  bool mouse_point_valid() const;
  void set_mouse_point_valid(bool value);
  private:
  bool _internal_mouse_point_valid() const;
  void _internal_set_mouse_point_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marker_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr control_name_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* mouse_point_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 menu_entry_id_;
  bool mouse_point_valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class InteractiveMarkerInit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit) */ {
 public:
  inline InteractiveMarkerInit() : InteractiveMarkerInit(nullptr) {}
  virtual ~InteractiveMarkerInit();

  InteractiveMarkerInit(const InteractiveMarkerInit& from);
  InteractiveMarkerInit(InteractiveMarkerInit&& from) noexcept
    : InteractiveMarkerInit() {
    *this = ::std::move(from);
  }

  inline InteractiveMarkerInit& operator=(const InteractiveMarkerInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractiveMarkerInit& operator=(InteractiveMarkerInit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InteractiveMarkerInit& default_instance();

  static inline const InteractiveMarkerInit* internal_default_instance() {
    return reinterpret_cast<const InteractiveMarkerInit*>(
               &_InteractiveMarkerInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InteractiveMarkerInit& a, InteractiveMarkerInit& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractiveMarkerInit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractiveMarkerInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InteractiveMarkerInit* New() const final {
    return CreateMaybeMessage<InteractiveMarkerInit>(nullptr);
  }

  InteractiveMarkerInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InteractiveMarkerInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InteractiveMarkerInit& from);
  void MergeFrom(const InteractiveMarkerInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InteractiveMarkerInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit";
  }
  protected:
  explicit InteractiveMarkerInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkersFieldNumber = 3,
    kServerIdFieldNumber = 1,
    kSeqNumFieldNumber = 2,
  };
  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker markers = 3;
  int markers_size() const;
  private:
  int _internal_markers_size() const;
  public:
  void clear_markers();
  ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* mutable_markers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker >*
      mutable_markers();
  private:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker& _internal_markers(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* _internal_add_markers();
  public:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker& markers(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* add_markers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker >&
      markers() const;

  // string server_id = 1;
  void clear_server_id();
  const std::string& server_id() const;
  void set_server_id(const std::string& value);
  void set_server_id(std::string&& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  std::string* mutable_server_id();
  std::string* release_server_id();
  void set_allocated_server_id(std::string* server_id);
  private:
  const std::string& _internal_server_id() const;
  void _internal_set_server_id(const std::string& value);
  std::string* _internal_mutable_server_id();
  public:

  // uint64 seq_num = 2;
  void clear_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num() const;
  void set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_num() const;
  void _internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker > markers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class InteractiveMarkerPose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose) */ {
 public:
  inline InteractiveMarkerPose() : InteractiveMarkerPose(nullptr) {}
  virtual ~InteractiveMarkerPose();

  InteractiveMarkerPose(const InteractiveMarkerPose& from);
  InteractiveMarkerPose(InteractiveMarkerPose&& from) noexcept
    : InteractiveMarkerPose() {
    *this = ::std::move(from);
  }

  inline InteractiveMarkerPose& operator=(const InteractiveMarkerPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractiveMarkerPose& operator=(InteractiveMarkerPose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InteractiveMarkerPose& default_instance();

  static inline const InteractiveMarkerPose* internal_default_instance() {
    return reinterpret_cast<const InteractiveMarkerPose*>(
               &_InteractiveMarkerPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InteractiveMarkerPose& a, InteractiveMarkerPose& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractiveMarkerPose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractiveMarkerPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InteractiveMarkerPose* New() const final {
    return CreateMaybeMessage<InteractiveMarkerPose>(nullptr);
  }

  InteractiveMarkerPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InteractiveMarkerPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InteractiveMarkerPose& from);
  void MergeFrom(const InteractiveMarkerPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InteractiveMarkerPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose";
  }
  protected:
  explicit InteractiveMarkerPose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* release_pose();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* mutable_pose();
  void set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& _internal_pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class InteractiveMarkerUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate) */ {
 public:
  inline InteractiveMarkerUpdate() : InteractiveMarkerUpdate(nullptr) {}
  virtual ~InteractiveMarkerUpdate();

  InteractiveMarkerUpdate(const InteractiveMarkerUpdate& from);
  InteractiveMarkerUpdate(InteractiveMarkerUpdate&& from) noexcept
    : InteractiveMarkerUpdate() {
    *this = ::std::move(from);
  }

  inline InteractiveMarkerUpdate& operator=(const InteractiveMarkerUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractiveMarkerUpdate& operator=(InteractiveMarkerUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InteractiveMarkerUpdate& default_instance();

  static inline const InteractiveMarkerUpdate* internal_default_instance() {
    return reinterpret_cast<const InteractiveMarkerUpdate*>(
               &_InteractiveMarkerUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InteractiveMarkerUpdate& a, InteractiveMarkerUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractiveMarkerUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractiveMarkerUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InteractiveMarkerUpdate* New() const final {
    return CreateMaybeMessage<InteractiveMarkerUpdate>(nullptr);
  }

  InteractiveMarkerUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InteractiveMarkerUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InteractiveMarkerUpdate& from);
  void MergeFrom(const InteractiveMarkerUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InteractiveMarkerUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate";
  }
  protected:
  explicit InteractiveMarkerUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkersFieldNumber = 4,
    kPosesFieldNumber = 5,
    kErasesFieldNumber = 6,
    kServerIdFieldNumber = 1,
    kSeqNumFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker markers = 4;
  int markers_size() const;
  private:
  int _internal_markers_size() const;
  public:
  void clear_markers();
  ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* mutable_markers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker >*
      mutable_markers();
  private:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker& _internal_markers(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* _internal_add_markers();
  public:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker& markers(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* add_markers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker >&
      markers() const;

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose poses = 5;
  int poses_size() const;
  private:
  int _internal_poses_size() const;
  public:
  void clear_poses();
  ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose* mutable_poses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose >*
      mutable_poses();
  private:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose& _internal_poses(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose* _internal_add_poses();
  public:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose& poses(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose* add_poses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose >&
      poses() const;

  // repeated string erases = 6;
  int erases_size() const;
  private:
  int _internal_erases_size() const;
  public:
  void clear_erases();
  const std::string& erases(int index) const;
  std::string* mutable_erases(int index);
  void set_erases(int index, const std::string& value);
  void set_erases(int index, std::string&& value);
  void set_erases(int index, const char* value);
  void set_erases(int index, const char* value, size_t size);
  std::string* add_erases();
  void add_erases(const std::string& value);
  void add_erases(std::string&& value);
  void add_erases(const char* value);
  void add_erases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& erases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_erases();
  private:
  const std::string& _internal_erases(int index) const;
  std::string* _internal_add_erases();
  public:

  // string server_id = 1;
  void clear_server_id();
  const std::string& server_id() const;
  void set_server_id(const std::string& value);
  void set_server_id(std::string&& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  std::string* mutable_server_id();
  std::string* release_server_id();
  void set_allocated_server_id(std::string* server_id);
  private:
  const std::string& _internal_server_id() const;
  void _internal_set_server_id(const std::string& value);
  std::string* _internal_mutable_server_id();
  public:

  // uint64 seq_num = 2;
  void clear_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num() const;
  void set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_num() const;
  void _internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker > markers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose > poses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> erases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Marker PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.visualization_msgs.Marker) */ {
 public:
  inline Marker() : Marker(nullptr) {}
  virtual ~Marker();

  Marker(const Marker& from);
  Marker(Marker&& from) noexcept
    : Marker() {
    *this = ::std::move(from);
  }

  inline Marker& operator=(const Marker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Marker& operator=(Marker&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Marker& default_instance();

  static inline const Marker* internal_default_instance() {
    return reinterpret_cast<const Marker*>(
               &_Marker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Marker& a, Marker& b) {
    a.Swap(&b);
  }
  inline void Swap(Marker* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Marker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Marker* New() const final {
    return CreateMaybeMessage<Marker>(nullptr);
  }

  Marker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Marker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Marker& from);
  void MergeFrom(const Marker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Marker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.visualization_msgs.Marker";
  }
  protected:
  explicit Marker(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 11,
    kColorsFieldNumber = 12,
    kUvCoordinatesFieldNumber = 15,
    kNsFieldNumber = 2,
    kTextureResourceFieldNumber = 13,
    kTextFieldNumber = 16,
    kMeshResourceFieldNumber = 17,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 6,
    kScaleFieldNumber = 7,
    kColorFieldNumber = 8,
    kLifetimeFieldNumber = 9,
    kTextureFieldNumber = 14,
    kMeshFileFieldNumber = 18,
    kIdFieldNumber = 3,
    kTypeFieldNumber = 4,
    kActionFieldNumber = 5,
    kFrameLockedFieldNumber = 10,
    kMeshUseEmbeddedMaterialsFieldNumber = 19,
  };
  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point points = 11;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >*
      mutable_points();
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& _internal_points(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* _internal_add_points();
  public:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& points(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >&
      points() const;

  // repeated .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA colors = 12;
  int colors_size() const;
  private:
  int _internal_colors_size() const;
  public:
  void clear_colors();
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* mutable_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA >*
      mutable_colors();
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& _internal_colors(int index) const;
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* _internal_add_colors();
  public:
  const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& colors(int index) const;
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* add_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA >&
      colors() const;

  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate uv_coordinates = 15;
  int uv_coordinates_size() const;
  private:
  int _internal_uv_coordinates_size() const;
  public:
  void clear_uv_coordinates();
  ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate* mutable_uv_coordinates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate >*
      mutable_uv_coordinates();
  private:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate& _internal_uv_coordinates(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate* _internal_add_uv_coordinates();
  public:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate& uv_coordinates(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate* add_uv_coordinates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate >&
      uv_coordinates() const;

  // string ns = 2;
  void clear_ns();
  const std::string& ns() const;
  void set_ns(const std::string& value);
  void set_ns(std::string&& value);
  void set_ns(const char* value);
  void set_ns(const char* value, size_t size);
  std::string* mutable_ns();
  std::string* release_ns();
  void set_allocated_ns(std::string* ns);
  private:
  const std::string& _internal_ns() const;
  void _internal_set_ns(const std::string& value);
  std::string* _internal_mutable_ns();
  public:

  // string texture_resource = 13;
  void clear_texture_resource();
  const std::string& texture_resource() const;
  void set_texture_resource(const std::string& value);
  void set_texture_resource(std::string&& value);
  void set_texture_resource(const char* value);
  void set_texture_resource(const char* value, size_t size);
  std::string* mutable_texture_resource();
  std::string* release_texture_resource();
  void set_allocated_texture_resource(std::string* texture_resource);
  private:
  const std::string& _internal_texture_resource() const;
  void _internal_set_texture_resource(const std::string& value);
  std::string* _internal_mutable_texture_resource();
  public:

  // string text = 16;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string mesh_resource = 17;
  void clear_mesh_resource();
  const std::string& mesh_resource() const;
  void set_mesh_resource(const std::string& value);
  void set_mesh_resource(std::string&& value);
  void set_mesh_resource(const char* value);
  void set_mesh_resource(const char* value, size_t size);
  std::string* mutable_mesh_resource();
  std::string* release_mesh_resource();
  void set_allocated_mesh_resource(std::string* mesh_resource);
  private:
  const std::string& _internal_mesh_resource() const;
  void _internal_set_mesh_resource(const std::string& value);
  std::string* _internal_mutable_mesh_resource();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 6;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* release_pose();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* mutable_pose();
  void set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& _internal_pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* unsafe_arena_release_pose();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 scale = 7;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& scale() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* release_scale();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* mutable_scale();
  void set_allocated_scale(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* scale);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& _internal_scale() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* scale);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* unsafe_arena_release_scale();

  // .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA color = 8;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& color() const;
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* release_color();
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* mutable_color();
  void set_allocated_color(::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* color);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& _internal_color() const;
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* color);
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* unsafe_arena_release_color();

  // .openbot_bridge.ros2_msgs.builtin_interfaces.Duration lifetime = 9;
  bool has_lifetime() const;
  private:
  bool _internal_has_lifetime() const;
  public:
  void clear_lifetime();
  const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration& lifetime() const;
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* release_lifetime();
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* mutable_lifetime();
  void set_allocated_lifetime(::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* lifetime);
  private:
  const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration& _internal_lifetime() const;
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* _internal_mutable_lifetime();
  public:
  void unsafe_arena_set_allocated_lifetime(
      ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* lifetime);
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* unsafe_arena_release_lifetime();

  // .openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage texture = 14;
  bool has_texture() const;
  private:
  bool _internal_has_texture() const;
  public:
  void clear_texture();
  const ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage& texture() const;
  ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* release_texture();
  ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* mutable_texture();
  void set_allocated_texture(::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* texture);
  private:
  const ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage& _internal_texture() const;
  ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* _internal_mutable_texture();
  public:
  void unsafe_arena_set_allocated_texture(
      ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* texture);
  ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* unsafe_arena_release_texture();

  // .openbot_bridge.ros2_msgs.visualization_msgs.MeshFile mesh_file = 18;
  bool has_mesh_file() const;
  private:
  bool _internal_has_mesh_file() const;
  public:
  void clear_mesh_file();
  const ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile& mesh_file() const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* release_mesh_file();
  ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* mutable_mesh_file();
  void set_allocated_mesh_file(::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* mesh_file);
  private:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile& _internal_mesh_file() const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* _internal_mutable_mesh_file();
  public:
  void unsafe_arena_set_allocated_mesh_file(
      ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* mesh_file);
  ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* unsafe_arena_release_mesh_file();

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 action = 5;
  void clear_action();
  ::PROTOBUF_NAMESPACE_ID::int32 action() const;
  void set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action() const;
  void _internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool frame_locked = 10;
  void clear_frame_locked();
  bool frame_locked() const;
  void set_frame_locked(bool value);
  private:
  bool _internal_frame_locked() const;
  void _internal_set_frame_locked(bool value);
  public:

  // bool mesh_use_embedded_materials = 19;
  void clear_mesh_use_embedded_materials();
  bool mesh_use_embedded_materials() const;
  void set_mesh_use_embedded_materials(bool value);
  private:
  bool _internal_mesh_use_embedded_materials() const;
  void _internal_set_mesh_use_embedded_materials(bool value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.visualization_msgs.Marker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA > colors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate > uv_coordinates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texture_resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mesh_resource_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* scale_;
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* color_;
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* lifetime_;
  ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* texture_;
  ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* mesh_file_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_;
  bool frame_locked_;
  bool mesh_use_embedded_materials_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MarkerArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray) */ {
 public:
  inline MarkerArray() : MarkerArray(nullptr) {}
  virtual ~MarkerArray();

  MarkerArray(const MarkerArray& from);
  MarkerArray(MarkerArray&& from) noexcept
    : MarkerArray() {
    *this = ::std::move(from);
  }

  inline MarkerArray& operator=(const MarkerArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkerArray& operator=(MarkerArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarkerArray& default_instance();

  static inline const MarkerArray* internal_default_instance() {
    return reinterpret_cast<const MarkerArray*>(
               &_MarkerArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MarkerArray& a, MarkerArray& b) {
    a.Swap(&b);
  }
  inline void Swap(MarkerArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarkerArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarkerArray* New() const final {
    return CreateMaybeMessage<MarkerArray>(nullptr);
  }

  MarkerArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarkerArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarkerArray& from);
  void MergeFrom(const MarkerArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkerArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray";
  }
  protected:
  explicit MarkerArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkersFieldNumber = 1,
  };
  // repeated .openbot_bridge.ros2_msgs.visualization_msgs.Marker markers = 1;
  int markers_size() const;
  private:
  int _internal_markers_size() const;
  public:
  void clear_markers();
  ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* mutable_markers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::Marker >*
      mutable_markers();
  private:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::Marker& _internal_markers(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* _internal_add_markers();
  public:
  const ::openbot_bridge::ros2_msgs::visualization_msgs::Marker& markers(int index) const;
  ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* add_markers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::Marker >&
      markers() const;

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::Marker > markers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MenuEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry) */ {
 public:
  inline MenuEntry() : MenuEntry(nullptr) {}
  virtual ~MenuEntry();

  MenuEntry(const MenuEntry& from);
  MenuEntry(MenuEntry&& from) noexcept
    : MenuEntry() {
    *this = ::std::move(from);
  }

  inline MenuEntry& operator=(const MenuEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MenuEntry& operator=(MenuEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MenuEntry& default_instance();

  static inline const MenuEntry* internal_default_instance() {
    return reinterpret_cast<const MenuEntry*>(
               &_MenuEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MenuEntry& a, MenuEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MenuEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MenuEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MenuEntry* New() const final {
    return CreateMaybeMessage<MenuEntry>(nullptr);
  }

  MenuEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MenuEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MenuEntry& from);
  void MergeFrom(const MenuEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MenuEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry";
  }
  protected:
  explicit MenuEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 3,
    kCommandFieldNumber = 4,
    kIdFieldNumber = 1,
    kParentIdFieldNumber = 2,
    kCommandTypeFieldNumber = 5,
  };
  // string title = 3;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string command = 4;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 parent_id = 2;
  void clear_parent_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_id() const;
  void set_parent_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_parent_id() const;
  void _internal_set_parent_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 command_type = 5;
  void clear_command_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 command_type() const;
  void set_command_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_command_type() const;
  void _internal_set_command_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MeshFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile) */ {
 public:
  inline MeshFile() : MeshFile(nullptr) {}
  virtual ~MeshFile();

  MeshFile(const MeshFile& from);
  MeshFile(MeshFile&& from) noexcept
    : MeshFile() {
    *this = ::std::move(from);
  }

  inline MeshFile& operator=(const MeshFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshFile& operator=(MeshFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshFile& default_instance();

  static inline const MeshFile* internal_default_instance() {
    return reinterpret_cast<const MeshFile*>(
               &_MeshFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MeshFile& a, MeshFile& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshFile* New() const final {
    return CreateMaybeMessage<MeshFile>(nullptr);
  }

  MeshFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshFile& from);
  void MergeFrom(const MeshFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.visualization_msgs.MeshFile";
  }
  protected:
  explicit MeshFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kFilenameFieldNumber = 1,
  };
  // repeated uint32 data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_data();

  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class UVCoordinate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate) */ {
 public:
  inline UVCoordinate() : UVCoordinate(nullptr) {}
  virtual ~UVCoordinate();

  UVCoordinate(const UVCoordinate& from);
  UVCoordinate(UVCoordinate&& from) noexcept
    : UVCoordinate() {
    *this = ::std::move(from);
  }

  inline UVCoordinate& operator=(const UVCoordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline UVCoordinate& operator=(UVCoordinate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UVCoordinate& default_instance();

  static inline const UVCoordinate* internal_default_instance() {
    return reinterpret_cast<const UVCoordinate*>(
               &_UVCoordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UVCoordinate& a, UVCoordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(UVCoordinate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UVCoordinate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UVCoordinate* New() const final {
    return CreateMaybeMessage<UVCoordinate>(nullptr);
  }

  UVCoordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UVCoordinate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UVCoordinate& from);
  void MergeFrom(const UVCoordinate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UVCoordinate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate";
  }
  protected:
  explicit UVCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUFieldNumber = 1,
    kVFieldNumber = 2,
  };
  // double u = 1;
  void clear_u();
  double u() const;
  void set_u(double value);
  private:
  double _internal_u() const;
  void _internal_set_u(double value);
  public:

  // double v = 2;
  void clear_v();
  double v() const;
  void set_v(double value);
  private:
  double _internal_v() const;
  void _internal_set_v(double value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double u_;
  double v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageMarker

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool ImageMarker::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ImageMarker::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& ImageMarker::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& ImageMarker::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.header)
  return _internal_header();
}
inline void ImageMarker::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* ImageMarker::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* ImageMarker::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* ImageMarker::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* ImageMarker::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.header)
  return _internal_mutable_header();
}
inline void ImageMarker::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.header)
}

// string ns = 2;
inline void ImageMarker::clear_ns() {
  ns_.ClearToEmpty();
}
inline const std::string& ImageMarker::ns() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.ns)
  return _internal_ns();
}
inline void ImageMarker::set_ns(const std::string& value) {
  _internal_set_ns(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.ns)
}
inline std::string* ImageMarker::mutable_ns() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.ns)
  return _internal_mutable_ns();
}
inline const std::string& ImageMarker::_internal_ns() const {
  return ns_.Get();
}
inline void ImageMarker::_internal_set_ns(const std::string& value) {
  
  ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageMarker::set_ns(std::string&& value) {
  
  ns_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.ns)
}
inline void ImageMarker::set_ns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.ns)
}
inline void ImageMarker::set_ns(const char* value,
    size_t size) {
  
  ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.ns)
}
inline std::string* ImageMarker::_internal_mutable_ns() {
  
  return ns_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageMarker::release_ns() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.ns)
  return ns_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageMarker::set_allocated_ns(std::string* ns) {
  if (ns != nullptr) {
    
  } else {
    
  }
  ns_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ns,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.ns)
}

// int32 id = 3;
inline void ImageMarker::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMarker::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMarker::id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.id)
  return _internal_id();
}
inline void ImageMarker::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ImageMarker::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.id)
}

// int32 type = 4;
inline void ImageMarker::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMarker::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMarker::type() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.type)
  return _internal_type();
}
inline void ImageMarker::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void ImageMarker::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.type)
}

// int32 action = 5;
inline void ImageMarker::clear_action() {
  action_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMarker::_internal_action() const {
  return action_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMarker::action() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.action)
  return _internal_action();
}
inline void ImageMarker::_internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_ = value;
}
inline void ImageMarker::set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.action)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Point position = 6;
inline bool ImageMarker::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool ImageMarker::has_position() const {
  return _internal_has_position();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& ImageMarker::_internal_position() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Point&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Point_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& ImageMarker::position() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.position)
  return _internal_position();
}
inline void ImageMarker::unsafe_arena_set_allocated_position(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Point* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.position)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* ImageMarker::release_position() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* ImageMarker::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.position)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* ImageMarker::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Point>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* ImageMarker::mutable_position() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.position)
  return _internal_mutable_position();
}
inline void ImageMarker::set_allocated_position(::openbot_bridge::ros2_msgs::geometry_msgs::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.position)
}

// double scale = 7;
inline void ImageMarker::clear_scale() {
  scale_ = 0;
}
inline double ImageMarker::_internal_scale() const {
  return scale_;
}
inline double ImageMarker::scale() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.scale)
  return _internal_scale();
}
inline void ImageMarker::_internal_set_scale(double value) {
  
  scale_ = value;
}
inline void ImageMarker::set_scale(double value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.scale)
}

// .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA outline_color = 8;
inline bool ImageMarker::_internal_has_outline_color() const {
  return this != internal_default_instance() && outline_color_ != nullptr;
}
inline bool ImageMarker::has_outline_color() const {
  return _internal_has_outline_color();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& ImageMarker::_internal_outline_color() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* p = outline_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_ColorRGBA_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& ImageMarker::outline_color() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.outline_color)
  return _internal_outline_color();
}
inline void ImageMarker::unsafe_arena_set_allocated_outline_color(
    ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* outline_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_color_);
  }
  outline_color_ = outline_color;
  if (outline_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.outline_color)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* ImageMarker::release_outline_color() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* temp = outline_color_;
  outline_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* ImageMarker::unsafe_arena_release_outline_color() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.outline_color)
  
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* temp = outline_color_;
  outline_color_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* ImageMarker::_internal_mutable_outline_color() {
  
  if (outline_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA>(GetArena());
    outline_color_ = p;
  }
  return outline_color_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* ImageMarker::mutable_outline_color() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.outline_color)
  return _internal_mutable_outline_color();
}
inline void ImageMarker::set_allocated_outline_color(::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* outline_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_color_);
  }
  if (outline_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_color)->GetArena();
    if (message_arena != submessage_arena) {
      outline_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outline_color, submessage_arena);
    }
    
  } else {
    
  }
  outline_color_ = outline_color;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.outline_color)
}

// uint32 filled = 9;
inline void ImageMarker::clear_filled() {
  filled_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageMarker::_internal_filled() const {
  return filled_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageMarker::filled() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.filled)
  return _internal_filled();
}
inline void ImageMarker::_internal_set_filled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  filled_ = value;
}
inline void ImageMarker::set_filled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filled(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.filled)
}

// .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA fill_color = 10;
inline bool ImageMarker::_internal_has_fill_color() const {
  return this != internal_default_instance() && fill_color_ != nullptr;
}
inline bool ImageMarker::has_fill_color() const {
  return _internal_has_fill_color();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& ImageMarker::_internal_fill_color() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* p = fill_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_ColorRGBA_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& ImageMarker::fill_color() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.fill_color)
  return _internal_fill_color();
}
inline void ImageMarker::unsafe_arena_set_allocated_fill_color(
    ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* fill_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_color_);
  }
  fill_color_ = fill_color;
  if (fill_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.fill_color)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* ImageMarker::release_fill_color() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* temp = fill_color_;
  fill_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* ImageMarker::unsafe_arena_release_fill_color() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.fill_color)
  
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* temp = fill_color_;
  fill_color_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* ImageMarker::_internal_mutable_fill_color() {
  
  if (fill_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA>(GetArena());
    fill_color_ = p;
  }
  return fill_color_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* ImageMarker::mutable_fill_color() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.fill_color)
  return _internal_mutable_fill_color();
}
inline void ImageMarker::set_allocated_fill_color(::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* fill_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_color_);
  }
  if (fill_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_color)->GetArena();
    if (message_arena != submessage_arena) {
      fill_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill_color, submessage_arena);
    }
    
  } else {
    
  }
  fill_color_ = fill_color;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.fill_color)
}

// .openbot_bridge.ros2_msgs.builtin_interfaces.Duration lifetime = 11;
inline bool ImageMarker::_internal_has_lifetime() const {
  return this != internal_default_instance() && lifetime_ != nullptr;
}
inline bool ImageMarker::has_lifetime() const {
  return _internal_has_lifetime();
}
inline const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration& ImageMarker::_internal_lifetime() const {
  const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* p = lifetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration&>(
      ::openbot_bridge::ros2_msgs::builtin_interfaces::_Duration_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration& ImageMarker::lifetime() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.lifetime)
  return _internal_lifetime();
}
inline void ImageMarker::unsafe_arena_set_allocated_lifetime(
    ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* lifetime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  lifetime_ = lifetime;
  if (lifetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.lifetime)
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* ImageMarker::release_lifetime() {
  
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* temp = lifetime_;
  lifetime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* ImageMarker::unsafe_arena_release_lifetime() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.lifetime)
  
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* temp = lifetime_;
  lifetime_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* ImageMarker::_internal_mutable_lifetime() {
  
  if (lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::builtin_interfaces::Duration>(GetArena());
    lifetime_ = p;
  }
  return lifetime_;
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* ImageMarker::mutable_lifetime() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.lifetime)
  return _internal_mutable_lifetime();
}
inline void ImageMarker::set_allocated_lifetime(::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  if (lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime)->GetArena();
    if (message_arena != submessage_arena) {
      lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifetime, submessage_arena);
    }
    
  } else {
    
  }
  lifetime_ = lifetime;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.lifetime)
}

// repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point points = 12;
inline int ImageMarker::_internal_points_size() const {
  return points_.size();
}
inline int ImageMarker::points_size() const {
  return _internal_points_size();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* ImageMarker::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >*
ImageMarker::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.points)
  return &points_;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& ImageMarker::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& ImageMarker::points(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.points)
  return _internal_points(index);
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* ImageMarker::_internal_add_points() {
  return points_.Add();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* ImageMarker::add_points() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >&
ImageMarker::points() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.points)
  return points_;
}

// repeated .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA outline_colors = 13;
inline int ImageMarker::_internal_outline_colors_size() const {
  return outline_colors_.size();
}
inline int ImageMarker::outline_colors_size() const {
  return _internal_outline_colors_size();
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* ImageMarker::mutable_outline_colors(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.outline_colors)
  return outline_colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA >*
ImageMarker::mutable_outline_colors() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.outline_colors)
  return &outline_colors_;
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& ImageMarker::_internal_outline_colors(int index) const {
  return outline_colors_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& ImageMarker::outline_colors(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.outline_colors)
  return _internal_outline_colors(index);
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* ImageMarker::_internal_add_outline_colors() {
  return outline_colors_.Add();
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* ImageMarker::add_outline_colors() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.outline_colors)
  return _internal_add_outline_colors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA >&
ImageMarker::outline_colors() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.ImageMarker.outline_colors)
  return outline_colors_;
}

// -------------------------------------------------------------------

// InteractiveMarker

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool InteractiveMarker::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool InteractiveMarker::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& InteractiveMarker::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& InteractiveMarker::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.header)
  return _internal_header();
}
inline void InteractiveMarker::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InteractiveMarker::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InteractiveMarker::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InteractiveMarker::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InteractiveMarker::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.header)
  return _internal_mutable_header();
}
inline void InteractiveMarker::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
inline bool InteractiveMarker::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool InteractiveMarker::has_pose() const {
  return _internal_has_pose();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& InteractiveMarker::_internal_pose() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Pose_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& InteractiveMarker::pose() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.pose)
  return _internal_pose();
}
inline void InteractiveMarker::unsafe_arena_set_allocated_pose(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.pose)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* InteractiveMarker::release_pose() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* InteractiveMarker::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.pose)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* InteractiveMarker::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* InteractiveMarker::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.pose)
  return _internal_mutable_pose();
}
inline void InteractiveMarker::set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose)->GetArena();
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.pose)
}

// string name = 3;
inline void InteractiveMarker::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InteractiveMarker::name() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.name)
  return _internal_name();
}
inline void InteractiveMarker::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.name)
}
inline std::string* InteractiveMarker::mutable_name() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.name)
  return _internal_mutable_name();
}
inline const std::string& InteractiveMarker::_internal_name() const {
  return name_.Get();
}
inline void InteractiveMarker::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InteractiveMarker::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.name)
}
inline void InteractiveMarker::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.name)
}
inline void InteractiveMarker::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.name)
}
inline std::string* InteractiveMarker::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InteractiveMarker::release_name() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InteractiveMarker::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.name)
}

// string description = 4;
inline void InteractiveMarker::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& InteractiveMarker::description() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.description)
  return _internal_description();
}
inline void InteractiveMarker::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.description)
}
inline std::string* InteractiveMarker::mutable_description() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.description)
  return _internal_mutable_description();
}
inline const std::string& InteractiveMarker::_internal_description() const {
  return description_.Get();
}
inline void InteractiveMarker::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InteractiveMarker::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.description)
}
inline void InteractiveMarker::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.description)
}
inline void InteractiveMarker::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.description)
}
inline std::string* InteractiveMarker::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InteractiveMarker::release_description() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InteractiveMarker::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.description)
}

// double scale = 5;
inline void InteractiveMarker::clear_scale() {
  scale_ = 0;
}
inline double InteractiveMarker::_internal_scale() const {
  return scale_;
}
inline double InteractiveMarker::scale() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.scale)
  return _internal_scale();
}
inline void InteractiveMarker::_internal_set_scale(double value) {
  
  scale_ = value;
}
inline void InteractiveMarker::set_scale(double value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.scale)
}

// repeated .openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry menu_entries = 6;
inline int InteractiveMarker::_internal_menu_entries_size() const {
  return menu_entries_.size();
}
inline int InteractiveMarker::menu_entries_size() const {
  return _internal_menu_entries_size();
}
inline void InteractiveMarker::clear_menu_entries() {
  menu_entries_.Clear();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry* InteractiveMarker::mutable_menu_entries(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.menu_entries)
  return menu_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry >*
InteractiveMarker::mutable_menu_entries() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.menu_entries)
  return &menu_entries_;
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry& InteractiveMarker::_internal_menu_entries(int index) const {
  return menu_entries_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry& InteractiveMarker::menu_entries(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.menu_entries)
  return _internal_menu_entries(index);
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry* InteractiveMarker::_internal_add_menu_entries() {
  return menu_entries_.Add();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry* InteractiveMarker::add_menu_entries() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.menu_entries)
  return _internal_add_menu_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::MenuEntry >&
InteractiveMarker::menu_entries() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.menu_entries)
  return menu_entries_;
}

// repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl controls = 7;
inline int InteractiveMarker::_internal_controls_size() const {
  return controls_.size();
}
inline int InteractiveMarker::controls_size() const {
  return _internal_controls_size();
}
inline void InteractiveMarker::clear_controls() {
  controls_.Clear();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl* InteractiveMarker::mutable_controls(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.controls)
  return controls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl >*
InteractiveMarker::mutable_controls() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.controls)
  return &controls_;
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl& InteractiveMarker::_internal_controls(int index) const {
  return controls_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl& InteractiveMarker::controls(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.controls)
  return _internal_controls(index);
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl* InteractiveMarker::_internal_add_controls() {
  return controls_.Add();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl* InteractiveMarker::add_controls() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.controls)
  return _internal_add_controls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerControl >&
InteractiveMarker::controls() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker.controls)
  return controls_;
}

// -------------------------------------------------------------------

// InteractiveMarkerControl

// string name = 1;
inline void InteractiveMarkerControl::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InteractiveMarkerControl::name() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.name)
  return _internal_name();
}
inline void InteractiveMarkerControl::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.name)
}
inline std::string* InteractiveMarkerControl::mutable_name() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.name)
  return _internal_mutable_name();
}
inline const std::string& InteractiveMarkerControl::_internal_name() const {
  return name_.Get();
}
inline void InteractiveMarkerControl::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InteractiveMarkerControl::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.name)
}
inline void InteractiveMarkerControl::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.name)
}
inline void InteractiveMarkerControl::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.name)
}
inline std::string* InteractiveMarkerControl::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InteractiveMarkerControl::release_name() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InteractiveMarkerControl::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.name)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion orientation = 2;
inline bool InteractiveMarkerControl::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool InteractiveMarkerControl::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& InteractiveMarkerControl::_internal_orientation() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Quaternion_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& InteractiveMarkerControl::orientation() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.orientation)
  return _internal_orientation();
}
inline void InteractiveMarkerControl::unsafe_arena_set_allocated_orientation(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.orientation)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* InteractiveMarkerControl::release_orientation() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* InteractiveMarkerControl::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.orientation)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* InteractiveMarkerControl::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* InteractiveMarkerControl::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.orientation)
  return _internal_mutable_orientation();
}
inline void InteractiveMarkerControl::set_allocated_orientation(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation)->GetArena();
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.orientation)
}

// uint32 orientation_mode = 3;
inline void InteractiveMarkerControl::clear_orientation_mode() {
  orientation_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InteractiveMarkerControl::_internal_orientation_mode() const {
  return orientation_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InteractiveMarkerControl::orientation_mode() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.orientation_mode)
  return _internal_orientation_mode();
}
inline void InteractiveMarkerControl::_internal_set_orientation_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  orientation_mode_ = value;
}
inline void InteractiveMarkerControl::set_orientation_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_orientation_mode(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.orientation_mode)
}

// uint32 interaction_mode = 4;
inline void InteractiveMarkerControl::clear_interaction_mode() {
  interaction_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InteractiveMarkerControl::_internal_interaction_mode() const {
  return interaction_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InteractiveMarkerControl::interaction_mode() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.interaction_mode)
  return _internal_interaction_mode();
}
inline void InteractiveMarkerControl::_internal_set_interaction_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  interaction_mode_ = value;
}
inline void InteractiveMarkerControl::set_interaction_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_interaction_mode(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.interaction_mode)
}

// bool always_visible = 5;
inline void InteractiveMarkerControl::clear_always_visible() {
  always_visible_ = false;
}
inline bool InteractiveMarkerControl::_internal_always_visible() const {
  return always_visible_;
}
inline bool InteractiveMarkerControl::always_visible() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.always_visible)
  return _internal_always_visible();
}
inline void InteractiveMarkerControl::_internal_set_always_visible(bool value) {
  
  always_visible_ = value;
}
inline void InteractiveMarkerControl::set_always_visible(bool value) {
  _internal_set_always_visible(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.always_visible)
}

// repeated .openbot_bridge.ros2_msgs.visualization_msgs.Marker markers = 6;
inline int InteractiveMarkerControl::_internal_markers_size() const {
  return markers_.size();
}
inline int InteractiveMarkerControl::markers_size() const {
  return _internal_markers_size();
}
inline void InteractiveMarkerControl::clear_markers() {
  markers_.Clear();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* InteractiveMarkerControl::mutable_markers(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.markers)
  return markers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::Marker >*
InteractiveMarkerControl::mutable_markers() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.markers)
  return &markers_;
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::Marker& InteractiveMarkerControl::_internal_markers(int index) const {
  return markers_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::Marker& InteractiveMarkerControl::markers(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.markers)
  return _internal_markers(index);
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* InteractiveMarkerControl::_internal_add_markers() {
  return markers_.Add();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* InteractiveMarkerControl::add_markers() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.markers)
  return _internal_add_markers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::Marker >&
InteractiveMarkerControl::markers() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.markers)
  return markers_;
}

// bool independent_marker_orientation = 7;
inline void InteractiveMarkerControl::clear_independent_marker_orientation() {
  independent_marker_orientation_ = false;
}
inline bool InteractiveMarkerControl::_internal_independent_marker_orientation() const {
  return independent_marker_orientation_;
}
inline bool InteractiveMarkerControl::independent_marker_orientation() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.independent_marker_orientation)
  return _internal_independent_marker_orientation();
}
inline void InteractiveMarkerControl::_internal_set_independent_marker_orientation(bool value) {
  
  independent_marker_orientation_ = value;
}
inline void InteractiveMarkerControl::set_independent_marker_orientation(bool value) {
  _internal_set_independent_marker_orientation(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.independent_marker_orientation)
}

// string description = 8;
inline void InteractiveMarkerControl::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& InteractiveMarkerControl::description() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.description)
  return _internal_description();
}
inline void InteractiveMarkerControl::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.description)
}
inline std::string* InteractiveMarkerControl::mutable_description() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.description)
  return _internal_mutable_description();
}
inline const std::string& InteractiveMarkerControl::_internal_description() const {
  return description_.Get();
}
inline void InteractiveMarkerControl::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InteractiveMarkerControl::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.description)
}
inline void InteractiveMarkerControl::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.description)
}
inline void InteractiveMarkerControl::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.description)
}
inline std::string* InteractiveMarkerControl::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InteractiveMarkerControl::release_description() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InteractiveMarkerControl::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerControl.description)
}

// -------------------------------------------------------------------

// InteractiveMarkerFeedback

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool InteractiveMarkerFeedback::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool InteractiveMarkerFeedback::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& InteractiveMarkerFeedback::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& InteractiveMarkerFeedback::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.header)
  return _internal_header();
}
inline void InteractiveMarkerFeedback::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InteractiveMarkerFeedback::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InteractiveMarkerFeedback::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InteractiveMarkerFeedback::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InteractiveMarkerFeedback::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.header)
  return _internal_mutable_header();
}
inline void InteractiveMarkerFeedback::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.header)
}

// string client_id = 2;
inline void InteractiveMarkerFeedback::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& InteractiveMarkerFeedback::client_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.client_id)
  return _internal_client_id();
}
inline void InteractiveMarkerFeedback::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.client_id)
}
inline std::string* InteractiveMarkerFeedback::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& InteractiveMarkerFeedback::_internal_client_id() const {
  return client_id_.Get();
}
inline void InteractiveMarkerFeedback::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InteractiveMarkerFeedback::set_client_id(std::string&& value) {
  
  client_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.client_id)
}
inline void InteractiveMarkerFeedback::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.client_id)
}
inline void InteractiveMarkerFeedback::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.client_id)
}
inline std::string* InteractiveMarkerFeedback::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InteractiveMarkerFeedback::release_client_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InteractiveMarkerFeedback::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.client_id)
}

// string marker_name = 3;
inline void InteractiveMarkerFeedback::clear_marker_name() {
  marker_name_.ClearToEmpty();
}
inline const std::string& InteractiveMarkerFeedback::marker_name() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.marker_name)
  return _internal_marker_name();
}
inline void InteractiveMarkerFeedback::set_marker_name(const std::string& value) {
  _internal_set_marker_name(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.marker_name)
}
inline std::string* InteractiveMarkerFeedback::mutable_marker_name() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.marker_name)
  return _internal_mutable_marker_name();
}
inline const std::string& InteractiveMarkerFeedback::_internal_marker_name() const {
  return marker_name_.Get();
}
inline void InteractiveMarkerFeedback::_internal_set_marker_name(const std::string& value) {
  
  marker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InteractiveMarkerFeedback::set_marker_name(std::string&& value) {
  
  marker_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.marker_name)
}
inline void InteractiveMarkerFeedback::set_marker_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  marker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.marker_name)
}
inline void InteractiveMarkerFeedback::set_marker_name(const char* value,
    size_t size) {
  
  marker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.marker_name)
}
inline std::string* InteractiveMarkerFeedback::_internal_mutable_marker_name() {
  
  return marker_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InteractiveMarkerFeedback::release_marker_name() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.marker_name)
  return marker_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InteractiveMarkerFeedback::set_allocated_marker_name(std::string* marker_name) {
  if (marker_name != nullptr) {
    
  } else {
    
  }
  marker_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marker_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.marker_name)
}

// string control_name = 4;
inline void InteractiveMarkerFeedback::clear_control_name() {
  control_name_.ClearToEmpty();
}
inline const std::string& InteractiveMarkerFeedback::control_name() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.control_name)
  return _internal_control_name();
}
inline void InteractiveMarkerFeedback::set_control_name(const std::string& value) {
  _internal_set_control_name(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.control_name)
}
inline std::string* InteractiveMarkerFeedback::mutable_control_name() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.control_name)
  return _internal_mutable_control_name();
}
inline const std::string& InteractiveMarkerFeedback::_internal_control_name() const {
  return control_name_.Get();
}
inline void InteractiveMarkerFeedback::_internal_set_control_name(const std::string& value) {
  
  control_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InteractiveMarkerFeedback::set_control_name(std::string&& value) {
  
  control_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.control_name)
}
inline void InteractiveMarkerFeedback::set_control_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  control_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.control_name)
}
inline void InteractiveMarkerFeedback::set_control_name(const char* value,
    size_t size) {
  
  control_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.control_name)
}
inline std::string* InteractiveMarkerFeedback::_internal_mutable_control_name() {
  
  return control_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InteractiveMarkerFeedback::release_control_name() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.control_name)
  return control_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InteractiveMarkerFeedback::set_allocated_control_name(std::string* control_name) {
  if (control_name != nullptr) {
    
  } else {
    
  }
  control_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), control_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.control_name)
}

// uint32 event_type = 5;
inline void InteractiveMarkerFeedback::clear_event_type() {
  event_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InteractiveMarkerFeedback::_internal_event_type() const {
  return event_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InteractiveMarkerFeedback::event_type() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.event_type)
  return _internal_event_type();
}
inline void InteractiveMarkerFeedback::_internal_set_event_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  event_type_ = value;
}
inline void InteractiveMarkerFeedback::set_event_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.event_type)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 6;
inline bool InteractiveMarkerFeedback::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool InteractiveMarkerFeedback::has_pose() const {
  return _internal_has_pose();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& InteractiveMarkerFeedback::_internal_pose() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Pose_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& InteractiveMarkerFeedback::pose() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.pose)
  return _internal_pose();
}
inline void InteractiveMarkerFeedback::unsafe_arena_set_allocated_pose(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.pose)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* InteractiveMarkerFeedback::release_pose() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* InteractiveMarkerFeedback::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.pose)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* InteractiveMarkerFeedback::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* InteractiveMarkerFeedback::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.pose)
  return _internal_mutable_pose();
}
inline void InteractiveMarkerFeedback::set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose)->GetArena();
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.pose)
}

// uint32 menu_entry_id = 7;
inline void InteractiveMarkerFeedback::clear_menu_entry_id() {
  menu_entry_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InteractiveMarkerFeedback::_internal_menu_entry_id() const {
  return menu_entry_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InteractiveMarkerFeedback::menu_entry_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.menu_entry_id)
  return _internal_menu_entry_id();
}
inline void InteractiveMarkerFeedback::_internal_set_menu_entry_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  menu_entry_id_ = value;
}
inline void InteractiveMarkerFeedback::set_menu_entry_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_menu_entry_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.menu_entry_id)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Point mouse_point = 8;
inline bool InteractiveMarkerFeedback::_internal_has_mouse_point() const {
  return this != internal_default_instance() && mouse_point_ != nullptr;
}
inline bool InteractiveMarkerFeedback::has_mouse_point() const {
  return _internal_has_mouse_point();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& InteractiveMarkerFeedback::_internal_mouse_point() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point* p = mouse_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Point&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Point_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& InteractiveMarkerFeedback::mouse_point() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.mouse_point)
  return _internal_mouse_point();
}
inline void InteractiveMarkerFeedback::unsafe_arena_set_allocated_mouse_point(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Point* mouse_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mouse_point_);
  }
  mouse_point_ = mouse_point;
  if (mouse_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.mouse_point)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* InteractiveMarkerFeedback::release_mouse_point() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* temp = mouse_point_;
  mouse_point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* InteractiveMarkerFeedback::unsafe_arena_release_mouse_point() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.mouse_point)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* temp = mouse_point_;
  mouse_point_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* InteractiveMarkerFeedback::_internal_mutable_mouse_point() {
  
  if (mouse_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Point>(GetArena());
    mouse_point_ = p;
  }
  return mouse_point_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* InteractiveMarkerFeedback::mutable_mouse_point() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.mouse_point)
  return _internal_mutable_mouse_point();
}
inline void InteractiveMarkerFeedback::set_allocated_mouse_point(::openbot_bridge::ros2_msgs::geometry_msgs::Point* mouse_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mouse_point_);
  }
  if (mouse_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mouse_point)->GetArena();
    if (message_arena != submessage_arena) {
      mouse_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mouse_point, submessage_arena);
    }
    
  } else {
    
  }
  mouse_point_ = mouse_point;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.mouse_point)
}

// bool mouse_point_valid = 9;
inline void InteractiveMarkerFeedback::clear_mouse_point_valid() {
  mouse_point_valid_ = false;
}
inline bool InteractiveMarkerFeedback::_internal_mouse_point_valid() const {
  return mouse_point_valid_;
}
inline bool InteractiveMarkerFeedback::mouse_point_valid() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.mouse_point_valid)
  return _internal_mouse_point_valid();
}
inline void InteractiveMarkerFeedback::_internal_set_mouse_point_valid(bool value) {
  
  mouse_point_valid_ = value;
}
inline void InteractiveMarkerFeedback::set_mouse_point_valid(bool value) {
  _internal_set_mouse_point_valid(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerFeedback.mouse_point_valid)
}

// -------------------------------------------------------------------

// InteractiveMarkerInit

// string server_id = 1;
inline void InteractiveMarkerInit::clear_server_id() {
  server_id_.ClearToEmpty();
}
inline const std::string& InteractiveMarkerInit::server_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.server_id)
  return _internal_server_id();
}
inline void InteractiveMarkerInit::set_server_id(const std::string& value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.server_id)
}
inline std::string* InteractiveMarkerInit::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.server_id)
  return _internal_mutable_server_id();
}
inline const std::string& InteractiveMarkerInit::_internal_server_id() const {
  return server_id_.Get();
}
inline void InteractiveMarkerInit::_internal_set_server_id(const std::string& value) {
  
  server_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InteractiveMarkerInit::set_server_id(std::string&& value) {
  
  server_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.server_id)
}
inline void InteractiveMarkerInit::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.server_id)
}
inline void InteractiveMarkerInit::set_server_id(const char* value,
    size_t size) {
  
  server_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.server_id)
}
inline std::string* InteractiveMarkerInit::_internal_mutable_server_id() {
  
  return server_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InteractiveMarkerInit::release_server_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.server_id)
  return server_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InteractiveMarkerInit::set_allocated_server_id(std::string* server_id) {
  if (server_id != nullptr) {
    
  } else {
    
  }
  server_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.server_id)
}

// uint64 seq_num = 2;
inline void InteractiveMarkerInit::clear_seq_num() {
  seq_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InteractiveMarkerInit::_internal_seq_num() const {
  return seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InteractiveMarkerInit::seq_num() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.seq_num)
  return _internal_seq_num();
}
inline void InteractiveMarkerInit::_internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_num_ = value;
}
inline void InteractiveMarkerInit::set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.seq_num)
}

// repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker markers = 3;
inline int InteractiveMarkerInit::_internal_markers_size() const {
  return markers_.size();
}
inline int InteractiveMarkerInit::markers_size() const {
  return _internal_markers_size();
}
inline void InteractiveMarkerInit::clear_markers() {
  markers_.Clear();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* InteractiveMarkerInit::mutable_markers(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.markers)
  return markers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker >*
InteractiveMarkerInit::mutable_markers() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.markers)
  return &markers_;
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker& InteractiveMarkerInit::_internal_markers(int index) const {
  return markers_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker& InteractiveMarkerInit::markers(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.markers)
  return _internal_markers(index);
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* InteractiveMarkerInit::_internal_add_markers() {
  return markers_.Add();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* InteractiveMarkerInit::add_markers() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.markers)
  return _internal_add_markers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker >&
InteractiveMarkerInit::markers() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerInit.markers)
  return markers_;
}

// -------------------------------------------------------------------

// InteractiveMarkerPose

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool InteractiveMarkerPose::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool InteractiveMarkerPose::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& InteractiveMarkerPose::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& InteractiveMarkerPose::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.header)
  return _internal_header();
}
inline void InteractiveMarkerPose::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InteractiveMarkerPose::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InteractiveMarkerPose::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InteractiveMarkerPose::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InteractiveMarkerPose::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.header)
  return _internal_mutable_header();
}
inline void InteractiveMarkerPose::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
inline bool InteractiveMarkerPose::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool InteractiveMarkerPose::has_pose() const {
  return _internal_has_pose();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& InteractiveMarkerPose::_internal_pose() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Pose_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& InteractiveMarkerPose::pose() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.pose)
  return _internal_pose();
}
inline void InteractiveMarkerPose::unsafe_arena_set_allocated_pose(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.pose)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* InteractiveMarkerPose::release_pose() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* InteractiveMarkerPose::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.pose)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* InteractiveMarkerPose::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* InteractiveMarkerPose::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.pose)
  return _internal_mutable_pose();
}
inline void InteractiveMarkerPose::set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose)->GetArena();
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.pose)
}

// string name = 3;
inline void InteractiveMarkerPose::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InteractiveMarkerPose::name() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.name)
  return _internal_name();
}
inline void InteractiveMarkerPose::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.name)
}
inline std::string* InteractiveMarkerPose::mutable_name() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.name)
  return _internal_mutable_name();
}
inline const std::string& InteractiveMarkerPose::_internal_name() const {
  return name_.Get();
}
inline void InteractiveMarkerPose::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InteractiveMarkerPose::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.name)
}
inline void InteractiveMarkerPose::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.name)
}
inline void InteractiveMarkerPose::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.name)
}
inline std::string* InteractiveMarkerPose::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InteractiveMarkerPose::release_name() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InteractiveMarkerPose::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose.name)
}

// -------------------------------------------------------------------

// InteractiveMarkerUpdate

// string server_id = 1;
inline void InteractiveMarkerUpdate::clear_server_id() {
  server_id_.ClearToEmpty();
}
inline const std::string& InteractiveMarkerUpdate::server_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.server_id)
  return _internal_server_id();
}
inline void InteractiveMarkerUpdate::set_server_id(const std::string& value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.server_id)
}
inline std::string* InteractiveMarkerUpdate::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.server_id)
  return _internal_mutable_server_id();
}
inline const std::string& InteractiveMarkerUpdate::_internal_server_id() const {
  return server_id_.Get();
}
inline void InteractiveMarkerUpdate::_internal_set_server_id(const std::string& value) {
  
  server_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InteractiveMarkerUpdate::set_server_id(std::string&& value) {
  
  server_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.server_id)
}
inline void InteractiveMarkerUpdate::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.server_id)
}
inline void InteractiveMarkerUpdate::set_server_id(const char* value,
    size_t size) {
  
  server_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.server_id)
}
inline std::string* InteractiveMarkerUpdate::_internal_mutable_server_id() {
  
  return server_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InteractiveMarkerUpdate::release_server_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.server_id)
  return server_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InteractiveMarkerUpdate::set_allocated_server_id(std::string* server_id) {
  if (server_id != nullptr) {
    
  } else {
    
  }
  server_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.server_id)
}

// uint64 seq_num = 2;
inline void InteractiveMarkerUpdate::clear_seq_num() {
  seq_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InteractiveMarkerUpdate::_internal_seq_num() const {
  return seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InteractiveMarkerUpdate::seq_num() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.seq_num)
  return _internal_seq_num();
}
inline void InteractiveMarkerUpdate::_internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_num_ = value;
}
inline void InteractiveMarkerUpdate::set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.seq_num)
}

// uint32 type = 3;
inline void InteractiveMarkerUpdate::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InteractiveMarkerUpdate::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InteractiveMarkerUpdate::type() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.type)
  return _internal_type();
}
inline void InteractiveMarkerUpdate::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void InteractiveMarkerUpdate::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.type)
}

// repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarker markers = 4;
inline int InteractiveMarkerUpdate::_internal_markers_size() const {
  return markers_.size();
}
inline int InteractiveMarkerUpdate::markers_size() const {
  return _internal_markers_size();
}
inline void InteractiveMarkerUpdate::clear_markers() {
  markers_.Clear();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* InteractiveMarkerUpdate::mutable_markers(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.markers)
  return markers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker >*
InteractiveMarkerUpdate::mutable_markers() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.markers)
  return &markers_;
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker& InteractiveMarkerUpdate::_internal_markers(int index) const {
  return markers_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker& InteractiveMarkerUpdate::markers(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.markers)
  return _internal_markers(index);
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* InteractiveMarkerUpdate::_internal_add_markers() {
  return markers_.Add();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker* InteractiveMarkerUpdate::add_markers() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.markers)
  return _internal_add_markers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarker >&
InteractiveMarkerUpdate::markers() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.markers)
  return markers_;
}

// repeated .openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerPose poses = 5;
inline int InteractiveMarkerUpdate::_internal_poses_size() const {
  return poses_.size();
}
inline int InteractiveMarkerUpdate::poses_size() const {
  return _internal_poses_size();
}
inline void InteractiveMarkerUpdate::clear_poses() {
  poses_.Clear();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose* InteractiveMarkerUpdate::mutable_poses(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.poses)
  return poses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose >*
InteractiveMarkerUpdate::mutable_poses() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.poses)
  return &poses_;
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose& InteractiveMarkerUpdate::_internal_poses(int index) const {
  return poses_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose& InteractiveMarkerUpdate::poses(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.poses)
  return _internal_poses(index);
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose* InteractiveMarkerUpdate::_internal_add_poses() {
  return poses_.Add();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose* InteractiveMarkerUpdate::add_poses() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.poses)
  return _internal_add_poses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::InteractiveMarkerPose >&
InteractiveMarkerUpdate::poses() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.poses)
  return poses_;
}

// repeated string erases = 6;
inline int InteractiveMarkerUpdate::_internal_erases_size() const {
  return erases_.size();
}
inline int InteractiveMarkerUpdate::erases_size() const {
  return _internal_erases_size();
}
inline void InteractiveMarkerUpdate::clear_erases() {
  erases_.Clear();
}
inline std::string* InteractiveMarkerUpdate::add_erases() {
  // @@protoc_insertion_point(field_add_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases)
  return _internal_add_erases();
}
inline const std::string& InteractiveMarkerUpdate::_internal_erases(int index) const {
  return erases_.Get(index);
}
inline const std::string& InteractiveMarkerUpdate::erases(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases)
  return _internal_erases(index);
}
inline std::string* InteractiveMarkerUpdate::mutable_erases(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases)
  return erases_.Mutable(index);
}
inline void InteractiveMarkerUpdate::set_erases(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases)
  erases_.Mutable(index)->assign(value);
}
inline void InteractiveMarkerUpdate::set_erases(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases)
  erases_.Mutable(index)->assign(std::move(value));
}
inline void InteractiveMarkerUpdate::set_erases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  erases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases)
}
inline void InteractiveMarkerUpdate::set_erases(int index, const char* value, size_t size) {
  erases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases)
}
inline std::string* InteractiveMarkerUpdate::_internal_add_erases() {
  return erases_.Add();
}
inline void InteractiveMarkerUpdate::add_erases(const std::string& value) {
  erases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases)
}
inline void InteractiveMarkerUpdate::add_erases(std::string&& value) {
  erases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases)
}
inline void InteractiveMarkerUpdate::add_erases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  erases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases)
}
inline void InteractiveMarkerUpdate::add_erases(const char* value, size_t size) {
  erases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InteractiveMarkerUpdate::erases() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases)
  return erases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InteractiveMarkerUpdate::mutable_erases() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.InteractiveMarkerUpdate.erases)
  return &erases_;
}

// -------------------------------------------------------------------

// Marker

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Marker::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Marker::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Marker::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Marker::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.header)
  return _internal_header();
}
inline void Marker::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Marker::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Marker::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.Marker.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Marker::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Marker::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.header)
  return _internal_mutable_header();
}
inline void Marker::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.header)
}

// string ns = 2;
inline void Marker::clear_ns() {
  ns_.ClearToEmpty();
}
inline const std::string& Marker::ns() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.ns)
  return _internal_ns();
}
inline void Marker::set_ns(const std::string& value) {
  _internal_set_ns(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.Marker.ns)
}
inline std::string* Marker::mutable_ns() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.ns)
  return _internal_mutable_ns();
}
inline const std::string& Marker::_internal_ns() const {
  return ns_.Get();
}
inline void Marker::_internal_set_ns(const std::string& value) {
  
  ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Marker::set_ns(std::string&& value) {
  
  ns_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.Marker.ns)
}
inline void Marker::set_ns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.Marker.ns)
}
inline void Marker::set_ns(const char* value,
    size_t size) {
  
  ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.Marker.ns)
}
inline std::string* Marker::_internal_mutable_ns() {
  
  return ns_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Marker::release_ns() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.Marker.ns)
  return ns_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Marker::set_allocated_ns(std::string* ns) {
  if (ns != nullptr) {
    
  } else {
    
  }
  ns_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ns,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.ns)
}

// int32 id = 3;
inline void Marker::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Marker::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Marker::id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.id)
  return _internal_id();
}
inline void Marker::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Marker::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.Marker.id)
}

// int32 type = 4;
inline void Marker::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Marker::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Marker::type() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.type)
  return _internal_type();
}
inline void Marker::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Marker::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.Marker.type)
}

// int32 action = 5;
inline void Marker::clear_action() {
  action_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Marker::_internal_action() const {
  return action_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Marker::action() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.action)
  return _internal_action();
}
inline void Marker::_internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_ = value;
}
inline void Marker::set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.Marker.action)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 6;
inline bool Marker::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Marker::has_pose() const {
  return _internal_has_pose();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& Marker::_internal_pose() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Pose_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& Marker::pose() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.pose)
  return _internal_pose();
}
inline void Marker::unsafe_arena_set_allocated_pose(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.pose)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* Marker::release_pose() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* Marker::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.Marker.pose)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* Marker::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* Marker::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.pose)
  return _internal_mutable_pose();
}
inline void Marker::set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose)->GetArena();
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.pose)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 scale = 7;
inline bool Marker::_internal_has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline bool Marker::has_scale() const {
  return _internal_has_scale();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Marker::_internal_scale() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* p = scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Marker::scale() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.scale)
  return _internal_scale();
}
inline void Marker::unsafe_arena_set_allocated_scale(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* scale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.scale)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Marker::release_scale() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = scale_;
  scale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Marker::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.Marker.scale)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Marker::_internal_mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(GetArena());
    scale_ = p;
  }
  return scale_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Marker::mutable_scale() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.scale)
  return _internal_mutable_scale();
}
inline void Marker::set_allocated_scale(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale)->GetArena();
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.scale)
}

// .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA color = 8;
inline bool Marker::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool Marker::has_color() const {
  return _internal_has_color();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& Marker::_internal_color() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_ColorRGBA_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& Marker::color() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.color)
  return _internal_color();
}
inline void Marker::unsafe_arena_set_allocated_color(
    ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.color)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* Marker::release_color() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* Marker::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.Marker.color)
  
  ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* Marker::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* Marker::mutable_color() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.color)
  return _internal_mutable_color();
}
inline void Marker::set_allocated_color(::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color)->GetArena();
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.color)
}

// .openbot_bridge.ros2_msgs.builtin_interfaces.Duration lifetime = 9;
inline bool Marker::_internal_has_lifetime() const {
  return this != internal_default_instance() && lifetime_ != nullptr;
}
inline bool Marker::has_lifetime() const {
  return _internal_has_lifetime();
}
inline const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration& Marker::_internal_lifetime() const {
  const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* p = lifetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration&>(
      ::openbot_bridge::ros2_msgs::builtin_interfaces::_Duration_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration& Marker::lifetime() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.lifetime)
  return _internal_lifetime();
}
inline void Marker::unsafe_arena_set_allocated_lifetime(
    ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* lifetime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  lifetime_ = lifetime;
  if (lifetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.lifetime)
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* Marker::release_lifetime() {
  
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* temp = lifetime_;
  lifetime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* Marker::unsafe_arena_release_lifetime() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.Marker.lifetime)
  
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* temp = lifetime_;
  lifetime_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* Marker::_internal_mutable_lifetime() {
  
  if (lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::builtin_interfaces::Duration>(GetArena());
    lifetime_ = p;
  }
  return lifetime_;
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* Marker::mutable_lifetime() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.lifetime)
  return _internal_mutable_lifetime();
}
inline void Marker::set_allocated_lifetime(::openbot_bridge::ros2_msgs::builtin_interfaces::Duration* lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  if (lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime)->GetArena();
    if (message_arena != submessage_arena) {
      lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifetime, submessage_arena);
    }
    
  } else {
    
  }
  lifetime_ = lifetime;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.lifetime)
}

// bool frame_locked = 10;
inline void Marker::clear_frame_locked() {
  frame_locked_ = false;
}
inline bool Marker::_internal_frame_locked() const {
  return frame_locked_;
}
inline bool Marker::frame_locked() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.frame_locked)
  return _internal_frame_locked();
}
inline void Marker::_internal_set_frame_locked(bool value) {
  
  frame_locked_ = value;
}
inline void Marker::set_frame_locked(bool value) {
  _internal_set_frame_locked(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.Marker.frame_locked)
}

// repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point points = 11;
inline int Marker::_internal_points_size() const {
  return points_.size();
}
inline int Marker::points_size() const {
  return _internal_points_size();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* Marker::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >*
Marker::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.Marker.points)
  return &points_;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& Marker::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& Marker::points(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.points)
  return _internal_points(index);
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* Marker::_internal_add_points() {
  return points_.Add();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* Marker::add_points() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.Marker.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >&
Marker::points() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.Marker.points)
  return points_;
}

// repeated .openbot_bridge.ros2_msgs.std_msgs.ColorRGBA colors = 12;
inline int Marker::_internal_colors_size() const {
  return colors_.size();
}
inline int Marker::colors_size() const {
  return _internal_colors_size();
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* Marker::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.colors)
  return colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA >*
Marker::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.Marker.colors)
  return &colors_;
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& Marker::_internal_colors(int index) const {
  return colors_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA& Marker::colors(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.colors)
  return _internal_colors(index);
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* Marker::_internal_add_colors() {
  return colors_.Add();
}
inline ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA* Marker::add_colors() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.Marker.colors)
  return _internal_add_colors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::std_msgs::ColorRGBA >&
Marker::colors() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.Marker.colors)
  return colors_;
}

// string texture_resource = 13;
inline void Marker::clear_texture_resource() {
  texture_resource_.ClearToEmpty();
}
inline const std::string& Marker::texture_resource() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture_resource)
  return _internal_texture_resource();
}
inline void Marker::set_texture_resource(const std::string& value) {
  _internal_set_texture_resource(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture_resource)
}
inline std::string* Marker::mutable_texture_resource() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture_resource)
  return _internal_mutable_texture_resource();
}
inline const std::string& Marker::_internal_texture_resource() const {
  return texture_resource_.Get();
}
inline void Marker::_internal_set_texture_resource(const std::string& value) {
  
  texture_resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Marker::set_texture_resource(std::string&& value) {
  
  texture_resource_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture_resource)
}
inline void Marker::set_texture_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  texture_resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture_resource)
}
inline void Marker::set_texture_resource(const char* value,
    size_t size) {
  
  texture_resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture_resource)
}
inline std::string* Marker::_internal_mutable_texture_resource() {
  
  return texture_resource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Marker::release_texture_resource() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture_resource)
  return texture_resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Marker::set_allocated_texture_resource(std::string* texture_resource) {
  if (texture_resource != nullptr) {
    
  } else {
    
  }
  texture_resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), texture_resource,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture_resource)
}

// .openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage texture = 14;
inline bool Marker::_internal_has_texture() const {
  return this != internal_default_instance() && texture_ != nullptr;
}
inline bool Marker::has_texture() const {
  return _internal_has_texture();
}
inline const ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage& Marker::_internal_texture() const {
  const ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* p = texture_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage&>(
      ::openbot_bridge::ros2_msgs::sensor_msgs::_CompressedImage_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage& Marker::texture() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture)
  return _internal_texture();
}
inline void Marker::unsafe_arena_set_allocated_texture(
    ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* texture) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(texture_);
  }
  texture_ = texture;
  if (texture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture)
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* Marker::release_texture() {
  
  ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* temp = texture_;
  texture_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* Marker::unsafe_arena_release_texture() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture)
  
  ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* temp = texture_;
  texture_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* Marker::_internal_mutable_texture() {
  
  if (texture_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage>(GetArena());
    texture_ = p;
  }
  return texture_;
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* Marker::mutable_texture() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture)
  return _internal_mutable_texture();
}
inline void Marker::set_allocated_texture(::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* texture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(texture_);
  }
  if (texture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(texture)->GetArena();
    if (message_arena != submessage_arena) {
      texture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texture, submessage_arena);
    }
    
  } else {
    
  }
  texture_ = texture;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.texture)
}

// repeated .openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate uv_coordinates = 15;
inline int Marker::_internal_uv_coordinates_size() const {
  return uv_coordinates_.size();
}
inline int Marker::uv_coordinates_size() const {
  return _internal_uv_coordinates_size();
}
inline void Marker::clear_uv_coordinates() {
  uv_coordinates_.Clear();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate* Marker::mutable_uv_coordinates(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.uv_coordinates)
  return uv_coordinates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate >*
Marker::mutable_uv_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.Marker.uv_coordinates)
  return &uv_coordinates_;
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate& Marker::_internal_uv_coordinates(int index) const {
  return uv_coordinates_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate& Marker::uv_coordinates(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.uv_coordinates)
  return _internal_uv_coordinates(index);
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate* Marker::_internal_add_uv_coordinates() {
  return uv_coordinates_.Add();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate* Marker::add_uv_coordinates() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.Marker.uv_coordinates)
  return _internal_add_uv_coordinates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::UVCoordinate >&
Marker::uv_coordinates() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.Marker.uv_coordinates)
  return uv_coordinates_;
}

// string text = 16;
inline void Marker::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& Marker::text() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.text)
  return _internal_text();
}
inline void Marker::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.Marker.text)
}
inline std::string* Marker::mutable_text() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.text)
  return _internal_mutable_text();
}
inline const std::string& Marker::_internal_text() const {
  return text_.Get();
}
inline void Marker::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Marker::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.Marker.text)
}
inline void Marker::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.Marker.text)
}
inline void Marker::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.Marker.text)
}
inline std::string* Marker::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Marker::release_text() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.Marker.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Marker::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.text)
}

// string mesh_resource = 17;
inline void Marker::clear_mesh_resource() {
  mesh_resource_.ClearToEmpty();
}
inline const std::string& Marker::mesh_resource() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_resource)
  return _internal_mesh_resource();
}
inline void Marker::set_mesh_resource(const std::string& value) {
  _internal_set_mesh_resource(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_resource)
}
inline std::string* Marker::mutable_mesh_resource() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_resource)
  return _internal_mutable_mesh_resource();
}
inline const std::string& Marker::_internal_mesh_resource() const {
  return mesh_resource_.Get();
}
inline void Marker::_internal_set_mesh_resource(const std::string& value) {
  
  mesh_resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Marker::set_mesh_resource(std::string&& value) {
  
  mesh_resource_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_resource)
}
inline void Marker::set_mesh_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mesh_resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_resource)
}
inline void Marker::set_mesh_resource(const char* value,
    size_t size) {
  
  mesh_resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_resource)
}
inline std::string* Marker::_internal_mutable_mesh_resource() {
  
  return mesh_resource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Marker::release_mesh_resource() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_resource)
  return mesh_resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Marker::set_allocated_mesh_resource(std::string* mesh_resource) {
  if (mesh_resource != nullptr) {
    
  } else {
    
  }
  mesh_resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mesh_resource,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_resource)
}

// .openbot_bridge.ros2_msgs.visualization_msgs.MeshFile mesh_file = 18;
inline bool Marker::_internal_has_mesh_file() const {
  return this != internal_default_instance() && mesh_file_ != nullptr;
}
inline bool Marker::has_mesh_file() const {
  return _internal_has_mesh_file();
}
inline void Marker::clear_mesh_file() {
  if (GetArena() == nullptr && mesh_file_ != nullptr) {
    delete mesh_file_;
  }
  mesh_file_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile& Marker::_internal_mesh_file() const {
  const ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* p = mesh_file_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile&>(
      ::openbot_bridge::ros2_msgs::visualization_msgs::_MeshFile_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile& Marker::mesh_file() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_file)
  return _internal_mesh_file();
}
inline void Marker::unsafe_arena_set_allocated_mesh_file(
    ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* mesh_file) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_file_);
  }
  mesh_file_ = mesh_file;
  if (mesh_file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_file)
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* Marker::release_mesh_file() {
  
  ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* temp = mesh_file_;
  mesh_file_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* Marker::unsafe_arena_release_mesh_file() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_file)
  
  ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* temp = mesh_file_;
  mesh_file_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* Marker::_internal_mutable_mesh_file() {
  
  if (mesh_file_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile>(GetArena());
    mesh_file_ = p;
  }
  return mesh_file_;
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* Marker::mutable_mesh_file() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_file)
  return _internal_mutable_mesh_file();
}
inline void Marker::set_allocated_mesh_file(::openbot_bridge::ros2_msgs::visualization_msgs::MeshFile* mesh_file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mesh_file_;
  }
  if (mesh_file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mesh_file);
    if (message_arena != submessage_arena) {
      mesh_file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh_file, submessage_arena);
    }
    
  } else {
    
  }
  mesh_file_ = mesh_file;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_file)
}

// bool mesh_use_embedded_materials = 19;
inline void Marker::clear_mesh_use_embedded_materials() {
  mesh_use_embedded_materials_ = false;
}
inline bool Marker::_internal_mesh_use_embedded_materials() const {
  return mesh_use_embedded_materials_;
}
inline bool Marker::mesh_use_embedded_materials() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_use_embedded_materials)
  return _internal_mesh_use_embedded_materials();
}
inline void Marker::_internal_set_mesh_use_embedded_materials(bool value) {
  
  mesh_use_embedded_materials_ = value;
}
inline void Marker::set_mesh_use_embedded_materials(bool value) {
  _internal_set_mesh_use_embedded_materials(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.Marker.mesh_use_embedded_materials)
}

// -------------------------------------------------------------------

// MarkerArray

// repeated .openbot_bridge.ros2_msgs.visualization_msgs.Marker markers = 1;
inline int MarkerArray::_internal_markers_size() const {
  return markers_.size();
}
inline int MarkerArray::markers_size() const {
  return _internal_markers_size();
}
inline void MarkerArray::clear_markers() {
  markers_.Clear();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* MarkerArray::mutable_markers(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray.markers)
  return markers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::Marker >*
MarkerArray::mutable_markers() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray.markers)
  return &markers_;
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::Marker& MarkerArray::_internal_markers(int index) const {
  return markers_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::visualization_msgs::Marker& MarkerArray::markers(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray.markers)
  return _internal_markers(index);
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* MarkerArray::_internal_add_markers() {
  return markers_.Add();
}
inline ::openbot_bridge::ros2_msgs::visualization_msgs::Marker* MarkerArray::add_markers() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray.markers)
  return _internal_add_markers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::visualization_msgs::Marker >&
MarkerArray::markers() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.MarkerArray.markers)
  return markers_;
}

// -------------------------------------------------------------------

// MenuEntry

// uint32 id = 1;
inline void MenuEntry::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MenuEntry::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MenuEntry::id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.id)
  return _internal_id();
}
inline void MenuEntry::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void MenuEntry::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.id)
}

// uint32 parent_id = 2;
inline void MenuEntry::clear_parent_id() {
  parent_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MenuEntry::_internal_parent_id() const {
  return parent_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MenuEntry::parent_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.parent_id)
  return _internal_parent_id();
}
inline void MenuEntry::_internal_set_parent_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  parent_id_ = value;
}
inline void MenuEntry::set_parent_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.parent_id)
}

// string title = 3;
inline void MenuEntry::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& MenuEntry::title() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.title)
  return _internal_title();
}
inline void MenuEntry::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.title)
}
inline std::string* MenuEntry::mutable_title() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.title)
  return _internal_mutable_title();
}
inline const std::string& MenuEntry::_internal_title() const {
  return title_.Get();
}
inline void MenuEntry::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MenuEntry::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.title)
}
inline void MenuEntry::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.title)
}
inline void MenuEntry::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.title)
}
inline std::string* MenuEntry::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MenuEntry::release_title() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MenuEntry::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.title)
}

// string command = 4;
inline void MenuEntry::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& MenuEntry::command() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.command)
  return _internal_command();
}
inline void MenuEntry::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.command)
}
inline std::string* MenuEntry::mutable_command() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.command)
  return _internal_mutable_command();
}
inline const std::string& MenuEntry::_internal_command() const {
  return command_.Get();
}
inline void MenuEntry::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MenuEntry::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.command)
}
inline void MenuEntry::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.command)
}
inline void MenuEntry::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.command)
}
inline std::string* MenuEntry::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MenuEntry::release_command() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MenuEntry::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.command)
}

// uint32 command_type = 5;
inline void MenuEntry::clear_command_type() {
  command_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MenuEntry::_internal_command_type() const {
  return command_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MenuEntry::command_type() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.command_type)
  return _internal_command_type();
}
inline void MenuEntry::_internal_set_command_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  command_type_ = value;
}
inline void MenuEntry::set_command_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_command_type(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.MenuEntry.command_type)
}

// -------------------------------------------------------------------

// MeshFile

// string filename = 1;
inline void MeshFile::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& MeshFile::filename() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.filename)
  return _internal_filename();
}
inline void MeshFile::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.filename)
}
inline std::string* MeshFile::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.filename)
  return _internal_mutable_filename();
}
inline const std::string& MeshFile::_internal_filename() const {
  return filename_.Get();
}
inline void MeshFile::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MeshFile::set_filename(std::string&& value) {
  
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.filename)
}
inline void MeshFile::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.filename)
}
inline void MeshFile::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.filename)
}
inline std::string* MeshFile::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MeshFile::release_filename() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshFile::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.filename)
}

// repeated uint32 data = 2;
inline int MeshFile::_internal_data_size() const {
  return data_.size();
}
inline int MeshFile::data_size() const {
  return _internal_data_size();
}
inline void MeshFile::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MeshFile::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MeshFile::data(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.data)
  return _internal_data(index);
}
inline void MeshFile::set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.data)
}
inline void MeshFile::_internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Add(value);
}
inline void MeshFile::add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MeshFile::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MeshFile::data() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MeshFile::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MeshFile::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.visualization_msgs.MeshFile.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// UVCoordinate

// double u = 1;
inline void UVCoordinate::clear_u() {
  u_ = 0;
}
inline double UVCoordinate::_internal_u() const {
  return u_;
}
inline double UVCoordinate::u() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate.u)
  return _internal_u();
}
inline void UVCoordinate::_internal_set_u(double value) {
  
  u_ = value;
}
inline void UVCoordinate::set_u(double value) {
  _internal_set_u(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate.u)
}

// double v = 2;
inline void UVCoordinate::clear_v() {
  v_ = 0;
}
inline double UVCoordinate::_internal_v() const {
  return v_;
}
inline double UVCoordinate::v() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate.v)
  return _internal_v();
}
inline void UVCoordinate::_internal_set_v(double value) {
  
  v_ = value;
}
inline void UVCoordinate::set_v(double value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.visualization_msgs.UVCoordinate.v)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace visualization_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fvisualization_5fmsgs_2eproto
