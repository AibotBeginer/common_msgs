// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/ros2_msgs/pcl_msgs.proto

#include "openbot_bridge/ros2_msgs/pcl_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vertices_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PointCloud2_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto;
namespace openbot_bridge {
namespace ros2_msgs {
namespace pcl_msgs {
class VerticesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vertices> _instance;
} _Vertices_default_instance_;
class ModelCoefficientsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelCoefficients> _instance;
} _ModelCoefficients_default_instance_;
class PointIndicesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointIndices> _instance;
} _PointIndices_default_instance_;
class PolygonMeshDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolygonMesh> _instance;
} _PolygonMesh_default_instance_;
}  // namespace pcl_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
static void InitDefaultsscc_info_ModelCoefficients_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::pcl_msgs::_ModelCoefficients_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::pcl_msgs::ModelCoefficients();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelCoefficients_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelCoefficients_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_PointIndices_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::pcl_msgs::_PointIndices_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::pcl_msgs::PointIndices();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PointIndices_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PointIndices_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_PolygonMesh_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::pcl_msgs::_PolygonMesh_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::pcl_msgs::PolygonMesh();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PolygonMesh_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PolygonMesh_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_PointCloud2_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.base,
      &scc_info_Vertices_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Vertices_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::pcl_msgs::_Vertices_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vertices_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vertices_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::pcl_msgs::Vertices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::pcl_msgs::Vertices, vertices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::pcl_msgs::ModelCoefficients, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::pcl_msgs::ModelCoefficients, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::pcl_msgs::ModelCoefficients, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::pcl_msgs::PointIndices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::pcl_msgs::PointIndices, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::pcl_msgs::PointIndices, indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::pcl_msgs::PolygonMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::pcl_msgs::PolygonMesh, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::pcl_msgs::PolygonMesh, cloud_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::pcl_msgs::PolygonMesh, polygons_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openbot_bridge::ros2_msgs::pcl_msgs::Vertices)},
  { 6, -1, sizeof(::openbot_bridge::ros2_msgs::pcl_msgs::ModelCoefficients)},
  { 13, -1, sizeof(::openbot_bridge::ros2_msgs::pcl_msgs::PointIndices)},
  { 20, -1, sizeof(::openbot_bridge::ros2_msgs::pcl_msgs::PolygonMesh)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::pcl_msgs::_Vertices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::pcl_msgs::_ModelCoefficients_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::pcl_msgs::_PointIndices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::pcl_msgs::_PolygonMesh_default_instance_),
};

const char descriptor_table_protodef_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'openbot_bridge/ros2_msgs/pcl_msgs.prot"
  "o\022!openbot_bridge.ros2_msgs.pcl_msgs\032\'op"
  "enbot_bridge/ros2_msgs/std_msgs.proto\032*o"
  "penbot_bridge/ros2_msgs/sensor_msgs.prot"
  "o\"\034\n\010Vertices\022\020\n\010vertices\030\001 \003(\r\"^\n\021Model"
  "Coefficients\0229\n\006header\030\001 \001(\0132).openbot_b"
  "ridge.ros2_msgs.std_msgs.Header\022\016\n\006value"
  "s\030\002 \003(\002\"Z\n\014PointIndices\0229\n\006header\030\001 \001(\0132"
  ").openbot_bridge.ros2_msgs.std_msgs.Head"
  "er\022\017\n\007indices\030\002 \003(\005\"\311\001\n\013PolygonMesh\0229\n\006h"
  "eader\030\001 \001(\0132).openbot_bridge.ros2_msgs.s"
  "td_msgs.Header\022@\n\005cloud\030\002 \001(\01321.openbot_"
  "bridge.ros2_msgs.sensor_msgs.PointCloud2"
  "\022=\n\010polygons\030\003 \003(\0132+.openbot_bridge.ros2"
  "_msgs.pcl_msgs.Verticesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto_deps[2] = {
  &::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto,
  &::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto_sccs[4] = {
  &scc_info_ModelCoefficients_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.base,
  &scc_info_PointIndices_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.base,
  &scc_info_PolygonMesh_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.base,
  &scc_info_Vertices_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto = {
  false, false, descriptor_table_protodef_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto, "openbot_bridge/ros2_msgs/pcl_msgs.proto", 591,
  &descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto_once, descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto_sccs, descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto::offsets,
  file_level_metadata_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto, 4, file_level_enum_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto, file_level_service_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto)), true);
namespace openbot_bridge {
namespace ros2_msgs {
namespace pcl_msgs {

// ===================================================================

class Vertices::_Internal {
 public:
};

Vertices::Vertices(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
}
Vertices::Vertices(const Vertices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
}

void Vertices::SharedCtor() {
}

Vertices::~Vertices() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vertices::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vertices::ArenaDtor(void* object) {
  Vertices* _this = reinterpret_cast< Vertices* >(object);
  (void)_this;
}
void Vertices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vertices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vertices& Vertices::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vertices_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Vertices::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vertices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vertices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_vertices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vertices::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 vertices = 1;
  {
    int byte_size = _vertices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_vertices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
  return target;
}

size_t Vertices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 vertices = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vertices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vertices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vertices::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
  GOOGLE_DCHECK_NE(&from, this);
  const Vertices* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vertices>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
    MergeFrom(*source);
  }
}

void Vertices::MergeFrom(const Vertices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
}

void Vertices::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vertices::CopyFrom(const Vertices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.pcl_msgs.Vertices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertices::IsInitialized() const {
  return true;
}

void Vertices::InternalSwap(Vertices* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vertices::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelCoefficients::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const ModelCoefficients* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
ModelCoefficients::_Internal::header(const ModelCoefficients* msg) {
  return *msg->header_;
}
void ModelCoefficients::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ModelCoefficients::ModelCoefficients(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
}
ModelCoefficients::ModelCoefficients(const ModelCoefficients& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
}

void ModelCoefficients::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelCoefficients_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.base);
  header_ = nullptr;
}

ModelCoefficients::~ModelCoefficients() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelCoefficients::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ModelCoefficients::ArenaDtor(void* object) {
  ModelCoefficients* _this = reinterpret_cast< ModelCoefficients* >(object);
  (void)_this;
}
void ModelCoefficients::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelCoefficients::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelCoefficients& ModelCoefficients::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelCoefficients_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ModelCoefficients::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelCoefficients::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelCoefficients::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
  return target;
}

size_t ModelCoefficients::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelCoefficients::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelCoefficients* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelCoefficients>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
    MergeFrom(*source);
  }
}

void ModelCoefficients::MergeFrom(const ModelCoefficients& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
}

void ModelCoefficients::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelCoefficients::CopyFrom(const ModelCoefficients& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.pcl_msgs.ModelCoefficients)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelCoefficients::IsInitialized() const {
  return true;
}

void ModelCoefficients::InternalSwap(ModelCoefficients* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelCoefficients::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PointIndices::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const PointIndices* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
PointIndices::_Internal::header(const PointIndices* msg) {
  return *msg->header_;
}
void PointIndices::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
PointIndices::PointIndices(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  indices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
}
PointIndices::PointIndices(const PointIndices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
}

void PointIndices::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PointIndices_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.base);
  header_ = nullptr;
}

PointIndices::~PointIndices() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointIndices::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void PointIndices::ArenaDtor(void* object) {
  PointIndices* _this = reinterpret_cast< PointIndices* >(object);
  (void)_this;
}
void PointIndices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointIndices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointIndices& PointIndices::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointIndices_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PointIndices::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointIndices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointIndices::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated int32 indices = 2;
  {
    int byte_size = _indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
  return target;
}

size_t PointIndices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointIndices::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
  GOOGLE_DCHECK_NE(&from, this);
  const PointIndices* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointIndices>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
    MergeFrom(*source);
  }
}

void PointIndices::MergeFrom(const PointIndices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
}

void PointIndices::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointIndices::CopyFrom(const PointIndices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.pcl_msgs.PointIndices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointIndices::IsInitialized() const {
  return true;
}

void PointIndices::InternalSwap(PointIndices* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointIndices::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PolygonMesh::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const PolygonMesh* msg);
  static const ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2& cloud(const PolygonMesh* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
PolygonMesh::_Internal::header(const PolygonMesh* msg) {
  return *msg->header_;
}
const ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2&
PolygonMesh::_Internal::cloud(const PolygonMesh* msg) {
  return *msg->cloud_;
}
void PolygonMesh::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void PolygonMesh::clear_cloud() {
  if (GetArena() == nullptr && cloud_ != nullptr) {
    delete cloud_;
  }
  cloud_ = nullptr;
}
PolygonMesh::PolygonMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  polygons_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
}
PolygonMesh::PolygonMesh(const PolygonMesh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      polygons_(from.polygons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_cloud()) {
    cloud_ = new ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2(*from.cloud_);
  } else {
    cloud_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
}

void PolygonMesh::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolygonMesh_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cloud_) -
      reinterpret_cast<char*>(&header_)) + sizeof(cloud_));
}

PolygonMesh::~PolygonMesh() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PolygonMesh::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete cloud_;
}

void PolygonMesh::ArenaDtor(void* object) {
  PolygonMesh* _this = reinterpret_cast< PolygonMesh* >(object);
  (void)_this;
}
void PolygonMesh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolygonMesh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolygonMesh& PolygonMesh::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolygonMesh_openbot_5fbridge_2fros2_5fmsgs_2fpcl_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PolygonMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygons_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && cloud_ != nullptr) {
    delete cloud_;
  }
  cloud_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolygonMesh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2 cloud = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloud(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.pcl_msgs.Vertices polygons = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolygonMesh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2 cloud = 2;
  if (this->has_cloud()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cloud(this), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.pcl_msgs.Vertices polygons = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_polygons(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
  return target;
}

size_t PolygonMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.pcl_msgs.Vertices polygons = 3;
  total_size += 1UL * this->_internal_polygons_size();
  for (const auto& msg : this->polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2 cloud = 2;
  if (this->has_cloud()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cloud_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolygonMesh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
  GOOGLE_DCHECK_NE(&from, this);
  const PolygonMesh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolygonMesh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
    MergeFrom(*source);
  }
}

void PolygonMesh::MergeFrom(const PolygonMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygons_.MergeFrom(from.polygons_);
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_cloud()) {
    _internal_mutable_cloud()->::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2::MergeFrom(from._internal_cloud());
  }
}

void PolygonMesh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolygonMesh::CopyFrom(const PolygonMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.pcl_msgs.PolygonMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolygonMesh::IsInitialized() const {
  return true;
}

void PolygonMesh::InternalSwap(PolygonMesh* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  polygons_.InternalSwap(&other->polygons_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolygonMesh, cloud_)
      + sizeof(PolygonMesh::cloud_)
      - PROTOBUF_FIELD_OFFSET(PolygonMesh, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolygonMesh::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pcl_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::pcl_msgs::Vertices >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::pcl_msgs::ModelCoefficients* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::pcl_msgs::ModelCoefficients >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::pcl_msgs::ModelCoefficients >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::pcl_msgs::PointIndices* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::pcl_msgs::PointIndices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::pcl_msgs::PointIndices >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::pcl_msgs::PolygonMesh* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::pcl_msgs::PolygonMesh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::pcl_msgs::PolygonMesh >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
