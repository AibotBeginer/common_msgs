// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/ros2_msgs/sensor_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "openbot_bridge/ros2_msgs/std_msgs.pb.h"
#include "openbot_bridge/ros2_msgs/geometry_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
namespace openbot_bridge {
namespace ros2_msgs {
namespace sensor_msgs {
class CameraInfo;
class CameraInfoDefaultTypeInternal;
extern CameraInfoDefaultTypeInternal _CameraInfo_default_instance_;
class ChannelFloat32;
class ChannelFloat32DefaultTypeInternal;
extern ChannelFloat32DefaultTypeInternal _ChannelFloat32_default_instance_;
class CompressedImage;
class CompressedImageDefaultTypeInternal;
extern CompressedImageDefaultTypeInternal _CompressedImage_default_instance_;
class Illuminance;
class IlluminanceDefaultTypeInternal;
extern IlluminanceDefaultTypeInternal _Illuminance_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Imu;
class ImuDefaultTypeInternal;
extern ImuDefaultTypeInternal _Imu_default_instance_;
class LaserScan;
class LaserScanDefaultTypeInternal;
extern LaserScanDefaultTypeInternal _LaserScan_default_instance_;
class PointCloud;
class PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class PointCloud2;
class PointCloud2DefaultTypeInternal;
extern PointCloud2DefaultTypeInternal _PointCloud2_default_instance_;
class PointField;
class PointFieldDefaultTypeInternal;
extern PointFieldDefaultTypeInternal _PointField_default_instance_;
class Range;
class RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class RegionOfInterest;
class RegionOfInterestDefaultTypeInternal;
extern RegionOfInterestDefaultTypeInternal _RegionOfInterest_default_instance_;
}  // namespace sensor_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::openbot_bridge::ros2_msgs::sensor_msgs::CameraInfo* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::CameraInfo>(Arena*);
template<> ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32>(Arena*);
template<> ::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::CompressedImage>(Arena*);
template<> ::openbot_bridge::ros2_msgs::sensor_msgs::Illuminance* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::Illuminance>(Arena*);
template<> ::openbot_bridge::ros2_msgs::sensor_msgs::Image* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::Image>(Arena*);
template<> ::openbot_bridge::ros2_msgs::sensor_msgs::Imu* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::Imu>(Arena*);
template<> ::openbot_bridge::ros2_msgs::sensor_msgs::LaserScan* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::LaserScan>(Arena*);
template<> ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud>(Arena*);
template<> ::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::PointCloud2>(Arena*);
template<> ::openbot_bridge::ros2_msgs::sensor_msgs::PointField* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::PointField>(Arena*);
template<> ::openbot_bridge::ros2_msgs::sensor_msgs::Range* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::Range>(Arena*);
template<> ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openbot_bridge {
namespace ros2_msgs {
namespace sensor_msgs {

// ===================================================================

class CameraInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo) */ {
 public:
  inline CameraInfo() : CameraInfo(nullptr) {}
  virtual ~CameraInfo();

  CameraInfo(const CameraInfo& from);
  CameraInfo(CameraInfo&& from) noexcept
    : CameraInfo() {
    *this = ::std::move(from);
  }

  inline CameraInfo& operator=(const CameraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraInfo& operator=(CameraInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraInfo& default_instance();

  static inline const CameraInfo* internal_default_instance() {
    return reinterpret_cast<const CameraInfo*>(
               &_CameraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraInfo& a, CameraInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraInfo* New() const final {
    return CreateMaybeMessage<CameraInfo>(nullptr);
  }

  CameraInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraInfo& from);
  void MergeFrom(const CameraInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo";
  }
  protected:
  explicit CameraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFieldNumber = 5,
    kKFieldNumber = 6,
    kRFieldNumber = 7,
    kPFieldNumber = 8,
    kDistortionModelFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kRoiFieldNumber = 12,
    kHeightFieldNumber = 2,
    kWidthFieldNumber = 3,
    kBinningXFieldNumber = 10,
    kBinningYFieldNumber = 11,
  };
  // repeated double d = 5 [packed = true];
  int d_size() const;
  private:
  int _internal_d_size() const;
  public:
  void clear_d();
  private:
  double _internal_d(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_d() const;
  void _internal_add_d(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_d();
  public:
  double d(int index) const;
  void set_d(int index, double value);
  void add_d(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      d() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_d();

  // repeated double k = 6 [packed = true];
  int k_size() const;
  private:
  int _internal_k_size() const;
  public:
  void clear_k();
  private:
  double _internal_k(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_k() const;
  void _internal_add_k(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_k();
  public:
  double k(int index) const;
  void set_k(int index, double value);
  void add_k(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      k() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_k();

  // repeated double r = 7 [packed = true];
  int r_size() const;
  private:
  int _internal_r_size() const;
  public:
  void clear_r();
  private:
  double _internal_r(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_r() const;
  void _internal_add_r(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_r();
  public:
  double r(int index) const;
  void set_r(int index, double value);
  void add_r(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      r() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_r();

  // repeated double p = 8 [packed = true];
  int p_size() const;
  private:
  int _internal_p_size() const;
  public:
  void clear_p();
  private:
  double _internal_p(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_p() const;
  void _internal_add_p(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_p();
  public:
  double p(int index) const;
  void set_p(int index, double value);
  void add_p(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      p() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_p();

  // string distortion_model = 4;
  void clear_distortion_model();
  const std::string& distortion_model() const;
  void set_distortion_model(const std::string& value);
  void set_distortion_model(std::string&& value);
  void set_distortion_model(const char* value);
  void set_distortion_model(const char* value, size_t size);
  std::string* mutable_distortion_model();
  std::string* release_distortion_model();
  void set_allocated_distortion_model(std::string* distortion_model);
  private:
  const std::string& _internal_distortion_model() const;
  void _internal_set_distortion_model(const std::string& value);
  std::string* _internal_mutable_distortion_model();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest roi = 12;
  bool has_roi() const;
  private:
  bool _internal_has_roi() const;
  public:
  void clear_roi();
  const ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest& roi() const;
  ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* release_roi();
  ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* mutable_roi();
  void set_allocated_roi(::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* roi);
  private:
  const ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest& _internal_roi() const;
  ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* _internal_mutable_roi();
  public:
  void unsafe_arena_set_allocated_roi(
      ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* roi);
  ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* unsafe_arena_release_roi();

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 binning_x = 10;
  void clear_binning_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 binning_x() const;
  void set_binning_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_binning_x() const;
  void _internal_set_binning_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 binning_y = 11;
  void clear_binning_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 binning_y() const;
  void set_binning_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_binning_y() const;
  void _internal_set_binning_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > d_;
  mutable std::atomic<int> _d_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > k_;
  mutable std::atomic<int> _k_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > r_;
  mutable std::atomic<int> _r_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > p_;
  mutable std::atomic<int> _p_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr distortion_model_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* roi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 binning_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 binning_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ChannelFloat32 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32) */ {
 public:
  inline ChannelFloat32() : ChannelFloat32(nullptr) {}
  virtual ~ChannelFloat32();

  ChannelFloat32(const ChannelFloat32& from);
  ChannelFloat32(ChannelFloat32&& from) noexcept
    : ChannelFloat32() {
    *this = ::std::move(from);
  }

  inline ChannelFloat32& operator=(const ChannelFloat32& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelFloat32& operator=(ChannelFloat32&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelFloat32& default_instance();

  static inline const ChannelFloat32* internal_default_instance() {
    return reinterpret_cast<const ChannelFloat32*>(
               &_ChannelFloat32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChannelFloat32& a, ChannelFloat32& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelFloat32* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelFloat32* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelFloat32* New() const final {
    return CreateMaybeMessage<ChannelFloat32>(nullptr);
  }

  ChannelFloat32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelFloat32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelFloat32& from);
  void MergeFrom(const ChannelFloat32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelFloat32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32";
  }
  protected:
  explicit ChannelFloat32(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CompressedImage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage) */ {
 public:
  inline CompressedImage() : CompressedImage(nullptr) {}
  virtual ~CompressedImage();

  CompressedImage(const CompressedImage& from);
  CompressedImage(CompressedImage&& from) noexcept
    : CompressedImage() {
    *this = ::std::move(from);
  }

  inline CompressedImage& operator=(const CompressedImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompressedImage& operator=(CompressedImage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompressedImage& default_instance();

  static inline const CompressedImage* internal_default_instance() {
    return reinterpret_cast<const CompressedImage*>(
               &_CompressedImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CompressedImage& a, CompressedImage& b) {
    a.Swap(&b);
  }
  inline void Swap(CompressedImage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompressedImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompressedImage* New() const final {
    return CreateMaybeMessage<CompressedImage>(nullptr);
  }

  CompressedImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompressedImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompressedImage& from);
  void MergeFrom(const CompressedImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompressedImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage";
  }
  protected:
  explicit CompressedImage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kFormatFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated uint32 data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_data();

  // string format = 2;
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Illuminance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.sensor_msgs.Illuminance) */ {
 public:
  inline Illuminance() : Illuminance(nullptr) {}
  virtual ~Illuminance();

  Illuminance(const Illuminance& from);
  Illuminance(Illuminance&& from) noexcept
    : Illuminance() {
    *this = ::std::move(from);
  }

  inline Illuminance& operator=(const Illuminance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Illuminance& operator=(Illuminance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Illuminance& default_instance();

  static inline const Illuminance* internal_default_instance() {
    return reinterpret_cast<const Illuminance*>(
               &_Illuminance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Illuminance& a, Illuminance& b) {
    a.Swap(&b);
  }
  inline void Swap(Illuminance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Illuminance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Illuminance* New() const final {
    return CreateMaybeMessage<Illuminance>(nullptr);
  }

  Illuminance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Illuminance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Illuminance& from);
  void MergeFrom(const Illuminance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Illuminance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.sensor_msgs.Illuminance";
  }
  protected:
  explicit Illuminance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kIlluminanceFieldNumber = 2,
    kVarianceFieldNumber = 3,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // float illuminance = 2;
  void clear_illuminance();
  float illuminance() const;
  void set_illuminance(float value);
  private:
  float _internal_illuminance() const;
  void _internal_set_illuminance(float value);
  public:

  // float variance = 3;
  void clear_variance();
  float variance() const;
  void set_variance(float value);
  private:
  float _internal_variance() const;
  void _internal_set_variance(float value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.sensor_msgs.Illuminance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  float illuminance_;
  float variance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.sensor_msgs.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.sensor_msgs.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 7,
    kEncodingFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kHeightFieldNumber = 2,
    kWidthFieldNumber = 3,
    kIsBigendianFieldNumber = 5,
    kStepFieldNumber = 6,
  };
  // repeated uint32 data = 7;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_data();

  // string encoding = 4;
  void clear_encoding();
  const std::string& encoding() const;
  void set_encoding(const std::string& value);
  void set_encoding(std::string&& value);
  void set_encoding(const char* value);
  void set_encoding(const char* value, size_t size);
  std::string* mutable_encoding();
  std::string* release_encoding();
  void set_allocated_encoding(std::string* encoding);
  private:
  const std::string& _internal_encoding() const;
  void _internal_set_encoding(const std::string& value);
  std::string* _internal_mutable_encoding();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 is_bigendian = 5;
  void clear_is_bigendian();
  ::PROTOBUF_NAMESPACE_ID::uint32 is_bigendian() const;
  void set_is_bigendian(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_is_bigendian() const;
  void _internal_set_is_bigendian(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 step = 6;
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.sensor_msgs.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 is_bigendian_;
  ::PROTOBUF_NAMESPACE_ID::uint32 step_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Imu PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.sensor_msgs.Imu) */ {
 public:
  inline Imu() : Imu(nullptr) {}
  virtual ~Imu();

  Imu(const Imu& from);
  Imu(Imu&& from) noexcept
    : Imu() {
    *this = ::std::move(from);
  }

  inline Imu& operator=(const Imu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Imu& operator=(Imu&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Imu& default_instance();

  static inline const Imu* internal_default_instance() {
    return reinterpret_cast<const Imu*>(
               &_Imu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Imu& a, Imu& b) {
    a.Swap(&b);
  }
  inline void Swap(Imu* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Imu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Imu* New() const final {
    return CreateMaybeMessage<Imu>(nullptr);
  }

  Imu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Imu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Imu& from);
  void MergeFrom(const Imu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Imu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.sensor_msgs.Imu";
  }
  protected:
  explicit Imu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationCovarianceFieldNumber = 3,
    kAngularVelocityCovarianceFieldNumber = 5,
    kLinearAccelerationCovarianceFieldNumber = 7,
    kHeaderFieldNumber = 1,
    kOrientationFieldNumber = 2,
    kAngularVelocityFieldNumber = 4,
    kLinearAccelerationFieldNumber = 6,
  };
  // repeated double orientation_covariance = 3 [packed = true];
  int orientation_covariance_size() const;
  private:
  int _internal_orientation_covariance_size() const;
  public:
  void clear_orientation_covariance();
  private:
  double _internal_orientation_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_orientation_covariance() const;
  void _internal_add_orientation_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_orientation_covariance();
  public:
  double orientation_covariance(int index) const;
  void set_orientation_covariance(int index, double value);
  void add_orientation_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      orientation_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_orientation_covariance();

  // repeated double angular_velocity_covariance = 5 [packed = true];
  int angular_velocity_covariance_size() const;
  private:
  int _internal_angular_velocity_covariance_size() const;
  public:
  void clear_angular_velocity_covariance();
  private:
  double _internal_angular_velocity_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_angular_velocity_covariance() const;
  void _internal_add_angular_velocity_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_angular_velocity_covariance();
  public:
  double angular_velocity_covariance(int index) const;
  void set_angular_velocity_covariance(int index, double value);
  void add_angular_velocity_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      angular_velocity_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_angular_velocity_covariance();

  // repeated double linear_acceleration_covariance = 7 [packed = true];
  int linear_acceleration_covariance_size() const;
  private:
  int _internal_linear_acceleration_covariance_size() const;
  public:
  void clear_linear_acceleration_covariance();
  private:
  double _internal_linear_acceleration_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_linear_acceleration_covariance() const;
  void _internal_add_linear_acceleration_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_linear_acceleration_covariance();
  public:
  double linear_acceleration_covariance(int index) const;
  void set_linear_acceleration_covariance(int index, double value);
  void add_linear_acceleration_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      linear_acceleration_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_linear_acceleration_covariance();

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& orientation() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* release_orientation();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& _internal_orientation() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* unsafe_arena_release_orientation();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 angular_velocity = 4;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& angular_velocity() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* release_angular_velocity();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* mutable_angular_velocity();
  void set_allocated_angular_velocity(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular_velocity);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& _internal_angular_velocity() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular_velocity);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* unsafe_arena_release_angular_velocity();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 linear_acceleration = 6;
  bool has_linear_acceleration() const;
  private:
  bool _internal_has_linear_acceleration() const;
  public:
  void clear_linear_acceleration();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& linear_acceleration() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* release_linear_acceleration();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear_acceleration);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& _internal_linear_acceleration() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* _internal_mutable_linear_acceleration();
  public:
  void unsafe_arena_set_allocated_linear_acceleration(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear_acceleration);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* unsafe_arena_release_linear_acceleration();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.sensor_msgs.Imu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > orientation_covariance_;
  mutable std::atomic<int> _orientation_covariance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > angular_velocity_covariance_;
  mutable std::atomic<int> _angular_velocity_covariance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > linear_acceleration_covariance_;
  mutable std::atomic<int> _linear_acceleration_covariance_cached_byte_size_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular_velocity_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear_acceleration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class LaserScan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan) */ {
 public:
  inline LaserScan() : LaserScan(nullptr) {}
  virtual ~LaserScan();

  LaserScan(const LaserScan& from);
  LaserScan(LaserScan&& from) noexcept
    : LaserScan() {
    *this = ::std::move(from);
  }

  inline LaserScan& operator=(const LaserScan& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserScan& operator=(LaserScan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaserScan& default_instance();

  static inline const LaserScan* internal_default_instance() {
    return reinterpret_cast<const LaserScan*>(
               &_LaserScan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LaserScan& a, LaserScan& b) {
    a.Swap(&b);
  }
  inline void Swap(LaserScan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaserScan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaserScan* New() const final {
    return CreateMaybeMessage<LaserScan>(nullptr);
  }

  LaserScan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaserScan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaserScan& from);
  void MergeFrom(const LaserScan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserScan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.sensor_msgs.LaserScan";
  }
  protected:
  explicit LaserScan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 9,
    kIntensitiesFieldNumber = 10,
    kHeaderFieldNumber = 1,
    kAngleMinFieldNumber = 2,
    kAngleMaxFieldNumber = 3,
    kAngleIncrementFieldNumber = 4,
    kTimeIncrementFieldNumber = 5,
    kScanTimeFieldNumber = 6,
    kRangeMinFieldNumber = 7,
    kRangeMaxFieldNumber = 8,
  };
  // repeated float ranges = 9;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  private:
  float _internal_ranges(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ranges() const;
  void _internal_add_ranges(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ranges();
  public:
  float ranges(int index) const;
  void set_ranges(int index, float value);
  void add_ranges(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ranges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ranges();

  // repeated float intensities = 10;
  int intensities_size() const;
  private:
  int _internal_intensities_size() const;
  public:
  void clear_intensities();
  private:
  float _internal_intensities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_intensities() const;
  void _internal_add_intensities(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_intensities();
  public:
  float intensities(int index) const;
  void set_intensities(int index, float value);
  void add_intensities(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      intensities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_intensities();

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // float angle_min = 2;
  void clear_angle_min();
  float angle_min() const;
  void set_angle_min(float value);
  private:
  float _internal_angle_min() const;
  void _internal_set_angle_min(float value);
  public:

  // float angle_max = 3;
  void clear_angle_max();
  float angle_max() const;
  void set_angle_max(float value);
  private:
  float _internal_angle_max() const;
  void _internal_set_angle_max(float value);
  public:

  // float angle_increment = 4;
  void clear_angle_increment();
  float angle_increment() const;
  void set_angle_increment(float value);
  private:
  float _internal_angle_increment() const;
  void _internal_set_angle_increment(float value);
  public:

  // float time_increment = 5;
  void clear_time_increment();
  float time_increment() const;
  void set_time_increment(float value);
  private:
  float _internal_time_increment() const;
  void _internal_set_time_increment(float value);
  public:

  // float scan_time = 6;
  void clear_scan_time();
  float scan_time() const;
  void set_scan_time(float value);
  private:
  float _internal_scan_time() const;
  void _internal_set_scan_time(float value);
  public:

  // float range_min = 7;
  void clear_range_min();
  float range_min() const;
  void set_range_min(float value);
  private:
  float _internal_range_min() const;
  void _internal_set_range_min(float value);
  public:

  // float range_max = 8;
  void clear_range_max();
  float range_max() const;
  void set_range_max(float value);
  private:
  float _internal_range_max() const;
  void _internal_set_range_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ranges_;
  mutable std::atomic<int> _ranges_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > intensities_;
  mutable std::atomic<int> _intensities_cached_byte_size_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  float angle_min_;
  float angle_max_;
  float angle_increment_;
  float time_increment_;
  float scan_time_;
  float range_min_;
  float range_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PointCloud PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud) */ {
 public:
  inline PointCloud() : PointCloud(nullptr) {}
  virtual ~PointCloud();

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloud& default_instance();

  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud* New() const final {
    return CreateMaybeMessage<PointCloud>(nullptr);
  }

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.sensor_msgs.PointCloud";
  }
  protected:
  explicit PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kChannelsFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point32 points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point32 >*
      mutable_points();
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point32& _internal_points(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* _internal_add_points();
  public:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point32& points(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point32 >&
      points() const;

  // repeated .openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32 channels = 3;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32 >*
      mutable_channels();
  private:
  const ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32& _internal_channels(int index) const;
  ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32* _internal_add_channels();
  public:
  const ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32& channels(int index) const;
  ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32 >&
      channels() const;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point32 > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32 > channels_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PointField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.sensor_msgs.PointField) */ {
 public:
  inline PointField() : PointField(nullptr) {}
  virtual ~PointField();

  PointField(const PointField& from);
  PointField(PointField&& from) noexcept
    : PointField() {
    *this = ::std::move(from);
  }

  inline PointField& operator=(const PointField& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointField& operator=(PointField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointField& default_instance();

  static inline const PointField* internal_default_instance() {
    return reinterpret_cast<const PointField*>(
               &_PointField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PointField& a, PointField& b) {
    a.Swap(&b);
  }
  inline void Swap(PointField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointField* New() const final {
    return CreateMaybeMessage<PointField>(nullptr);
  }

  PointField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointField& from);
  void MergeFrom(const PointField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.sensor_msgs.PointField";
  }
  protected:
  explicit PointField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kDatatypeFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 datatype = 3;
  void clear_datatype();
  ::PROTOBUF_NAMESPACE_ID::uint32 datatype() const;
  void set_datatype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datatype() const;
  void _internal_set_datatype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.sensor_msgs.PointField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datatype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PointCloud2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2) */ {
 public:
  inline PointCloud2() : PointCloud2(nullptr) {}
  virtual ~PointCloud2();

  PointCloud2(const PointCloud2& from);
  PointCloud2(PointCloud2&& from) noexcept
    : PointCloud2() {
    *this = ::std::move(from);
  }

  inline PointCloud2& operator=(const PointCloud2& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud2& operator=(PointCloud2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloud2& default_instance();

  static inline const PointCloud2* internal_default_instance() {
    return reinterpret_cast<const PointCloud2*>(
               &_PointCloud2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PointCloud2& a, PointCloud2& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud2* New() const final {
    return CreateMaybeMessage<PointCloud2>(nullptr);
  }

  PointCloud2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud2& from);
  void MergeFrom(const PointCloud2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2";
  }
  protected:
  explicit PointCloud2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 4,
    kDataFieldNumber = 8,
    kHeaderFieldNumber = 1,
    kHeightFieldNumber = 2,
    kWidthFieldNumber = 3,
    kPointStepFieldNumber = 6,
    kRowStepFieldNumber = 7,
    kIsBigendianFieldNumber = 5,
    kIsDenseFieldNumber = 9,
  };
  // repeated .openbot_bridge.ros2_msgs.sensor_msgs.PointField fields = 4;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::openbot_bridge::ros2_msgs::sensor_msgs::PointField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::sensor_msgs::PointField >*
      mutable_fields();
  private:
  const ::openbot_bridge::ros2_msgs::sensor_msgs::PointField& _internal_fields(int index) const;
  ::openbot_bridge::ros2_msgs::sensor_msgs::PointField* _internal_add_fields();
  public:
  const ::openbot_bridge::ros2_msgs::sensor_msgs::PointField& fields(int index) const;
  ::openbot_bridge::ros2_msgs::sensor_msgs::PointField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::sensor_msgs::PointField >&
      fields() const;

  // repeated uint32 data = 8;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_data();

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 point_step = 6;
  void clear_point_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 point_step() const;
  void set_point_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point_step() const;
  void _internal_set_point_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 row_step = 7;
  void clear_row_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_step() const;
  void set_row_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_step() const;
  void _internal_set_row_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_bigendian = 5;
  void clear_is_bigendian();
  bool is_bigendian() const;
  void set_is_bigendian(bool value);
  private:
  bool _internal_is_bigendian() const;
  void _internal_set_is_bigendian(bool value);
  public:

  // bool is_dense = 9;
  void clear_is_dense();
  bool is_dense() const;
  void set_is_dense(bool value);
  private:
  bool _internal_is_dense() const;
  void _internal_set_is_dense(bool value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::sensor_msgs::PointField > fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 point_step_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_step_;
  bool is_bigendian_;
  bool is_dense_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Range PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.sensor_msgs.Range) */ {
 public:
  inline Range() : Range(nullptr) {}
  virtual ~Range();

  Range(const Range& from);
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Range& default_instance();

  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Range* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const final {
    return CreateMaybeMessage<Range>(nullptr);
  }

  Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.sensor_msgs.Range";
  }
  protected:
  explicit Range(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRadiationTypeFieldNumber = 2,
    kFieldOfViewFieldNumber = 3,
    kMinRangeFieldNumber = 4,
    kMaxRangeFieldNumber = 5,
    kRangeFieldNumber = 6,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // uint32 radiation_type = 2;
  void clear_radiation_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 radiation_type() const;
  void set_radiation_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_radiation_type() const;
  void _internal_set_radiation_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float field_of_view = 3;
  void clear_field_of_view();
  float field_of_view() const;
  void set_field_of_view(float value);
  private:
  float _internal_field_of_view() const;
  void _internal_set_field_of_view(float value);
  public:

  // float min_range = 4;
  void clear_min_range();
  float min_range() const;
  void set_min_range(float value);
  private:
  float _internal_min_range() const;
  void _internal_set_min_range(float value);
  public:

  // float max_range = 5;
  void clear_max_range();
  float max_range() const;
  void set_max_range(float value);
  private:
  float _internal_max_range() const;
  void _internal_set_max_range(float value);
  public:

  // float range = 6;
  void clear_range();
  float range() const;
  void set_range(float value);
  private:
  float _internal_range() const;
  void _internal_set_range(float value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.sensor_msgs.Range)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 radiation_type_;
  float field_of_view_;
  float min_range_;
  float max_range_;
  float range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class RegionOfInterest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest) */ {
 public:
  inline RegionOfInterest() : RegionOfInterest(nullptr) {}
  virtual ~RegionOfInterest();

  RegionOfInterest(const RegionOfInterest& from);
  RegionOfInterest(RegionOfInterest&& from) noexcept
    : RegionOfInterest() {
    *this = ::std::move(from);
  }

  inline RegionOfInterest& operator=(const RegionOfInterest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionOfInterest& operator=(RegionOfInterest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegionOfInterest& default_instance();

  static inline const RegionOfInterest* internal_default_instance() {
    return reinterpret_cast<const RegionOfInterest*>(
               &_RegionOfInterest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RegionOfInterest& a, RegionOfInterest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionOfInterest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionOfInterest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionOfInterest* New() const final {
    return CreateMaybeMessage<RegionOfInterest>(nullptr);
  }

  RegionOfInterest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionOfInterest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionOfInterest& from);
  void MergeFrom(const RegionOfInterest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionOfInterest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest";
  }
  protected:
  explicit RegionOfInterest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXOffsetFieldNumber = 1,
    kYOffsetFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
    kDoRectifyFieldNumber = 5,
  };
  // uint32 x_offset = 1;
  void clear_x_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 x_offset() const;
  void set_x_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x_offset() const;
  void _internal_set_x_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 y_offset = 2;
  void clear_y_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 y_offset() const;
  void set_y_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_y_offset() const;
  void _internal_set_y_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 width = 4;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool do_rectify = 5;
  void clear_do_rectify();
  bool do_rectify() const;
  void set_do_rectify(bool value);
  private:
  bool _internal_do_rectify() const;
  void _internal_set_do_rectify(bool value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  bool do_rectify_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraInfo

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool CameraInfo::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CameraInfo::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& CameraInfo::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& CameraInfo::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.header)
  return _internal_header();
}
inline void CameraInfo::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* CameraInfo::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* CameraInfo::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* CameraInfo::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* CameraInfo::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.header)
  return _internal_mutable_header();
}
inline void CameraInfo::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.header)
}

// uint32 height = 2;
inline void CameraInfo::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraInfo::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraInfo::height() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.height)
  return _internal_height();
}
inline void CameraInfo::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void CameraInfo::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.height)
}

// uint32 width = 3;
inline void CameraInfo::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraInfo::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraInfo::width() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.width)
  return _internal_width();
}
inline void CameraInfo::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void CameraInfo::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.width)
}

// string distortion_model = 4;
inline void CameraInfo::clear_distortion_model() {
  distortion_model_.ClearToEmpty();
}
inline const std::string& CameraInfo::distortion_model() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.distortion_model)
  return _internal_distortion_model();
}
inline void CameraInfo::set_distortion_model(const std::string& value) {
  _internal_set_distortion_model(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.distortion_model)
}
inline std::string* CameraInfo::mutable_distortion_model() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.distortion_model)
  return _internal_mutable_distortion_model();
}
inline const std::string& CameraInfo::_internal_distortion_model() const {
  return distortion_model_.Get();
}
inline void CameraInfo::_internal_set_distortion_model(const std::string& value) {
  
  distortion_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CameraInfo::set_distortion_model(std::string&& value) {
  
  distortion_model_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.distortion_model)
}
inline void CameraInfo::set_distortion_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  distortion_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.distortion_model)
}
inline void CameraInfo::set_distortion_model(const char* value,
    size_t size) {
  
  distortion_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.distortion_model)
}
inline std::string* CameraInfo::_internal_mutable_distortion_model() {
  
  return distortion_model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CameraInfo::release_distortion_model() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.distortion_model)
  return distortion_model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraInfo::set_allocated_distortion_model(std::string* distortion_model) {
  if (distortion_model != nullptr) {
    
  } else {
    
  }
  distortion_model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), distortion_model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.distortion_model)
}

// repeated double d = 5 [packed = true];
inline int CameraInfo::_internal_d_size() const {
  return d_.size();
}
inline int CameraInfo::d_size() const {
  return _internal_d_size();
}
inline void CameraInfo::clear_d() {
  d_.Clear();
}
inline double CameraInfo::_internal_d(int index) const {
  return d_.Get(index);
}
inline double CameraInfo::d(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.d)
  return _internal_d(index);
}
inline void CameraInfo::set_d(int index, double value) {
  d_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.d)
}
inline void CameraInfo::_internal_add_d(double value) {
  d_.Add(value);
}
inline void CameraInfo::add_d(double value) {
  _internal_add_d(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.d)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::_internal_d() const {
  return d_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::d() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.d)
  return _internal_d();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::_internal_mutable_d() {
  return &d_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.d)
  return _internal_mutable_d();
}

// repeated double k = 6 [packed = true];
inline int CameraInfo::_internal_k_size() const {
  return k_.size();
}
inline int CameraInfo::k_size() const {
  return _internal_k_size();
}
inline void CameraInfo::clear_k() {
  k_.Clear();
}
inline double CameraInfo::_internal_k(int index) const {
  return k_.Get(index);
}
inline double CameraInfo::k(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.k)
  return _internal_k(index);
}
inline void CameraInfo::set_k(int index, double value) {
  k_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.k)
}
inline void CameraInfo::_internal_add_k(double value) {
  k_.Add(value);
}
inline void CameraInfo::add_k(double value) {
  _internal_add_k(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.k)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::_internal_k() const {
  return k_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::k() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.k)
  return _internal_k();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::_internal_mutable_k() {
  return &k_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.k)
  return _internal_mutable_k();
}

// repeated double r = 7 [packed = true];
inline int CameraInfo::_internal_r_size() const {
  return r_.size();
}
inline int CameraInfo::r_size() const {
  return _internal_r_size();
}
inline void CameraInfo::clear_r() {
  r_.Clear();
}
inline double CameraInfo::_internal_r(int index) const {
  return r_.Get(index);
}
inline double CameraInfo::r(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.r)
  return _internal_r(index);
}
inline void CameraInfo::set_r(int index, double value) {
  r_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.r)
}
inline void CameraInfo::_internal_add_r(double value) {
  r_.Add(value);
}
inline void CameraInfo::add_r(double value) {
  _internal_add_r(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.r)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::_internal_r() const {
  return r_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::r() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.r)
  return _internal_r();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::_internal_mutable_r() {
  return &r_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::mutable_r() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.r)
  return _internal_mutable_r();
}

// repeated double p = 8 [packed = true];
inline int CameraInfo::_internal_p_size() const {
  return p_.size();
}
inline int CameraInfo::p_size() const {
  return _internal_p_size();
}
inline void CameraInfo::clear_p() {
  p_.Clear();
}
inline double CameraInfo::_internal_p(int index) const {
  return p_.Get(index);
}
inline double CameraInfo::p(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.p)
  return _internal_p(index);
}
inline void CameraInfo::set_p(int index, double value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.p)
}
inline void CameraInfo::_internal_add_p(double value) {
  p_.Add(value);
}
inline void CameraInfo::add_p(double value) {
  _internal_add_p(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.p)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::_internal_p() const {
  return p_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::p() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.p)
  return _internal_p();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::_internal_mutable_p() {
  return &p_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.p)
  return _internal_mutable_p();
}

// uint32 binning_x = 10;
inline void CameraInfo::clear_binning_x() {
  binning_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraInfo::_internal_binning_x() const {
  return binning_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraInfo::binning_x() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.binning_x)
  return _internal_binning_x();
}
inline void CameraInfo::_internal_set_binning_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  binning_x_ = value;
}
inline void CameraInfo::set_binning_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_binning_x(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.binning_x)
}

// uint32 binning_y = 11;
inline void CameraInfo::clear_binning_y() {
  binning_y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraInfo::_internal_binning_y() const {
  return binning_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraInfo::binning_y() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.binning_y)
  return _internal_binning_y();
}
inline void CameraInfo::_internal_set_binning_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  binning_y_ = value;
}
inline void CameraInfo::set_binning_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_binning_y(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.binning_y)
}

// .openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest roi = 12;
inline bool CameraInfo::_internal_has_roi() const {
  return this != internal_default_instance() && roi_ != nullptr;
}
inline bool CameraInfo::has_roi() const {
  return _internal_has_roi();
}
inline void CameraInfo::clear_roi() {
  if (GetArena() == nullptr && roi_ != nullptr) {
    delete roi_;
  }
  roi_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest& CameraInfo::_internal_roi() const {
  const ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* p = roi_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest&>(
      ::openbot_bridge::ros2_msgs::sensor_msgs::_RegionOfInterest_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest& CameraInfo::roi() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.roi)
  return _internal_roi();
}
inline void CameraInfo::unsafe_arena_set_allocated_roi(
    ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* roi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_);
  }
  roi_ = roi;
  if (roi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.roi)
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* CameraInfo::release_roi() {
  
  ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* temp = roi_;
  roi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* CameraInfo::unsafe_arena_release_roi() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.roi)
  
  ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* temp = roi_;
  roi_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* CameraInfo::_internal_mutable_roi() {
  
  if (roi_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest>(GetArena());
    roi_ = p;
  }
  return roi_;
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* CameraInfo::mutable_roi() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.roi)
  return _internal_mutable_roi();
}
inline void CameraInfo::set_allocated_roi(::openbot_bridge::ros2_msgs::sensor_msgs::RegionOfInterest* roi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roi_;
  }
  if (roi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roi);
    if (message_arena != submessage_arena) {
      roi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi, submessage_arena);
    }
    
  } else {
    
  }
  roi_ = roi;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.CameraInfo.roi)
}

// -------------------------------------------------------------------

// ChannelFloat32

// string name = 1;
inline void ChannelFloat32::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ChannelFloat32::name() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32.name)
  return _internal_name();
}
inline void ChannelFloat32::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32.name)
}
inline std::string* ChannelFloat32::mutable_name() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32.name)
  return _internal_mutable_name();
}
inline const std::string& ChannelFloat32::_internal_name() const {
  return name_.Get();
}
inline void ChannelFloat32::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelFloat32::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32.name)
}
inline void ChannelFloat32::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32.name)
}
inline void ChannelFloat32::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32.name)
}
inline std::string* ChannelFloat32::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelFloat32::release_name() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelFloat32::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32.name)
}

// repeated float values = 2;
inline int ChannelFloat32::_internal_values_size() const {
  return values_.size();
}
inline int ChannelFloat32::values_size() const {
  return _internal_values_size();
}
inline void ChannelFloat32::clear_values() {
  values_.Clear();
}
inline float ChannelFloat32::_internal_values(int index) const {
  return values_.Get(index);
}
inline float ChannelFloat32::values(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32.values)
  return _internal_values(index);
}
inline void ChannelFloat32::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32.values)
}
inline void ChannelFloat32::_internal_add_values(float value) {
  values_.Add(value);
}
inline void ChannelFloat32::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ChannelFloat32::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ChannelFloat32::values() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ChannelFloat32::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ChannelFloat32::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// CompressedImage

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool CompressedImage::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CompressedImage::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& CompressedImage::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& CompressedImage::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.header)
  return _internal_header();
}
inline void CompressedImage::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* CompressedImage::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* CompressedImage::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* CompressedImage::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* CompressedImage::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.header)
  return _internal_mutable_header();
}
inline void CompressedImage::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.header)
}

// string format = 2;
inline void CompressedImage::clear_format() {
  format_.ClearToEmpty();
}
inline const std::string& CompressedImage::format() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.format)
  return _internal_format();
}
inline void CompressedImage::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.format)
}
inline std::string* CompressedImage::mutable_format() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.format)
  return _internal_mutable_format();
}
inline const std::string& CompressedImage::_internal_format() const {
  return format_.Get();
}
inline void CompressedImage::_internal_set_format(const std::string& value) {
  
  format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompressedImage::set_format(std::string&& value) {
  
  format_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.format)
}
inline void CompressedImage::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.format)
}
inline void CompressedImage::set_format(const char* value,
    size_t size) {
  
  format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.format)
}
inline std::string* CompressedImage::_internal_mutable_format() {
  
  return format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompressedImage::release_format() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.format)
  return format_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompressedImage::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.format)
}

// repeated uint32 data = 3;
inline int CompressedImage::_internal_data_size() const {
  return data_.size();
}
inline int CompressedImage::data_size() const {
  return _internal_data_size();
}
inline void CompressedImage::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompressedImage::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompressedImage::data(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.data)
  return _internal_data(index);
}
inline void CompressedImage::set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.data)
}
inline void CompressedImage::_internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Add(value);
}
inline void CompressedImage::add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CompressedImage::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CompressedImage::data() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CompressedImage::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CompressedImage::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.CompressedImage.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// Illuminance

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Illuminance::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Illuminance::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Illuminance::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Illuminance::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Illuminance.header)
  return _internal_header();
}
inline void Illuminance::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Illuminance.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Illuminance::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Illuminance::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.Illuminance.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Illuminance::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Illuminance::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.Illuminance.header)
  return _internal_mutable_header();
}
inline void Illuminance::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Illuminance.header)
}

// float illuminance = 2;
inline void Illuminance::clear_illuminance() {
  illuminance_ = 0;
}
inline float Illuminance::_internal_illuminance() const {
  return illuminance_;
}
inline float Illuminance::illuminance() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Illuminance.illuminance)
  return _internal_illuminance();
}
inline void Illuminance::_internal_set_illuminance(float value) {
  
  illuminance_ = value;
}
inline void Illuminance::set_illuminance(float value) {
  _internal_set_illuminance(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Illuminance.illuminance)
}

// float variance = 3;
inline void Illuminance::clear_variance() {
  variance_ = 0;
}
inline float Illuminance::_internal_variance() const {
  return variance_;
}
inline float Illuminance::variance() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Illuminance.variance)
  return _internal_variance();
}
inline void Illuminance::_internal_set_variance(float value) {
  
  variance_ = value;
}
inline void Illuminance::set_variance(float value) {
  _internal_set_variance(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Illuminance.variance)
}

// -------------------------------------------------------------------

// Image

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Image::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Image::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Image::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Image::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Image.header)
  return _internal_header();
}
inline void Image::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Image.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Image::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Image::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.Image.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Image::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Image::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.Image.header)
  return _internal_mutable_header();
}
inline void Image::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Image.header)
}

// uint32 height = 2;
inline void Image::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::height() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Image.height)
  return _internal_height();
}
inline void Image::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void Image::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Image.height)
}

// uint32 width = 3;
inline void Image::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::width() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Image.width)
  return _internal_width();
}
inline void Image::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void Image::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Image.width)
}

// string encoding = 4;
inline void Image::clear_encoding() {
  encoding_.ClearToEmpty();
}
inline const std::string& Image::encoding() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Image.encoding)
  return _internal_encoding();
}
inline void Image::set_encoding(const std::string& value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Image.encoding)
}
inline std::string* Image::mutable_encoding() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.Image.encoding)
  return _internal_mutable_encoding();
}
inline const std::string& Image::_internal_encoding() const {
  return encoding_.Get();
}
inline void Image::_internal_set_encoding(const std::string& value) {
  
  encoding_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Image::set_encoding(std::string&& value) {
  
  encoding_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.sensor_msgs.Image.encoding)
}
inline void Image::set_encoding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoding_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.sensor_msgs.Image.encoding)
}
inline void Image::set_encoding(const char* value,
    size_t size) {
  
  encoding_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.sensor_msgs.Image.encoding)
}
inline std::string* Image::_internal_mutable_encoding() {
  
  return encoding_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Image::release_encoding() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.Image.encoding)
  return encoding_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Image::set_allocated_encoding(std::string* encoding) {
  if (encoding != nullptr) {
    
  } else {
    
  }
  encoding_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Image.encoding)
}

// uint32 is_bigendian = 5;
inline void Image::clear_is_bigendian() {
  is_bigendian_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::_internal_is_bigendian() const {
  return is_bigendian_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::is_bigendian() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Image.is_bigendian)
  return _internal_is_bigendian();
}
inline void Image::_internal_set_is_bigendian(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  is_bigendian_ = value;
}
inline void Image::set_is_bigendian(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_is_bigendian(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Image.is_bigendian)
}

// uint32 step = 6;
inline void Image::clear_step() {
  step_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::step() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Image.step)
  return _internal_step();
}
inline void Image::_internal_set_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  step_ = value;
}
inline void Image::set_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Image.step)
}

// repeated uint32 data = 7;
inline int Image::_internal_data_size() const {
  return data_.size();
}
inline int Image::data_size() const {
  return _internal_data_size();
}
inline void Image::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::data(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Image.data)
  return _internal_data(index);
}
inline void Image::set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Image.data)
}
inline void Image::_internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Add(value);
}
inline void Image::add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.Image.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Image::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Image::data() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.Image.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Image::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Image::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.Image.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// Imu

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Imu::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Imu::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Imu::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Imu::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Imu.header)
  return _internal_header();
}
inline void Imu::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Imu.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Imu::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Imu::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.Imu.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Imu::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Imu::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.Imu.header)
  return _internal_mutable_header();
}
inline void Imu::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Imu.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion orientation = 2;
inline bool Imu::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool Imu::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& Imu::_internal_orientation() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Quaternion_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& Imu::orientation() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Imu.orientation)
  return _internal_orientation();
}
inline void Imu::unsafe_arena_set_allocated_orientation(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Imu.orientation)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Imu::release_orientation() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Imu::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.Imu.orientation)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Imu::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Imu::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.Imu.orientation)
  return _internal_mutable_orientation();
}
inline void Imu::set_allocated_orientation(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation)->GetArena();
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Imu.orientation)
}

// repeated double orientation_covariance = 3 [packed = true];
inline int Imu::_internal_orientation_covariance_size() const {
  return orientation_covariance_.size();
}
inline int Imu::orientation_covariance_size() const {
  return _internal_orientation_covariance_size();
}
inline void Imu::clear_orientation_covariance() {
  orientation_covariance_.Clear();
}
inline double Imu::_internal_orientation_covariance(int index) const {
  return orientation_covariance_.Get(index);
}
inline double Imu::orientation_covariance(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Imu.orientation_covariance)
  return _internal_orientation_covariance(index);
}
inline void Imu::set_orientation_covariance(int index, double value) {
  orientation_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Imu.orientation_covariance)
}
inline void Imu::_internal_add_orientation_covariance(double value) {
  orientation_covariance_.Add(value);
}
inline void Imu::add_orientation_covariance(double value) {
  _internal_add_orientation_covariance(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.Imu.orientation_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Imu::_internal_orientation_covariance() const {
  return orientation_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Imu::orientation_covariance() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.Imu.orientation_covariance)
  return _internal_orientation_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Imu::_internal_mutable_orientation_covariance() {
  return &orientation_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Imu::mutable_orientation_covariance() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.Imu.orientation_covariance)
  return _internal_mutable_orientation_covariance();
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 angular_velocity = 4;
inline bool Imu::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != nullptr;
}
inline bool Imu::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Imu::_internal_angular_velocity() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* p = angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Imu::angular_velocity() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Imu.angular_velocity)
  return _internal_angular_velocity();
}
inline void Imu::unsafe_arena_set_allocated_angular_velocity(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Imu.angular_velocity)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Imu::release_angular_velocity() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Imu::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.Imu.angular_velocity)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Imu::_internal_mutable_angular_velocity() {
  
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(GetArena());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Imu::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.Imu.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void Imu::set_allocated_angular_velocity(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity)->GetArena();
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Imu.angular_velocity)
}

// repeated double angular_velocity_covariance = 5 [packed = true];
inline int Imu::_internal_angular_velocity_covariance_size() const {
  return angular_velocity_covariance_.size();
}
inline int Imu::angular_velocity_covariance_size() const {
  return _internal_angular_velocity_covariance_size();
}
inline void Imu::clear_angular_velocity_covariance() {
  angular_velocity_covariance_.Clear();
}
inline double Imu::_internal_angular_velocity_covariance(int index) const {
  return angular_velocity_covariance_.Get(index);
}
inline double Imu::angular_velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Imu.angular_velocity_covariance)
  return _internal_angular_velocity_covariance(index);
}
inline void Imu::set_angular_velocity_covariance(int index, double value) {
  angular_velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Imu.angular_velocity_covariance)
}
inline void Imu::_internal_add_angular_velocity_covariance(double value) {
  angular_velocity_covariance_.Add(value);
}
inline void Imu::add_angular_velocity_covariance(double value) {
  _internal_add_angular_velocity_covariance(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.Imu.angular_velocity_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Imu::_internal_angular_velocity_covariance() const {
  return angular_velocity_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Imu::angular_velocity_covariance() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.Imu.angular_velocity_covariance)
  return _internal_angular_velocity_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Imu::_internal_mutable_angular_velocity_covariance() {
  return &angular_velocity_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Imu::mutable_angular_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.Imu.angular_velocity_covariance)
  return _internal_mutable_angular_velocity_covariance();
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 linear_acceleration = 6;
inline bool Imu::_internal_has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != nullptr;
}
inline bool Imu::has_linear_acceleration() const {
  return _internal_has_linear_acceleration();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Imu::_internal_linear_acceleration() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* p = linear_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Imu::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Imu.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void Imu::unsafe_arena_set_allocated_linear_acceleration(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear_acceleration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Imu.linear_acceleration)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Imu::release_linear_acceleration() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Imu::unsafe_arena_release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.Imu.linear_acceleration)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Imu::_internal_mutable_linear_acceleration() {
  
  if (linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(GetArena());
    linear_acceleration_ = p;
  }
  return linear_acceleration_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Imu::mutable_linear_acceleration() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.Imu.linear_acceleration)
  return _internal_mutable_linear_acceleration();
}
inline void Imu::set_allocated_linear_acceleration(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  if (linear_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration)->GetArena();
    if (message_arena != submessage_arena) {
      linear_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Imu.linear_acceleration)
}

// repeated double linear_acceleration_covariance = 7 [packed = true];
inline int Imu::_internal_linear_acceleration_covariance_size() const {
  return linear_acceleration_covariance_.size();
}
inline int Imu::linear_acceleration_covariance_size() const {
  return _internal_linear_acceleration_covariance_size();
}
inline void Imu::clear_linear_acceleration_covariance() {
  linear_acceleration_covariance_.Clear();
}
inline double Imu::_internal_linear_acceleration_covariance(int index) const {
  return linear_acceleration_covariance_.Get(index);
}
inline double Imu::linear_acceleration_covariance(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Imu.linear_acceleration_covariance)
  return _internal_linear_acceleration_covariance(index);
}
inline void Imu::set_linear_acceleration_covariance(int index, double value) {
  linear_acceleration_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Imu.linear_acceleration_covariance)
}
inline void Imu::_internal_add_linear_acceleration_covariance(double value) {
  linear_acceleration_covariance_.Add(value);
}
inline void Imu::add_linear_acceleration_covariance(double value) {
  _internal_add_linear_acceleration_covariance(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.Imu.linear_acceleration_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Imu::_internal_linear_acceleration_covariance() const {
  return linear_acceleration_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Imu::linear_acceleration_covariance() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.Imu.linear_acceleration_covariance)
  return _internal_linear_acceleration_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Imu::_internal_mutable_linear_acceleration_covariance() {
  return &linear_acceleration_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Imu::mutable_linear_acceleration_covariance() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.Imu.linear_acceleration_covariance)
  return _internal_mutable_linear_acceleration_covariance();
}

// -------------------------------------------------------------------

// LaserScan

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool LaserScan::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LaserScan::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& LaserScan::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& LaserScan::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.header)
  return _internal_header();
}
inline void LaserScan::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* LaserScan::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* LaserScan::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* LaserScan::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* LaserScan::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.header)
  return _internal_mutable_header();
}
inline void LaserScan::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.header)
}

// float angle_min = 2;
inline void LaserScan::clear_angle_min() {
  angle_min_ = 0;
}
inline float LaserScan::_internal_angle_min() const {
  return angle_min_;
}
inline float LaserScan::angle_min() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.angle_min)
  return _internal_angle_min();
}
inline void LaserScan::_internal_set_angle_min(float value) {
  
  angle_min_ = value;
}
inline void LaserScan::set_angle_min(float value) {
  _internal_set_angle_min(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.angle_min)
}

// float angle_max = 3;
inline void LaserScan::clear_angle_max() {
  angle_max_ = 0;
}
inline float LaserScan::_internal_angle_max() const {
  return angle_max_;
}
inline float LaserScan::angle_max() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.angle_max)
  return _internal_angle_max();
}
inline void LaserScan::_internal_set_angle_max(float value) {
  
  angle_max_ = value;
}
inline void LaserScan::set_angle_max(float value) {
  _internal_set_angle_max(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.angle_max)
}

// float angle_increment = 4;
inline void LaserScan::clear_angle_increment() {
  angle_increment_ = 0;
}
inline float LaserScan::_internal_angle_increment() const {
  return angle_increment_;
}
inline float LaserScan::angle_increment() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.angle_increment)
  return _internal_angle_increment();
}
inline void LaserScan::_internal_set_angle_increment(float value) {
  
  angle_increment_ = value;
}
inline void LaserScan::set_angle_increment(float value) {
  _internal_set_angle_increment(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.angle_increment)
}

// float time_increment = 5;
inline void LaserScan::clear_time_increment() {
  time_increment_ = 0;
}
inline float LaserScan::_internal_time_increment() const {
  return time_increment_;
}
inline float LaserScan::time_increment() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.time_increment)
  return _internal_time_increment();
}
inline void LaserScan::_internal_set_time_increment(float value) {
  
  time_increment_ = value;
}
inline void LaserScan::set_time_increment(float value) {
  _internal_set_time_increment(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.time_increment)
}

// float scan_time = 6;
inline void LaserScan::clear_scan_time() {
  scan_time_ = 0;
}
inline float LaserScan::_internal_scan_time() const {
  return scan_time_;
}
inline float LaserScan::scan_time() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.scan_time)
  return _internal_scan_time();
}
inline void LaserScan::_internal_set_scan_time(float value) {
  
  scan_time_ = value;
}
inline void LaserScan::set_scan_time(float value) {
  _internal_set_scan_time(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.scan_time)
}

// float range_min = 7;
inline void LaserScan::clear_range_min() {
  range_min_ = 0;
}
inline float LaserScan::_internal_range_min() const {
  return range_min_;
}
inline float LaserScan::range_min() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.range_min)
  return _internal_range_min();
}
inline void LaserScan::_internal_set_range_min(float value) {
  
  range_min_ = value;
}
inline void LaserScan::set_range_min(float value) {
  _internal_set_range_min(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.range_min)
}

// float range_max = 8;
inline void LaserScan::clear_range_max() {
  range_max_ = 0;
}
inline float LaserScan::_internal_range_max() const {
  return range_max_;
}
inline float LaserScan::range_max() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.range_max)
  return _internal_range_max();
}
inline void LaserScan::_internal_set_range_max(float value) {
  
  range_max_ = value;
}
inline void LaserScan::set_range_max(float value) {
  _internal_set_range_max(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.range_max)
}

// repeated float ranges = 9;
inline int LaserScan::_internal_ranges_size() const {
  return ranges_.size();
}
inline int LaserScan::ranges_size() const {
  return _internal_ranges_size();
}
inline void LaserScan::clear_ranges() {
  ranges_.Clear();
}
inline float LaserScan::_internal_ranges(int index) const {
  return ranges_.Get(index);
}
inline float LaserScan::ranges(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.ranges)
  return _internal_ranges(index);
}
inline void LaserScan::set_ranges(int index, float value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.ranges)
}
inline void LaserScan::_internal_add_ranges(float value) {
  ranges_.Add(value);
}
inline void LaserScan::add_ranges(float value) {
  _internal_add_ranges(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.ranges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LaserScan::_internal_ranges() const {
  return ranges_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LaserScan::ranges() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.ranges)
  return _internal_ranges();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LaserScan::_internal_mutable_ranges() {
  return &ranges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LaserScan::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.ranges)
  return _internal_mutable_ranges();
}

// repeated float intensities = 10;
inline int LaserScan::_internal_intensities_size() const {
  return intensities_.size();
}
inline int LaserScan::intensities_size() const {
  return _internal_intensities_size();
}
inline void LaserScan::clear_intensities() {
  intensities_.Clear();
}
inline float LaserScan::_internal_intensities(int index) const {
  return intensities_.Get(index);
}
inline float LaserScan::intensities(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.intensities)
  return _internal_intensities(index);
}
inline void LaserScan::set_intensities(int index, float value) {
  intensities_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.intensities)
}
inline void LaserScan::_internal_add_intensities(float value) {
  intensities_.Add(value);
}
inline void LaserScan::add_intensities(float value) {
  _internal_add_intensities(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.intensities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LaserScan::_internal_intensities() const {
  return intensities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LaserScan::intensities() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.intensities)
  return _internal_intensities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LaserScan::_internal_mutable_intensities() {
  return &intensities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LaserScan::mutable_intensities() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.LaserScan.intensities)
  return _internal_mutable_intensities();
}

// -------------------------------------------------------------------

// PointCloud

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool PointCloud::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PointCloud::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PointCloud::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PointCloud::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.header)
  return _internal_header();
}
inline void PointCloud::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointCloud::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointCloud::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointCloud::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointCloud::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.header)
  return _internal_mutable_header();
}
inline void PointCloud::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.header)
}

// repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point32 points = 2;
inline int PointCloud::_internal_points_size() const {
  return points_.size();
}
inline int PointCloud::points_size() const {
  return _internal_points_size();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* PointCloud::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point32 >*
PointCloud::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.points)
  return &points_;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point32& PointCloud::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point32& PointCloud::points(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.points)
  return _internal_points(index);
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* PointCloud::_internal_add_points() {
  return points_.Add();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* PointCloud::add_points() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point32 >&
PointCloud::points() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.points)
  return points_;
}

// repeated .openbot_bridge.ros2_msgs.sensor_msgs.ChannelFloat32 channels = 3;
inline int PointCloud::_internal_channels_size() const {
  return channels_.size();
}
inline int PointCloud::channels_size() const {
  return _internal_channels_size();
}
inline void PointCloud::clear_channels() {
  channels_.Clear();
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32* PointCloud::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32 >*
PointCloud::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.channels)
  return &channels_;
}
inline const ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32& PointCloud::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32& PointCloud::channels(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.channels)
  return _internal_channels(index);
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32* PointCloud::_internal_add_channels() {
  return channels_.Add();
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32* PointCloud::add_channels() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::sensor_msgs::ChannelFloat32 >&
PointCloud::channels() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud.channels)
  return channels_;
}

// -------------------------------------------------------------------

// PointField

// string name = 1;
inline void PointField::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PointField::name() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointField.name)
  return _internal_name();
}
inline void PointField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.PointField.name)
}
inline std::string* PointField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.PointField.name)
  return _internal_mutable_name();
}
inline const std::string& PointField::_internal_name() const {
  return name_.Get();
}
inline void PointField::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PointField::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.sensor_msgs.PointField.name)
}
inline void PointField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.sensor_msgs.PointField.name)
}
inline void PointField::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.sensor_msgs.PointField.name)
}
inline std::string* PointField::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PointField::release_name() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.PointField.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PointField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.PointField.name)
}

// uint32 offset = 2;
inline void PointField::clear_offset() {
  offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointField::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointField::offset() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointField.offset)
  return _internal_offset();
}
inline void PointField::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offset_ = value;
}
inline void PointField::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.PointField.offset)
}

// uint32 datatype = 3;
inline void PointField::clear_datatype() {
  datatype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointField::_internal_datatype() const {
  return datatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointField::datatype() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointField.datatype)
  return _internal_datatype();
}
inline void PointField::_internal_set_datatype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  datatype_ = value;
}
inline void PointField::set_datatype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.PointField.datatype)
}

// uint32 count = 4;
inline void PointField::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointField::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointField::count() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointField.count)
  return _internal_count();
}
inline void PointField::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void PointField::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.PointField.count)
}

// -------------------------------------------------------------------

// PointCloud2

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool PointCloud2::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PointCloud2::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PointCloud2::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PointCloud2::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.header)
  return _internal_header();
}
inline void PointCloud2::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointCloud2::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointCloud2::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointCloud2::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointCloud2::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.header)
  return _internal_mutable_header();
}
inline void PointCloud2::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.header)
}

// uint32 height = 2;
inline void PointCloud2::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::height() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.height)
  return _internal_height();
}
inline void PointCloud2::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void PointCloud2::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.height)
}

// uint32 width = 3;
inline void PointCloud2::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::width() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.width)
  return _internal_width();
}
inline void PointCloud2::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void PointCloud2::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.width)
}

// repeated .openbot_bridge.ros2_msgs.sensor_msgs.PointField fields = 4;
inline int PointCloud2::_internal_fields_size() const {
  return fields_.size();
}
inline int PointCloud2::fields_size() const {
  return _internal_fields_size();
}
inline void PointCloud2::clear_fields() {
  fields_.Clear();
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::PointField* PointCloud2::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::sensor_msgs::PointField >*
PointCloud2::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.fields)
  return &fields_;
}
inline const ::openbot_bridge::ros2_msgs::sensor_msgs::PointField& PointCloud2::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::sensor_msgs::PointField& PointCloud2::fields(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.fields)
  return _internal_fields(index);
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::PointField* PointCloud2::_internal_add_fields() {
  return fields_.Add();
}
inline ::openbot_bridge::ros2_msgs::sensor_msgs::PointField* PointCloud2::add_fields() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::sensor_msgs::PointField >&
PointCloud2::fields() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.fields)
  return fields_;
}

// bool is_bigendian = 5;
inline void PointCloud2::clear_is_bigendian() {
  is_bigendian_ = false;
}
inline bool PointCloud2::_internal_is_bigendian() const {
  return is_bigendian_;
}
inline bool PointCloud2::is_bigendian() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.is_bigendian)
  return _internal_is_bigendian();
}
inline void PointCloud2::_internal_set_is_bigendian(bool value) {
  
  is_bigendian_ = value;
}
inline void PointCloud2::set_is_bigendian(bool value) {
  _internal_set_is_bigendian(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.is_bigendian)
}

// uint32 point_step = 6;
inline void PointCloud2::clear_point_step() {
  point_step_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::_internal_point_step() const {
  return point_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::point_step() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.point_step)
  return _internal_point_step();
}
inline void PointCloud2::_internal_set_point_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  point_step_ = value;
}
inline void PointCloud2::set_point_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_point_step(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.point_step)
}

// uint32 row_step = 7;
inline void PointCloud2::clear_row_step() {
  row_step_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::_internal_row_step() const {
  return row_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::row_step() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.row_step)
  return _internal_row_step();
}
inline void PointCloud2::_internal_set_row_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  row_step_ = value;
}
inline void PointCloud2::set_row_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_step(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.row_step)
}

// repeated uint32 data = 8;
inline int PointCloud2::_internal_data_size() const {
  return data_.size();
}
inline int PointCloud2::data_size() const {
  return _internal_data_size();
}
inline void PointCloud2::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::data(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.data)
  return _internal_data(index);
}
inline void PointCloud2::set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.data)
}
inline void PointCloud2::_internal_add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_.Add(value);
}
inline void PointCloud2::add_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud2::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointCloud2::data() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud2::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointCloud2::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.data)
  return _internal_mutable_data();
}

// bool is_dense = 9;
inline void PointCloud2::clear_is_dense() {
  is_dense_ = false;
}
inline bool PointCloud2::_internal_is_dense() const {
  return is_dense_;
}
inline bool PointCloud2::is_dense() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.is_dense)
  return _internal_is_dense();
}
inline void PointCloud2::_internal_set_is_dense(bool value) {
  
  is_dense_ = value;
}
inline void PointCloud2::set_is_dense(bool value) {
  _internal_set_is_dense(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.PointCloud2.is_dense)
}

// -------------------------------------------------------------------

// Range

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Range::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Range::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Range::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Range::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Range.header)
  return _internal_header();
}
inline void Range::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Range.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Range::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Range::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.sensor_msgs.Range.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Range::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Range::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.sensor_msgs.Range.header)
  return _internal_mutable_header();
}
inline void Range::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.sensor_msgs.Range.header)
}

// uint32 radiation_type = 2;
inline void Range::clear_radiation_type() {
  radiation_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Range::_internal_radiation_type() const {
  return radiation_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Range::radiation_type() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Range.radiation_type)
  return _internal_radiation_type();
}
inline void Range::_internal_set_radiation_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  radiation_type_ = value;
}
inline void Range::set_radiation_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_radiation_type(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Range.radiation_type)
}

// float field_of_view = 3;
inline void Range::clear_field_of_view() {
  field_of_view_ = 0;
}
inline float Range::_internal_field_of_view() const {
  return field_of_view_;
}
inline float Range::field_of_view() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Range.field_of_view)
  return _internal_field_of_view();
}
inline void Range::_internal_set_field_of_view(float value) {
  
  field_of_view_ = value;
}
inline void Range::set_field_of_view(float value) {
  _internal_set_field_of_view(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Range.field_of_view)
}

// float min_range = 4;
inline void Range::clear_min_range() {
  min_range_ = 0;
}
inline float Range::_internal_min_range() const {
  return min_range_;
}
inline float Range::min_range() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Range.min_range)
  return _internal_min_range();
}
inline void Range::_internal_set_min_range(float value) {
  
  min_range_ = value;
}
inline void Range::set_min_range(float value) {
  _internal_set_min_range(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Range.min_range)
}

// float max_range = 5;
inline void Range::clear_max_range() {
  max_range_ = 0;
}
inline float Range::_internal_max_range() const {
  return max_range_;
}
inline float Range::max_range() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Range.max_range)
  return _internal_max_range();
}
inline void Range::_internal_set_max_range(float value) {
  
  max_range_ = value;
}
inline void Range::set_max_range(float value) {
  _internal_set_max_range(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Range.max_range)
}

// float range = 6;
inline void Range::clear_range() {
  range_ = 0;
}
inline float Range::_internal_range() const {
  return range_;
}
inline float Range::range() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.Range.range)
  return _internal_range();
}
inline void Range::_internal_set_range(float value) {
  
  range_ = value;
}
inline void Range::set_range(float value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.Range.range)
}

// -------------------------------------------------------------------

// RegionOfInterest

// uint32 x_offset = 1;
inline void RegionOfInterest::clear_x_offset() {
  x_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionOfInterest::_internal_x_offset() const {
  return x_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionOfInterest::x_offset() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest.x_offset)
  return _internal_x_offset();
}
inline void RegionOfInterest::_internal_set_x_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  x_offset_ = value;
}
inline void RegionOfInterest::set_x_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x_offset(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest.x_offset)
}

// uint32 y_offset = 2;
inline void RegionOfInterest::clear_y_offset() {
  y_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionOfInterest::_internal_y_offset() const {
  return y_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionOfInterest::y_offset() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest.y_offset)
  return _internal_y_offset();
}
inline void RegionOfInterest::_internal_set_y_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  y_offset_ = value;
}
inline void RegionOfInterest::set_y_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_y_offset(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest.y_offset)
}

// uint32 height = 3;
inline void RegionOfInterest::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionOfInterest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionOfInterest::height() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest.height)
  return _internal_height();
}
inline void RegionOfInterest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void RegionOfInterest::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest.height)
}

// uint32 width = 4;
inline void RegionOfInterest::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionOfInterest::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionOfInterest::width() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest.width)
  return _internal_width();
}
inline void RegionOfInterest::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void RegionOfInterest::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest.width)
}

// bool do_rectify = 5;
inline void RegionOfInterest::clear_do_rectify() {
  do_rectify_ = false;
}
inline bool RegionOfInterest::_internal_do_rectify() const {
  return do_rectify_;
}
inline bool RegionOfInterest::do_rectify() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest.do_rectify)
  return _internal_do_rectify();
}
inline void RegionOfInterest::_internal_set_do_rectify(bool value) {
  
  do_rectify_ = value;
}
inline void RegionOfInterest::set_do_rectify(bool value) {
  _internal_set_do_rectify(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.sensor_msgs.RegionOfInterest.do_rectify)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sensor_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fsensor_5fmsgs_2eproto
