// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/ros2_msgs/nav_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "openbot_bridge/ros2_msgs/std_msgs.pb.h"
#include "openbot_bridge/ros2_msgs/builtin_interfaces.pb.h"
#include "openbot_bridge/ros2_msgs/geometry_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto;
namespace openbot_bridge {
namespace ros2_msgs {
namespace nav_msgs {
class GridCells;
class GridCellsDefaultTypeInternal;
extern GridCellsDefaultTypeInternal _GridCells_default_instance_;
class MapMetaData;
class MapMetaDataDefaultTypeInternal;
extern MapMetaDataDefaultTypeInternal _MapMetaData_default_instance_;
class OccupancyGrid;
class OccupancyGridDefaultTypeInternal;
extern OccupancyGridDefaultTypeInternal _OccupancyGrid_default_instance_;
class Octomap;
class OctomapDefaultTypeInternal;
extern OctomapDefaultTypeInternal _Octomap_default_instance_;
class OctomapWithPose;
class OctomapWithPoseDefaultTypeInternal;
extern OctomapWithPoseDefaultTypeInternal _OctomapWithPose_default_instance_;
class Odometry;
class OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
}  // namespace nav_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::openbot_bridge::ros2_msgs::nav_msgs::GridCells* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::nav_msgs::GridCells>(Arena*);
template<> ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData>(Arena*);
template<> ::openbot_bridge::ros2_msgs::nav_msgs::OccupancyGrid* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::nav_msgs::OccupancyGrid>(Arena*);
template<> ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::nav_msgs::Octomap>(Arena*);
template<> ::openbot_bridge::ros2_msgs::nav_msgs::OctomapWithPose* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::nav_msgs::OctomapWithPose>(Arena*);
template<> ::openbot_bridge::ros2_msgs::nav_msgs::Odometry* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::nav_msgs::Odometry>(Arena*);
template<> ::openbot_bridge::ros2_msgs::nav_msgs::Path* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::nav_msgs::Path>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openbot_bridge {
namespace ros2_msgs {
namespace nav_msgs {

// ===================================================================

class Path PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.nav_msgs.Path) */ {
 public:
  inline Path() : Path(nullptr) {}
  virtual ~Path();

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Path& default_instance();

  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.nav_msgs.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped poses = 2;
  int poses_size() const;
  private:
  int _internal_poses_size() const;
  public:
  void clear_poses();
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped* mutable_poses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped >*
      mutable_poses();
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped& _internal_poses(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped* _internal_add_poses();
  public:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped& poses(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped* add_poses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped >&
      poses() const;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.nav_msgs.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped > poses_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Odometry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.nav_msgs.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {}
  virtual ~Odometry();

  Odometry(const Odometry& from);
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Odometry& default_instance();

  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Odometry* New() const final {
    return CreateMaybeMessage<Odometry>(nullptr);
  }

  Odometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Odometry& from);
  void MergeFrom(const Odometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.nav_msgs.Odometry";
  }
  protected:
  explicit Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFrameIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 3,
    kTwistFieldNumber = 4,
  };
  // string child_frame_id = 2;
  void clear_child_frame_id();
  const std::string& child_frame_id() const;
  void set_child_frame_id(const std::string& value);
  void set_child_frame_id(std::string&& value);
  void set_child_frame_id(const char* value);
  void set_child_frame_id(const char* value, size_t size);
  std::string* mutable_child_frame_id();
  std::string* release_child_frame_id();
  void set_allocated_child_frame_id(std::string* child_frame_id);
  private:
  const std::string& _internal_child_frame_id() const;
  void _internal_set_child_frame_id(const std::string& value);
  std::string* _internal_mutable_child_frame_id();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance pose = 3;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* release_pose();
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* mutable_pose();
  void set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& _internal_pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose);
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* unsafe_arena_release_pose();

  // .openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance twist = 4;
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance& twist() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* release_twist();
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* mutable_twist();
  void set_allocated_twist(::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* twist);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance& _internal_twist() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* _internal_mutable_twist();
  public:
  void unsafe_arena_set_allocated_twist(
      ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* twist);
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* unsafe_arena_release_twist();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.nav_msgs.Odometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_frame_id_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* twist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GridCells PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.nav_msgs.GridCells) */ {
 public:
  inline GridCells() : GridCells(nullptr) {}
  virtual ~GridCells();

  GridCells(const GridCells& from);
  GridCells(GridCells&& from) noexcept
    : GridCells() {
    *this = ::std::move(from);
  }

  inline GridCells& operator=(const GridCells& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridCells& operator=(GridCells&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GridCells& default_instance();

  static inline const GridCells* internal_default_instance() {
    return reinterpret_cast<const GridCells*>(
               &_GridCells_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GridCells& a, GridCells& b) {
    a.Swap(&b);
  }
  inline void Swap(GridCells* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridCells* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridCells* New() const final {
    return CreateMaybeMessage<GridCells>(nullptr);
  }

  GridCells* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridCells>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GridCells& from);
  void MergeFrom(const GridCells& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GridCells* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.nav_msgs.GridCells";
  }
  protected:
  explicit GridCells(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kCellWidthFieldNumber = 2,
    kCellHeightFieldNumber = 3,
  };
  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point cells = 4;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >*
      mutable_cells();
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& _internal_cells(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* _internal_add_cells();
  public:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& cells(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >&
      cells() const;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // float cell_width = 2;
  void clear_cell_width();
  float cell_width() const;
  void set_cell_width(float value);
  private:
  float _internal_cell_width() const;
  void _internal_set_cell_width(float value);
  public:

  // float cell_height = 3;
  void clear_cell_height();
  float cell_height() const;
  void set_cell_height(float value);
  private:
  float _internal_cell_height() const;
  void _internal_set_cell_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.nav_msgs.GridCells)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point > cells_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  float cell_width_;
  float cell_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MapMetaData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData) */ {
 public:
  inline MapMetaData() : MapMetaData(nullptr) {}
  virtual ~MapMetaData();

  MapMetaData(const MapMetaData& from);
  MapMetaData(MapMetaData&& from) noexcept
    : MapMetaData() {
    *this = ::std::move(from);
  }

  inline MapMetaData& operator=(const MapMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapMetaData& operator=(MapMetaData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapMetaData& default_instance();

  static inline const MapMetaData* internal_default_instance() {
    return reinterpret_cast<const MapMetaData*>(
               &_MapMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MapMetaData& a, MapMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(MapMetaData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapMetaData* New() const final {
    return CreateMaybeMessage<MapMetaData>(nullptr);
  }

  MapMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapMetaData& from);
  void MergeFrom(const MapMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.nav_msgs.MapMetaData";
  }
  protected:
  explicit MapMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapLoadTimeFieldNumber = 1,
    kOriginFieldNumber = 5,
    kResolutionFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // .openbot_bridge.ros2_msgs.builtin_interfaces.Time map_load_time = 1;
  bool has_map_load_time() const;
  private:
  bool _internal_has_map_load_time() const;
  public:
  void clear_map_load_time();
  const ::openbot_bridge::ros2_msgs::builtin_interfaces::Time& map_load_time() const;
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* release_map_load_time();
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* mutable_map_load_time();
  void set_allocated_map_load_time(::openbot_bridge::ros2_msgs::builtin_interfaces::Time* map_load_time);
  private:
  const ::openbot_bridge::ros2_msgs::builtin_interfaces::Time& _internal_map_load_time() const;
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* _internal_mutable_map_load_time();
  public:
  void unsafe_arena_set_allocated_map_load_time(
      ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* map_load_time);
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* unsafe_arena_release_map_load_time();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose origin = 5;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& origin() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* release_origin();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* mutable_origin();
  void set_allocated_origin(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* origin);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& _internal_origin() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* origin);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* unsafe_arena_release_origin();

  // float resolution = 2;
  void clear_resolution();
  float resolution() const;
  void set_resolution(float value);
  private:
  float _internal_resolution() const;
  void _internal_set_resolution(float value);
  public:

  // uint32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* map_load_time_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* origin_;
  float resolution_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class OccupancyGrid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid) */ {
 public:
  inline OccupancyGrid() : OccupancyGrid(nullptr) {}
  virtual ~OccupancyGrid();

  OccupancyGrid(const OccupancyGrid& from);
  OccupancyGrid(OccupancyGrid&& from) noexcept
    : OccupancyGrid() {
    *this = ::std::move(from);
  }

  inline OccupancyGrid& operator=(const OccupancyGrid& from) {
    CopyFrom(from);
    return *this;
  }
  inline OccupancyGrid& operator=(OccupancyGrid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OccupancyGrid& default_instance();

  static inline const OccupancyGrid* internal_default_instance() {
    return reinterpret_cast<const OccupancyGrid*>(
               &_OccupancyGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OccupancyGrid& a, OccupancyGrid& b) {
    a.Swap(&b);
  }
  inline void Swap(OccupancyGrid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OccupancyGrid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OccupancyGrid* New() const final {
    return CreateMaybeMessage<OccupancyGrid>(nullptr);
  }

  OccupancyGrid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OccupancyGrid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OccupancyGrid& from);
  void MergeFrom(const OccupancyGrid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OccupancyGrid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid";
  }
  protected:
  explicit OccupancyGrid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // repeated int32 data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_data();

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.nav_msgs.MapMetaData info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData& info() const;
  ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* release_info();
  ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* mutable_info();
  void set_allocated_info(::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* info);
  private:
  const ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData& _internal_info() const;
  ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* info);
  ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Octomap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.nav_msgs.Octomap) */ {
 public:
  inline Octomap() : Octomap(nullptr) {}
  virtual ~Octomap();

  Octomap(const Octomap& from);
  Octomap(Octomap&& from) noexcept
    : Octomap() {
    *this = ::std::move(from);
  }

  inline Octomap& operator=(const Octomap& from) {
    CopyFrom(from);
    return *this;
  }
  inline Octomap& operator=(Octomap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Octomap& default_instance();

  static inline const Octomap* internal_default_instance() {
    return reinterpret_cast<const Octomap*>(
               &_Octomap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Octomap& a, Octomap& b) {
    a.Swap(&b);
  }
  inline void Swap(Octomap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Octomap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Octomap* New() const final {
    return CreateMaybeMessage<Octomap>(nullptr);
  }

  Octomap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Octomap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Octomap& from);
  void MergeFrom(const Octomap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Octomap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.nav_msgs.Octomap";
  }
  protected:
  explicit Octomap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kIdFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kResolutionFieldNumber = 4,
    kBinaryFieldNumber = 2,
  };
  // repeated int32 data = 5 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_data();

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // double resolution = 4;
  void clear_resolution();
  double resolution() const;
  void set_resolution(double value);
  private:
  double _internal_resolution() const;
  void _internal_set_resolution(double value);
  public:

  // bool binary = 2;
  void clear_binary();
  bool binary() const;
  void set_binary(bool value);
  private:
  bool _internal_binary() const;
  void _internal_set_binary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.nav_msgs.Octomap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  double resolution_;
  bool binary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class OctomapWithPose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose) */ {
 public:
  inline OctomapWithPose() : OctomapWithPose(nullptr) {}
  virtual ~OctomapWithPose();

  OctomapWithPose(const OctomapWithPose& from);
  OctomapWithPose(OctomapWithPose&& from) noexcept
    : OctomapWithPose() {
    *this = ::std::move(from);
  }

  inline OctomapWithPose& operator=(const OctomapWithPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline OctomapWithPose& operator=(OctomapWithPose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OctomapWithPose& default_instance();

  static inline const OctomapWithPose* internal_default_instance() {
    return reinterpret_cast<const OctomapWithPose*>(
               &_OctomapWithPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OctomapWithPose& a, OctomapWithPose& b) {
    a.Swap(&b);
  }
  inline void Swap(OctomapWithPose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OctomapWithPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OctomapWithPose* New() const final {
    return CreateMaybeMessage<OctomapWithPose>(nullptr);
  }

  OctomapWithPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OctomapWithPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OctomapWithPose& from);
  void MergeFrom(const OctomapWithPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OctomapWithPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose";
  }
  protected:
  explicit OctomapWithPose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kOriginFieldNumber = 2,
    kOctomapFieldNumber = 3,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose origin = 2;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& origin() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* release_origin();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* mutable_origin();
  void set_allocated_origin(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* origin);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& _internal_origin() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* origin);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* unsafe_arena_release_origin();

  // .openbot_bridge.ros2_msgs.nav_msgs.Octomap octomap = 3;
  bool has_octomap() const;
  private:
  bool _internal_has_octomap() const;
  public:
  void clear_octomap();
  const ::openbot_bridge::ros2_msgs::nav_msgs::Octomap& octomap() const;
  ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* release_octomap();
  ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* mutable_octomap();
  void set_allocated_octomap(::openbot_bridge::ros2_msgs::nav_msgs::Octomap* octomap);
  private:
  const ::openbot_bridge::ros2_msgs::nav_msgs::Octomap& _internal_octomap() const;
  ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* _internal_mutable_octomap();
  public:
  void unsafe_arena_set_allocated_octomap(
      ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* octomap);
  ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* unsafe_arena_release_octomap();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* origin_;
  ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* octomap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Path

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Path::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Path::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Path::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Path::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.Path.header)
  return _internal_header();
}
inline void Path::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.Path.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Path::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Path::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.Path.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Path::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Path::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.Path.header)
  return _internal_mutable_header();
}
inline void Path::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.Path.header)
}

// repeated .openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped poses = 2;
inline int Path::_internal_poses_size() const {
  return poses_.size();
}
inline int Path::poses_size() const {
  return _internal_poses_size();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped* Path::mutable_poses(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.Path.poses)
  return poses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped >*
Path::mutable_poses() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.nav_msgs.Path.poses)
  return &poses_;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped& Path::_internal_poses(int index) const {
  return poses_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped& Path::poses(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.Path.poses)
  return _internal_poses(index);
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped* Path::_internal_add_poses() {
  return poses_.Add();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped* Path::add_poses() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.nav_msgs.Path.poses)
  return _internal_add_poses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped >&
Path::poses() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.nav_msgs.Path.poses)
  return poses_;
}

// -------------------------------------------------------------------

// Odometry

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Odometry::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Odometry::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Odometry::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Odometry::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.Odometry.header)
  return _internal_header();
}
inline void Odometry::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.Odometry.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Odometry::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Odometry::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.Odometry.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Odometry::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Odometry::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.Odometry.header)
  return _internal_mutable_header();
}
inline void Odometry::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.Odometry.header)
}

// string child_frame_id = 2;
inline void Odometry::clear_child_frame_id() {
  child_frame_id_.ClearToEmpty();
}
inline const std::string& Odometry::child_frame_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.Odometry.child_frame_id)
  return _internal_child_frame_id();
}
inline void Odometry::set_child_frame_id(const std::string& value) {
  _internal_set_child_frame_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.nav_msgs.Odometry.child_frame_id)
}
inline std::string* Odometry::mutable_child_frame_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.Odometry.child_frame_id)
  return _internal_mutable_child_frame_id();
}
inline const std::string& Odometry::_internal_child_frame_id() const {
  return child_frame_id_.Get();
}
inline void Odometry::_internal_set_child_frame_id(const std::string& value) {
  
  child_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Odometry::set_child_frame_id(std::string&& value) {
  
  child_frame_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.nav_msgs.Odometry.child_frame_id)
}
inline void Odometry::set_child_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  child_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.nav_msgs.Odometry.child_frame_id)
}
inline void Odometry::set_child_frame_id(const char* value,
    size_t size) {
  
  child_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.nav_msgs.Odometry.child_frame_id)
}
inline std::string* Odometry::_internal_mutable_child_frame_id() {
  
  return child_frame_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Odometry::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.Odometry.child_frame_id)
  return child_frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Odometry::set_allocated_child_frame_id(std::string* child_frame_id) {
  if (child_frame_id != nullptr) {
    
  } else {
    
  }
  child_frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), child_frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.Odometry.child_frame_id)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance pose = 3;
inline bool Odometry::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Odometry::has_pose() const {
  return _internal_has_pose();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& Odometry::_internal_pose() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_PoseWithCovariance_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& Odometry::pose() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.Odometry.pose)
  return _internal_pose();
}
inline void Odometry::unsafe_arena_set_allocated_pose(
    ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.Odometry.pose)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* Odometry::release_pose() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* temp = pose_;
  pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* Odometry::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.Odometry.pose)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* Odometry::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* Odometry::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.Odometry.pose)
  return _internal_mutable_pose();
}
inline void Odometry::set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose)->GetArena();
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.Odometry.pose)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance twist = 4;
inline bool Odometry::_internal_has_twist() const {
  return this != internal_default_instance() && twist_ != nullptr;
}
inline bool Odometry::has_twist() const {
  return _internal_has_twist();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance& Odometry::_internal_twist() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* p = twist_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_TwistWithCovariance_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance& Odometry::twist() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.Odometry.twist)
  return _internal_twist();
}
inline void Odometry::unsafe_arena_set_allocated_twist(
    ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* twist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_);
  }
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.Odometry.twist)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* Odometry::release_twist() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* temp = twist_;
  twist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* Odometry::unsafe_arena_release_twist() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.Odometry.twist)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* temp = twist_;
  twist_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* Odometry::_internal_mutable_twist() {
  
  if (twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance>(GetArena());
    twist_ = p;
  }
  return twist_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* Odometry::mutable_twist() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.Odometry.twist)
  return _internal_mutable_twist();
}
inline void Odometry::set_allocated_twist(::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_);
  }
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist)->GetArena();
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.Odometry.twist)
}

// -------------------------------------------------------------------

// GridCells

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool GridCells::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GridCells::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& GridCells::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& GridCells::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.GridCells.header)
  return _internal_header();
}
inline void GridCells::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.GridCells.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* GridCells::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* GridCells::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.GridCells.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* GridCells::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* GridCells::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.GridCells.header)
  return _internal_mutable_header();
}
inline void GridCells::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.GridCells.header)
}

// float cell_width = 2;
inline void GridCells::clear_cell_width() {
  cell_width_ = 0;
}
inline float GridCells::_internal_cell_width() const {
  return cell_width_;
}
inline float GridCells::cell_width() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.GridCells.cell_width)
  return _internal_cell_width();
}
inline void GridCells::_internal_set_cell_width(float value) {
  
  cell_width_ = value;
}
inline void GridCells::set_cell_width(float value) {
  _internal_set_cell_width(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.nav_msgs.GridCells.cell_width)
}

// float cell_height = 3;
inline void GridCells::clear_cell_height() {
  cell_height_ = 0;
}
inline float GridCells::_internal_cell_height() const {
  return cell_height_;
}
inline float GridCells::cell_height() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.GridCells.cell_height)
  return _internal_cell_height();
}
inline void GridCells::_internal_set_cell_height(float value) {
  
  cell_height_ = value;
}
inline void GridCells::set_cell_height(float value) {
  _internal_set_cell_height(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.nav_msgs.GridCells.cell_height)
}

// repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point cells = 4;
inline int GridCells::_internal_cells_size() const {
  return cells_.size();
}
inline int GridCells::cells_size() const {
  return _internal_cells_size();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* GridCells::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.GridCells.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >*
GridCells::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.nav_msgs.GridCells.cells)
  return &cells_;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& GridCells::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& GridCells::cells(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.GridCells.cells)
  return _internal_cells(index);
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* GridCells::_internal_add_cells() {
  return cells_.Add();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* GridCells::add_cells() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.nav_msgs.GridCells.cells)
  return _internal_add_cells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point >&
GridCells::cells() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.nav_msgs.GridCells.cells)
  return cells_;
}

// -------------------------------------------------------------------

// MapMetaData

// .openbot_bridge.ros2_msgs.builtin_interfaces.Time map_load_time = 1;
inline bool MapMetaData::_internal_has_map_load_time() const {
  return this != internal_default_instance() && map_load_time_ != nullptr;
}
inline bool MapMetaData::has_map_load_time() const {
  return _internal_has_map_load_time();
}
inline const ::openbot_bridge::ros2_msgs::builtin_interfaces::Time& MapMetaData::_internal_map_load_time() const {
  const ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* p = map_load_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::builtin_interfaces::Time&>(
      ::openbot_bridge::ros2_msgs::builtin_interfaces::_Time_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::builtin_interfaces::Time& MapMetaData::map_load_time() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.map_load_time)
  return _internal_map_load_time();
}
inline void MapMetaData::unsafe_arena_set_allocated_map_load_time(
    ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* map_load_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_load_time_);
  }
  map_load_time_ = map_load_time;
  if (map_load_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.map_load_time)
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* MapMetaData::release_map_load_time() {
  
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* temp = map_load_time_;
  map_load_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* MapMetaData::unsafe_arena_release_map_load_time() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.map_load_time)
  
  ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* temp = map_load_time_;
  map_load_time_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* MapMetaData::_internal_mutable_map_load_time() {
  
  if (map_load_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::builtin_interfaces::Time>(GetArena());
    map_load_time_ = p;
  }
  return map_load_time_;
}
inline ::openbot_bridge::ros2_msgs::builtin_interfaces::Time* MapMetaData::mutable_map_load_time() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.map_load_time)
  return _internal_mutable_map_load_time();
}
inline void MapMetaData::set_allocated_map_load_time(::openbot_bridge::ros2_msgs::builtin_interfaces::Time* map_load_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_load_time_);
  }
  if (map_load_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_load_time)->GetArena();
    if (message_arena != submessage_arena) {
      map_load_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_load_time, submessage_arena);
    }
    
  } else {
    
  }
  map_load_time_ = map_load_time;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.map_load_time)
}

// float resolution = 2;
inline void MapMetaData::clear_resolution() {
  resolution_ = 0;
}
inline float MapMetaData::_internal_resolution() const {
  return resolution_;
}
inline float MapMetaData::resolution() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.resolution)
  return _internal_resolution();
}
inline void MapMetaData::_internal_set_resolution(float value) {
  
  resolution_ = value;
}
inline void MapMetaData::set_resolution(float value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.resolution)
}

// uint32 width = 3;
inline void MapMetaData::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapMetaData::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapMetaData::width() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.width)
  return _internal_width();
}
inline void MapMetaData::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void MapMetaData::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.width)
}

// uint32 height = 4;
inline void MapMetaData::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapMetaData::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapMetaData::height() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.height)
  return _internal_height();
}
inline void MapMetaData::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void MapMetaData::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.height)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Pose origin = 5;
inline bool MapMetaData::_internal_has_origin() const {
  return this != internal_default_instance() && origin_ != nullptr;
}
inline bool MapMetaData::has_origin() const {
  return _internal_has_origin();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& MapMetaData::_internal_origin() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* p = origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Pose_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& MapMetaData::origin() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.origin)
  return _internal_origin();
}
inline void MapMetaData::unsafe_arena_set_allocated_origin(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* origin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.origin)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* MapMetaData::release_origin() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = origin_;
  origin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* MapMetaData::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.origin)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* MapMetaData::_internal_mutable_origin() {
  
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Pose>(GetArena());
    origin_ = p;
  }
  return origin_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* MapMetaData::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.origin)
  return _internal_mutable_origin();
}
inline void MapMetaData::set_allocated_origin(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin)->GetArena();
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.MapMetaData.origin)
}

// -------------------------------------------------------------------

// OccupancyGrid

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool OccupancyGrid::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool OccupancyGrid::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& OccupancyGrid::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& OccupancyGrid::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.header)
  return _internal_header();
}
inline void OccupancyGrid::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* OccupancyGrid::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* OccupancyGrid::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* OccupancyGrid::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* OccupancyGrid::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.header)
  return _internal_mutable_header();
}
inline void OccupancyGrid::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.header)
}

// .openbot_bridge.ros2_msgs.nav_msgs.MapMetaData info = 2;
inline bool OccupancyGrid::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool OccupancyGrid::has_info() const {
  return _internal_has_info();
}
inline void OccupancyGrid::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData& OccupancyGrid::_internal_info() const {
  const ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData&>(
      ::openbot_bridge::ros2_msgs::nav_msgs::_MapMetaData_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData& OccupancyGrid::info() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.info)
  return _internal_info();
}
inline void OccupancyGrid::unsafe_arena_set_allocated_info(
    ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.info)
}
inline ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* OccupancyGrid::release_info() {
  
  ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* OccupancyGrid::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.info)
  
  ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* OccupancyGrid::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* OccupancyGrid::mutable_info() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.info)
  return _internal_mutable_info();
}
inline void OccupancyGrid::set_allocated_info(::openbot_bridge::ros2_msgs::nav_msgs::MapMetaData* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.info)
}

// repeated int32 data = 3;
inline int OccupancyGrid::_internal_data_size() const {
  return data_.size();
}
inline int OccupancyGrid::data_size() const {
  return _internal_data_size();
}
inline void OccupancyGrid::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OccupancyGrid::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OccupancyGrid::data(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.data)
  return _internal_data(index);
}
inline void OccupancyGrid::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.data)
}
inline void OccupancyGrid::_internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Add(value);
}
inline void OccupancyGrid::add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OccupancyGrid::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OccupancyGrid::data() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OccupancyGrid::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OccupancyGrid::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.nav_msgs.OccupancyGrid.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// Octomap

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Octomap::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Octomap::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Octomap::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Octomap::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.Octomap.header)
  return _internal_header();
}
inline void Octomap::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.Octomap.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Octomap::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Octomap::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.Octomap.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Octomap::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Octomap::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.Octomap.header)
  return _internal_mutable_header();
}
inline void Octomap::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.Octomap.header)
}

// bool binary = 2;
inline void Octomap::clear_binary() {
  binary_ = false;
}
inline bool Octomap::_internal_binary() const {
  return binary_;
}
inline bool Octomap::binary() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.Octomap.binary)
  return _internal_binary();
}
inline void Octomap::_internal_set_binary(bool value) {
  
  binary_ = value;
}
inline void Octomap::set_binary(bool value) {
  _internal_set_binary(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.nav_msgs.Octomap.binary)
}

// string id = 3;
inline void Octomap::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Octomap::id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.Octomap.id)
  return _internal_id();
}
inline void Octomap::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.nav_msgs.Octomap.id)
}
inline std::string* Octomap::mutable_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.Octomap.id)
  return _internal_mutable_id();
}
inline const std::string& Octomap::_internal_id() const {
  return id_.Get();
}
inline void Octomap::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Octomap::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.nav_msgs.Octomap.id)
}
inline void Octomap::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.nav_msgs.Octomap.id)
}
inline void Octomap::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.nav_msgs.Octomap.id)
}
inline std::string* Octomap::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Octomap::release_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.Octomap.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Octomap::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.Octomap.id)
}

// double resolution = 4;
inline void Octomap::clear_resolution() {
  resolution_ = 0;
}
inline double Octomap::_internal_resolution() const {
  return resolution_;
}
inline double Octomap::resolution() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.Octomap.resolution)
  return _internal_resolution();
}
inline void Octomap::_internal_set_resolution(double value) {
  
  resolution_ = value;
}
inline void Octomap::set_resolution(double value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.nav_msgs.Octomap.resolution)
}

// repeated int32 data = 5 [packed = true];
inline int Octomap::_internal_data_size() const {
  return data_.size();
}
inline int Octomap::data_size() const {
  return _internal_data_size();
}
inline void Octomap::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Octomap::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Octomap::data(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.Octomap.data)
  return _internal_data(index);
}
inline void Octomap::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.nav_msgs.Octomap.data)
}
inline void Octomap::_internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Add(value);
}
inline void Octomap::add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.nav_msgs.Octomap.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Octomap::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Octomap::data() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.nav_msgs.Octomap.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Octomap::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Octomap::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.nav_msgs.Octomap.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// OctomapWithPose

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool OctomapWithPose::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool OctomapWithPose::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& OctomapWithPose::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& OctomapWithPose::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.header)
  return _internal_header();
}
inline void OctomapWithPose::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* OctomapWithPose::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* OctomapWithPose::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* OctomapWithPose::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* OctomapWithPose::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.header)
  return _internal_mutable_header();
}
inline void OctomapWithPose::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Pose origin = 2;
inline bool OctomapWithPose::_internal_has_origin() const {
  return this != internal_default_instance() && origin_ != nullptr;
}
inline bool OctomapWithPose::has_origin() const {
  return _internal_has_origin();
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& OctomapWithPose::_internal_origin() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* p = origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Pose_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& OctomapWithPose::origin() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.origin)
  return _internal_origin();
}
inline void OctomapWithPose::unsafe_arena_set_allocated_origin(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* origin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.origin)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* OctomapWithPose::release_origin() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = origin_;
  origin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* OctomapWithPose::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.origin)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* OctomapWithPose::_internal_mutable_origin() {
  
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Pose>(GetArena());
    origin_ = p;
  }
  return origin_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* OctomapWithPose::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.origin)
  return _internal_mutable_origin();
}
inline void OctomapWithPose::set_allocated_origin(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin)->GetArena();
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.origin)
}

// .openbot_bridge.ros2_msgs.nav_msgs.Octomap octomap = 3;
inline bool OctomapWithPose::_internal_has_octomap() const {
  return this != internal_default_instance() && octomap_ != nullptr;
}
inline bool OctomapWithPose::has_octomap() const {
  return _internal_has_octomap();
}
inline void OctomapWithPose::clear_octomap() {
  if (GetArena() == nullptr && octomap_ != nullptr) {
    delete octomap_;
  }
  octomap_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::nav_msgs::Octomap& OctomapWithPose::_internal_octomap() const {
  const ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* p = octomap_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::nav_msgs::Octomap&>(
      ::openbot_bridge::ros2_msgs::nav_msgs::_Octomap_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::nav_msgs::Octomap& OctomapWithPose::octomap() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.octomap)
  return _internal_octomap();
}
inline void OctomapWithPose::unsafe_arena_set_allocated_octomap(
    ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* octomap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(octomap_);
  }
  octomap_ = octomap;
  if (octomap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.octomap)
}
inline ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* OctomapWithPose::release_octomap() {
  
  ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* temp = octomap_;
  octomap_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* OctomapWithPose::unsafe_arena_release_octomap() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.octomap)
  
  ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* temp = octomap_;
  octomap_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* OctomapWithPose::_internal_mutable_octomap() {
  
  if (octomap_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::nav_msgs::Octomap>(GetArena());
    octomap_ = p;
  }
  return octomap_;
}
inline ::openbot_bridge::ros2_msgs::nav_msgs::Octomap* OctomapWithPose::mutable_octomap() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.octomap)
  return _internal_mutable_octomap();
}
inline void OctomapWithPose::set_allocated_octomap(::openbot_bridge::ros2_msgs::nav_msgs::Octomap* octomap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete octomap_;
  }
  if (octomap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(octomap);
    if (message_arena != submessage_arena) {
      octomap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, octomap, submessage_arena);
    }
    
  } else {
    
  }
  octomap_ = octomap;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.nav_msgs.OctomapWithPose.octomap)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nav_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fnav_5fmsgs_2eproto
