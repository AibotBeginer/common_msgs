// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/ros2_msgs/geometry_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "openbot_bridge/ros2_msgs/std_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[30]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
namespace openbot_bridge {
namespace ros2_msgs {
namespace geometry_msgs {
class Accel;
class AccelDefaultTypeInternal;
extern AccelDefaultTypeInternal _Accel_default_instance_;
class AccelStamped;
class AccelStampedDefaultTypeInternal;
extern AccelStampedDefaultTypeInternal _AccelStamped_default_instance_;
class AccelWithCovariance;
class AccelWithCovarianceDefaultTypeInternal;
extern AccelWithCovarianceDefaultTypeInternal _AccelWithCovariance_default_instance_;
class AccelWithCovarianceStamped;
class AccelWithCovarianceStampedDefaultTypeInternal;
extern AccelWithCovarianceStampedDefaultTypeInternal _AccelWithCovarianceStamped_default_instance_;
class Inertia;
class InertiaDefaultTypeInternal;
extern InertiaDefaultTypeInternal _Inertia_default_instance_;
class InertiaStamped;
class InertiaStampedDefaultTypeInternal;
extern InertiaStampedDefaultTypeInternal _InertiaStamped_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Point32;
class Point32DefaultTypeInternal;
extern Point32DefaultTypeInternal _Point32_default_instance_;
class PointStamped;
class PointStampedDefaultTypeInternal;
extern PointStampedDefaultTypeInternal _PointStamped_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class PolygonStamped;
class PolygonStampedDefaultTypeInternal;
extern PolygonStampedDefaultTypeInternal _PolygonStamped_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class Pose2D;
class Pose2DDefaultTypeInternal;
extern Pose2DDefaultTypeInternal _Pose2D_default_instance_;
class PoseArray;
class PoseArrayDefaultTypeInternal;
extern PoseArrayDefaultTypeInternal _PoseArray_default_instance_;
class PoseStamped;
class PoseStampedDefaultTypeInternal;
extern PoseStampedDefaultTypeInternal _PoseStamped_default_instance_;
class PoseWithCovariance;
class PoseWithCovarianceDefaultTypeInternal;
extern PoseWithCovarianceDefaultTypeInternal _PoseWithCovariance_default_instance_;
class PoseWithCovarianceStamped;
class PoseWithCovarianceStampedDefaultTypeInternal;
extern PoseWithCovarianceStampedDefaultTypeInternal _PoseWithCovarianceStamped_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class QuaternionStamped;
class QuaternionStampedDefaultTypeInternal;
extern QuaternionStampedDefaultTypeInternal _QuaternionStamped_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class TransformStamped;
class TransformStampedDefaultTypeInternal;
extern TransformStampedDefaultTypeInternal _TransformStamped_default_instance_;
class Twist;
class TwistDefaultTypeInternal;
extern TwistDefaultTypeInternal _Twist_default_instance_;
class TwistStamped;
class TwistStampedDefaultTypeInternal;
extern TwistStampedDefaultTypeInternal _TwistStamped_default_instance_;
class TwistWithCovariance;
class TwistWithCovarianceDefaultTypeInternal;
extern TwistWithCovarianceDefaultTypeInternal _TwistWithCovariance_default_instance_;
class TwistWithCovarianceStamped;
class TwistWithCovarianceStampedDefaultTypeInternal;
extern TwistWithCovarianceStampedDefaultTypeInternal _TwistWithCovarianceStamped_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector3Stamped;
class Vector3StampedDefaultTypeInternal;
extern Vector3StampedDefaultTypeInternal _Vector3Stamped_default_instance_;
class VelocityStamped;
class VelocityStampedDefaultTypeInternal;
extern VelocityStampedDefaultTypeInternal _VelocityStamped_default_instance_;
class Wrench;
class WrenchDefaultTypeInternal;
extern WrenchDefaultTypeInternal _Wrench_default_instance_;
class WrenchStamped;
class WrenchStampedDefaultTypeInternal;
extern WrenchStampedDefaultTypeInternal _WrenchStamped_default_instance_;
}  // namespace geometry_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Accel>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::AccelStamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::AccelStamped>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovarianceStamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovarianceStamped>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Inertia>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::InertiaStamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::InertiaStamped>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::Point* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Point>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Point32>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::PointStamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::PointStamped>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Polygon>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::PolygonStamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::PolygonStamped>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Pose>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::Pose2D* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Pose2D>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::PoseArray* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::PoseArray>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::PoseStamped>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovarianceStamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovarianceStamped>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::QuaternionStamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::QuaternionStamped>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Transform>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::TransformStamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::TransformStamped>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Twist>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::TwistStamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::TwistStamped>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovarianceStamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovarianceStamped>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3Stamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3Stamped>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::VelocityStamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::VelocityStamped>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Wrench>(Arena*);
template<> ::openbot_bridge::ros2_msgs::geometry_msgs::WrenchStamped* Arena::CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::WrenchStamped>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openbot_bridge {
namespace ros2_msgs {
namespace geometry_msgs {

// ===================================================================

class Accel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.Accel) */ {
 public:
  inline Accel() : Accel(nullptr) {}
  virtual ~Accel();

  Accel(const Accel& from);
  Accel(Accel&& from) noexcept
    : Accel() {
    *this = ::std::move(from);
  }

  inline Accel& operator=(const Accel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accel& operator=(Accel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Accel& default_instance();

  static inline const Accel* internal_default_instance() {
    return reinterpret_cast<const Accel*>(
               &_Accel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Accel& a, Accel& b) {
    a.Swap(&b);
  }
  inline void Swap(Accel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Accel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Accel* New() const final {
    return CreateMaybeMessage<Accel>(nullptr);
  }

  Accel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Accel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Accel& from);
  void MergeFrom(const Accel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.Accel";
  }
  protected:
  explicit Accel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearFieldNumber = 1,
    kAngularFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 linear = 1;
  bool has_linear() const;
  private:
  bool _internal_has_linear() const;
  public:
  void clear_linear();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& linear() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* release_linear();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* mutable_linear();
  void set_allocated_linear(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& _internal_linear() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* _internal_mutable_linear();
  public:
  void unsafe_arena_set_allocated_linear(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* unsafe_arena_release_linear();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 angular = 2;
  bool has_angular() const;
  private:
  bool _internal_has_angular() const;
  public:
  void clear_angular();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& angular() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* release_angular();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* mutable_angular();
  void set_allocated_angular(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& _internal_angular() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* _internal_mutable_angular();
  public:
  void unsafe_arena_set_allocated_angular(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* unsafe_arena_release_angular();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.Accel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AccelStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped) */ {
 public:
  inline AccelStamped() : AccelStamped(nullptr) {}
  virtual ~AccelStamped();

  AccelStamped(const AccelStamped& from);
  AccelStamped(AccelStamped&& from) noexcept
    : AccelStamped() {
    *this = ::std::move(from);
  }

  inline AccelStamped& operator=(const AccelStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccelStamped& operator=(AccelStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccelStamped& default_instance();

  static inline const AccelStamped* internal_default_instance() {
    return reinterpret_cast<const AccelStamped*>(
               &_AccelStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccelStamped& a, AccelStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(AccelStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccelStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccelStamped* New() const final {
    return CreateMaybeMessage<AccelStamped>(nullptr);
  }

  AccelStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccelStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccelStamped& from);
  void MergeFrom(const AccelStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccelStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped";
  }
  protected:
  explicit AccelStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAccelFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Accel accel = 2;
  bool has_accel() const;
  private:
  bool _internal_has_accel() const;
  public:
  void clear_accel();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel& accel() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* release_accel();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* mutable_accel();
  void set_allocated_accel(::openbot_bridge::ros2_msgs::geometry_msgs::Accel* accel);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel& _internal_accel() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* _internal_mutable_accel();
  public:
  void unsafe_arena_set_allocated_accel(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* accel);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* unsafe_arena_release_accel();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* accel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AccelWithCovariance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance) */ {
 public:
  inline AccelWithCovariance() : AccelWithCovariance(nullptr) {}
  virtual ~AccelWithCovariance();

  AccelWithCovariance(const AccelWithCovariance& from);
  AccelWithCovariance(AccelWithCovariance&& from) noexcept
    : AccelWithCovariance() {
    *this = ::std::move(from);
  }

  inline AccelWithCovariance& operator=(const AccelWithCovariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccelWithCovariance& operator=(AccelWithCovariance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccelWithCovariance& default_instance();

  static inline const AccelWithCovariance* internal_default_instance() {
    return reinterpret_cast<const AccelWithCovariance*>(
               &_AccelWithCovariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AccelWithCovariance& a, AccelWithCovariance& b) {
    a.Swap(&b);
  }
  inline void Swap(AccelWithCovariance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccelWithCovariance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccelWithCovariance* New() const final {
    return CreateMaybeMessage<AccelWithCovariance>(nullptr);
  }

  AccelWithCovariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccelWithCovariance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccelWithCovariance& from);
  void MergeFrom(const AccelWithCovariance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccelWithCovariance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance";
  }
  protected:
  explicit AccelWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 2,
    kAccelFieldNumber = 1,
  };
  // repeated float covariance = 2 [packed = true];
  int covariance_size() const;
  private:
  int _internal_covariance_size() const;
  public:
  void clear_covariance();
  private:
  float _internal_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_covariance() const;
  void _internal_add_covariance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_covariance();
  public:
  float covariance(int index) const;
  void set_covariance(int index, float value);
  void add_covariance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_covariance();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Accel accel = 1;
  bool has_accel() const;
  private:
  bool _internal_has_accel() const;
  public:
  void clear_accel();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel& accel() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* release_accel();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* mutable_accel();
  void set_allocated_accel(::openbot_bridge::ros2_msgs::geometry_msgs::Accel* accel);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel& _internal_accel() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* _internal_mutable_accel();
  public:
  void unsafe_arena_set_allocated_accel(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* accel);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* unsafe_arena_release_accel();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > covariance_;
  mutable std::atomic<int> _covariance_cached_byte_size_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* accel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AccelWithCovarianceStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped) */ {
 public:
  inline AccelWithCovarianceStamped() : AccelWithCovarianceStamped(nullptr) {}
  virtual ~AccelWithCovarianceStamped();

  AccelWithCovarianceStamped(const AccelWithCovarianceStamped& from);
  AccelWithCovarianceStamped(AccelWithCovarianceStamped&& from) noexcept
    : AccelWithCovarianceStamped() {
    *this = ::std::move(from);
  }

  inline AccelWithCovarianceStamped& operator=(const AccelWithCovarianceStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccelWithCovarianceStamped& operator=(AccelWithCovarianceStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccelWithCovarianceStamped& default_instance();

  static inline const AccelWithCovarianceStamped* internal_default_instance() {
    return reinterpret_cast<const AccelWithCovarianceStamped*>(
               &_AccelWithCovarianceStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AccelWithCovarianceStamped& a, AccelWithCovarianceStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(AccelWithCovarianceStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccelWithCovarianceStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccelWithCovarianceStamped* New() const final {
    return CreateMaybeMessage<AccelWithCovarianceStamped>(nullptr);
  }

  AccelWithCovarianceStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccelWithCovarianceStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccelWithCovarianceStamped& from);
  void MergeFrom(const AccelWithCovarianceStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccelWithCovarianceStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped";
  }
  protected:
  explicit AccelWithCovarianceStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAccelFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance accel = 2;
  bool has_accel() const;
  private:
  bool _internal_has_accel() const;
  public:
  void clear_accel();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance& accel() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* release_accel();
  ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* mutable_accel();
  void set_allocated_accel(::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* accel);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance& _internal_accel() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* _internal_mutable_accel();
  public:
  void unsafe_arena_set_allocated_accel(
      ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* accel);
  ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* unsafe_arena_release_accel();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* accel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Inertia PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.Inertia) */ {
 public:
  inline Inertia() : Inertia(nullptr) {}
  virtual ~Inertia();

  Inertia(const Inertia& from);
  Inertia(Inertia&& from) noexcept
    : Inertia() {
    *this = ::std::move(from);
  }

  inline Inertia& operator=(const Inertia& from) {
    CopyFrom(from);
    return *this;
  }
  inline Inertia& operator=(Inertia&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Inertia& default_instance();

  static inline const Inertia* internal_default_instance() {
    return reinterpret_cast<const Inertia*>(
               &_Inertia_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Inertia& a, Inertia& b) {
    a.Swap(&b);
  }
  inline void Swap(Inertia* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Inertia* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Inertia* New() const final {
    return CreateMaybeMessage<Inertia>(nullptr);
  }

  Inertia* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Inertia>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Inertia& from);
  void MergeFrom(const Inertia& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inertia* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.Inertia";
  }
  protected:
  explicit Inertia(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComFieldNumber = 2,
    kMFieldNumber = 1,
    kIxxFieldNumber = 3,
    kIxyFieldNumber = 4,
    kIxzFieldNumber = 5,
    kIyyFieldNumber = 6,
    kIyzFieldNumber = 7,
    kIzzFieldNumber = 8,
  };
  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 com = 2;
  bool has_com() const;
  private:
  bool _internal_has_com() const;
  public:
  void clear_com();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& com() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* release_com();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* mutable_com();
  void set_allocated_com(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* com);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& _internal_com() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* _internal_mutable_com();
  public:
  void unsafe_arena_set_allocated_com(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* com);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* unsafe_arena_release_com();

  // float m = 1;
  void clear_m();
  float m() const;
  void set_m(float value);
  private:
  float _internal_m() const;
  void _internal_set_m(float value);
  public:

  // float ixx = 3;
  void clear_ixx();
  float ixx() const;
  void set_ixx(float value);
  private:
  float _internal_ixx() const;
  void _internal_set_ixx(float value);
  public:

  // float ixy = 4;
  void clear_ixy();
  float ixy() const;
  void set_ixy(float value);
  private:
  float _internal_ixy() const;
  void _internal_set_ixy(float value);
  public:

  // float ixz = 5;
  void clear_ixz();
  float ixz() const;
  void set_ixz(float value);
  private:
  float _internal_ixz() const;
  void _internal_set_ixz(float value);
  public:

  // float iyy = 6;
  void clear_iyy();
  float iyy() const;
  void set_iyy(float value);
  private:
  float _internal_iyy() const;
  void _internal_set_iyy(float value);
  public:

  // float iyz = 7;
  void clear_iyz();
  float iyz() const;
  void set_iyz(float value);
  private:
  float _internal_iyz() const;
  void _internal_set_iyz(float value);
  public:

  // float izz = 8;
  void clear_izz();
  float izz() const;
  void set_izz(float value);
  private:
  float _internal_izz() const;
  void _internal_set_izz(float value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.Inertia)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* com_;
  float m_;
  float ixx_;
  float ixy_;
  float ixz_;
  float iyy_;
  float iyz_;
  float izz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class InertiaStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped) */ {
 public:
  inline InertiaStamped() : InertiaStamped(nullptr) {}
  virtual ~InertiaStamped();

  InertiaStamped(const InertiaStamped& from);
  InertiaStamped(InertiaStamped&& from) noexcept
    : InertiaStamped() {
    *this = ::std::move(from);
  }

  inline InertiaStamped& operator=(const InertiaStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline InertiaStamped& operator=(InertiaStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InertiaStamped& default_instance();

  static inline const InertiaStamped* internal_default_instance() {
    return reinterpret_cast<const InertiaStamped*>(
               &_InertiaStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InertiaStamped& a, InertiaStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(InertiaStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InertiaStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InertiaStamped* New() const final {
    return CreateMaybeMessage<InertiaStamped>(nullptr);
  }

  InertiaStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InertiaStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InertiaStamped& from);
  void MergeFrom(const InertiaStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InertiaStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped";
  }
  protected:
  explicit InertiaStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kInertiaFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Inertia inertia = 2;
  bool has_inertia() const;
  private:
  bool _internal_has_inertia() const;
  public:
  void clear_inertia();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia& inertia() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* release_inertia();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* mutable_inertia();
  void set_allocated_inertia(::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* inertia);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia& _internal_inertia() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* _internal_mutable_inertia();
  public:
  void unsafe_arena_set_allocated_inertia(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* inertia);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* unsafe_arena_release_inertia();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* inertia_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PointStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped) */ {
 public:
  inline PointStamped() : PointStamped(nullptr) {}
  virtual ~PointStamped();

  PointStamped(const PointStamped& from);
  PointStamped(PointStamped&& from) noexcept
    : PointStamped() {
    *this = ::std::move(from);
  }

  inline PointStamped& operator=(const PointStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointStamped& operator=(PointStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointStamped& default_instance();

  static inline const PointStamped* internal_default_instance() {
    return reinterpret_cast<const PointStamped*>(
               &_PointStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PointStamped& a, PointStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(PointStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointStamped* New() const final {
    return CreateMaybeMessage<PointStamped>(nullptr);
  }

  PointStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointStamped& from);
  void MergeFrom(const PointStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.PointStamped";
  }
  protected:
  explicit PointStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPointFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Point point = 2;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& point() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* release_point();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* mutable_point();
  void set_allocated_point(::openbot_bridge::ros2_msgs::geometry_msgs::Point* point);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& _internal_point() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Point* point);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* unsafe_arena_release_point();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Point32 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.Point32) */ {
 public:
  inline Point32() : Point32(nullptr) {}
  virtual ~Point32();

  Point32(const Point32& from);
  Point32(Point32&& from) noexcept
    : Point32() {
    *this = ::std::move(from);
  }

  inline Point32& operator=(const Point32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point32& operator=(Point32&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point32& default_instance();

  static inline const Point32* internal_default_instance() {
    return reinterpret_cast<const Point32*>(
               &_Point32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Point32& a, Point32& b) {
    a.Swap(&b);
  }
  inline void Swap(Point32* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point32* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point32* New() const final {
    return CreateMaybeMessage<Point32>(nullptr);
  }

  Point32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point32& from);
  void MergeFrom(const Point32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.Point32";
  }
  protected:
  explicit Point32(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.Point32)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Polygon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {}
  virtual ~Polygon();

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance();

  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point32 points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point32 >*
      mutable_points();
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point32& _internal_points(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* _internal_add_points();
  public:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point32& points(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point32 >&
      points() const;

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point32 > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PolygonStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped) */ {
 public:
  inline PolygonStamped() : PolygonStamped(nullptr) {}
  virtual ~PolygonStamped();

  PolygonStamped(const PolygonStamped& from);
  PolygonStamped(PolygonStamped&& from) noexcept
    : PolygonStamped() {
    *this = ::std::move(from);
  }

  inline PolygonStamped& operator=(const PolygonStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolygonStamped& operator=(PolygonStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolygonStamped& default_instance();

  static inline const PolygonStamped* internal_default_instance() {
    return reinterpret_cast<const PolygonStamped*>(
               &_PolygonStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PolygonStamped& a, PolygonStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(PolygonStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolygonStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolygonStamped* New() const final {
    return CreateMaybeMessage<PolygonStamped>(nullptr);
  }

  PolygonStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolygonStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolygonStamped& from);
  void MergeFrom(const PolygonStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolygonStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped";
  }
  protected:
  explicit PolygonStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPolygonFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Polygon polygon = 2;
  bool has_polygon() const;
  private:
  bool _internal_has_polygon() const;
  public:
  void clear_polygon();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon& polygon() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* release_polygon();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* mutable_polygon();
  void set_allocated_polygon(::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* polygon);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon& _internal_polygon() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* _internal_mutable_polygon();
  public:
  void unsafe_arena_set_allocated_polygon(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* polygon);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* unsafe_arena_release_polygon();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* polygon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Pose2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D) */ {
 public:
  inline Pose2D() : Pose2D(nullptr) {}
  virtual ~Pose2D();

  Pose2D(const Pose2D& from);
  Pose2D(Pose2D&& from) noexcept
    : Pose2D() {
    *this = ::std::move(from);
  }

  inline Pose2D& operator=(const Pose2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose2D& operator=(Pose2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose2D& default_instance();

  static inline const Pose2D* internal_default_instance() {
    return reinterpret_cast<const Pose2D*>(
               &_Pose2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Pose2D& a, Pose2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose2D* New() const final {
    return CreateMaybeMessage<Pose2D>(nullptr);
  }

  Pose2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose2D& from);
  void MergeFrom(const Pose2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.Pose2D";
  }
  protected:
  explicit Pose2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kThetaFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double theta = 3;
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double theta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {}
  virtual ~Pose();

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance();

  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.geometry_msgs.Point position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& position() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* release_position();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* mutable_position();
  void set_allocated_position(::openbot_bridge::ros2_msgs::geometry_msgs::Point* position);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& _internal_position() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Point* position);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* unsafe_arena_release_position();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& orientation() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* release_orientation();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& _internal_orientation() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* position_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PoseArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray) */ {
 public:
  inline PoseArray() : PoseArray(nullptr) {}
  virtual ~PoseArray();

  PoseArray(const PoseArray& from);
  PoseArray(PoseArray&& from) noexcept
    : PoseArray() {
    *this = ::std::move(from);
  }

  inline PoseArray& operator=(const PoseArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseArray& operator=(PoseArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseArray& default_instance();

  static inline const PoseArray* internal_default_instance() {
    return reinterpret_cast<const PoseArray*>(
               &_PoseArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PoseArray& a, PoseArray& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseArray* New() const final {
    return CreateMaybeMessage<PoseArray>(nullptr);
  }

  PoseArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseArray& from);
  void MergeFrom(const PoseArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.PoseArray";
  }
  protected:
  explicit PoseArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .openbot_bridge.ros2_msgs.geometry_msgs.Pose poses = 2;
  int poses_size() const;
  private:
  int _internal_poses_size() const;
  public:
  void clear_poses();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* mutable_poses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Pose >*
      mutable_poses();
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& _internal_poses(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* _internal_add_poses();
  public:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& poses(int index) const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* add_poses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Pose >&
      poses() const;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Pose > poses_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PoseStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped) */ {
 public:
  inline PoseStamped() : PoseStamped(nullptr) {}
  virtual ~PoseStamped();

  PoseStamped(const PoseStamped& from);
  PoseStamped(PoseStamped&& from) noexcept
    : PoseStamped() {
    *this = ::std::move(from);
  }

  inline PoseStamped& operator=(const PoseStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseStamped& operator=(PoseStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseStamped& default_instance();

  static inline const PoseStamped* internal_default_instance() {
    return reinterpret_cast<const PoseStamped*>(
               &_PoseStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PoseStamped& a, PoseStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseStamped* New() const final {
    return CreateMaybeMessage<PoseStamped>(nullptr);
  }

  PoseStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseStamped& from);
  void MergeFrom(const PoseStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped";
  }
  protected:
  explicit PoseStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* release_pose();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* mutable_pose();
  void set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& _internal_pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PoseWithCovariance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance) */ {
 public:
  inline PoseWithCovariance() : PoseWithCovariance(nullptr) {}
  virtual ~PoseWithCovariance();

  PoseWithCovariance(const PoseWithCovariance& from);
  PoseWithCovariance(PoseWithCovariance&& from) noexcept
    : PoseWithCovariance() {
    *this = ::std::move(from);
  }

  inline PoseWithCovariance& operator=(const PoseWithCovariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseWithCovariance& operator=(PoseWithCovariance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseWithCovariance& default_instance();

  static inline const PoseWithCovariance* internal_default_instance() {
    return reinterpret_cast<const PoseWithCovariance*>(
               &_PoseWithCovariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PoseWithCovariance& a, PoseWithCovariance& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseWithCovariance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseWithCovariance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseWithCovariance* New() const final {
    return CreateMaybeMessage<PoseWithCovariance>(nullptr);
  }

  PoseWithCovariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseWithCovariance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseWithCovariance& from);
  void MergeFrom(const PoseWithCovariance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseWithCovariance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance";
  }
  protected:
  explicit PoseWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 2,
    kPoseFieldNumber = 1,
  };
  // repeated double covariance = 2 [packed = true];
  int covariance_size() const;
  private:
  int _internal_covariance_size() const;
  public:
  void clear_covariance();
  private:
  double _internal_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_covariance() const;
  void _internal_add_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_covariance();
  public:
  double covariance(int index) const;
  void set_covariance(int index, double value);
  void add_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_covariance();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* release_pose();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* mutable_pose();
  void set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& _internal_pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > covariance_;
  mutable std::atomic<int> _covariance_cached_byte_size_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PoseWithCovarianceStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped) */ {
 public:
  inline PoseWithCovarianceStamped() : PoseWithCovarianceStamped(nullptr) {}
  virtual ~PoseWithCovarianceStamped();

  PoseWithCovarianceStamped(const PoseWithCovarianceStamped& from);
  PoseWithCovarianceStamped(PoseWithCovarianceStamped&& from) noexcept
    : PoseWithCovarianceStamped() {
    *this = ::std::move(from);
  }

  inline PoseWithCovarianceStamped& operator=(const PoseWithCovarianceStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseWithCovarianceStamped& operator=(PoseWithCovarianceStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseWithCovarianceStamped& default_instance();

  static inline const PoseWithCovarianceStamped* internal_default_instance() {
    return reinterpret_cast<const PoseWithCovarianceStamped*>(
               &_PoseWithCovarianceStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PoseWithCovarianceStamped& a, PoseWithCovarianceStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseWithCovarianceStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseWithCovarianceStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseWithCovarianceStamped* New() const final {
    return CreateMaybeMessage<PoseWithCovarianceStamped>(nullptr);
  }

  PoseWithCovarianceStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseWithCovarianceStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseWithCovarianceStamped& from);
  void MergeFrom(const PoseWithCovarianceStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseWithCovarianceStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped";
  }
  protected:
  explicit PoseWithCovarianceStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* release_pose();
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* mutable_pose();
  void set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& _internal_pose() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose);
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Quaternion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double w = 4;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class QuaternionStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped) */ {
 public:
  inline QuaternionStamped() : QuaternionStamped(nullptr) {}
  virtual ~QuaternionStamped();

  QuaternionStamped(const QuaternionStamped& from);
  QuaternionStamped(QuaternionStamped&& from) noexcept
    : QuaternionStamped() {
    *this = ::std::move(from);
  }

  inline QuaternionStamped& operator=(const QuaternionStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuaternionStamped& operator=(QuaternionStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuaternionStamped& default_instance();

  static inline const QuaternionStamped* internal_default_instance() {
    return reinterpret_cast<const QuaternionStamped*>(
               &_QuaternionStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(QuaternionStamped& a, QuaternionStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(QuaternionStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuaternionStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuaternionStamped* New() const final {
    return CreateMaybeMessage<QuaternionStamped>(nullptr);
  }

  QuaternionStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuaternionStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuaternionStamped& from);
  void MergeFrom(const QuaternionStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuaternionStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped";
  }
  protected:
  explicit QuaternionStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kQuaternionFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion quaternion = 2;
  bool has_quaternion() const;
  private:
  bool _internal_has_quaternion() const;
  public:
  void clear_quaternion();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& quaternion() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* release_quaternion();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* mutable_quaternion();
  void set_allocated_quaternion(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* quaternion);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& _internal_quaternion() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* _internal_mutable_quaternion();
  public:
  void unsafe_arena_set_allocated_quaternion(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* quaternion);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* unsafe_arena_release_quaternion();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* quaternion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Transform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  virtual ~Transform();

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform& default_instance();

  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return CreateMaybeMessage<Transform>(nullptr);
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& translation() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* release_translation();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* mutable_translation();
  void set_allocated_translation(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* translation);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& _internal_translation() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* translation);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* unsafe_arena_release_translation();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& rotation() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* release_rotation();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* mutable_rotation();
  void set_allocated_rotation(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* rotation);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& _internal_rotation() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* rotation);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* translation_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TransformStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped) */ {
 public:
  inline TransformStamped() : TransformStamped(nullptr) {}
  virtual ~TransformStamped();

  TransformStamped(const TransformStamped& from);
  TransformStamped(TransformStamped&& from) noexcept
    : TransformStamped() {
    *this = ::std::move(from);
  }

  inline TransformStamped& operator=(const TransformStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformStamped& operator=(TransformStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransformStamped& default_instance();

  static inline const TransformStamped* internal_default_instance() {
    return reinterpret_cast<const TransformStamped*>(
               &_TransformStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TransformStamped& a, TransformStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransformStamped* New() const final {
    return CreateMaybeMessage<TransformStamped>(nullptr);
  }

  TransformStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransformStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransformStamped& from);
  void MergeFrom(const TransformStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped";
  }
  protected:
  explicit TransformStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFrameIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kTransformFieldNumber = 3,
  };
  // string child_frame_id = 2;
  void clear_child_frame_id();
  const std::string& child_frame_id() const;
  void set_child_frame_id(const std::string& value);
  void set_child_frame_id(std::string&& value);
  void set_child_frame_id(const char* value);
  void set_child_frame_id(const char* value, size_t size);
  std::string* mutable_child_frame_id();
  std::string* release_child_frame_id();
  void set_allocated_child_frame_id(std::string* child_frame_id);
  private:
  const std::string& _internal_child_frame_id() const;
  void _internal_set_child_frame_id(const std::string& value);
  std::string* _internal_mutable_child_frame_id();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Transform transform = 3;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Transform& transform() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* release_transform();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* mutable_transform();
  void set_allocated_transform(::openbot_bridge::ros2_msgs::geometry_msgs::Transform* transform);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Transform& _internal_transform() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* transform);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* unsafe_arena_release_transform();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_frame_id_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* transform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Twist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.Twist) */ {
 public:
  inline Twist() : Twist(nullptr) {}
  virtual ~Twist();

  Twist(const Twist& from);
  Twist(Twist&& from) noexcept
    : Twist() {
    *this = ::std::move(from);
  }

  inline Twist& operator=(const Twist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Twist& operator=(Twist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Twist& default_instance();

  static inline const Twist* internal_default_instance() {
    return reinterpret_cast<const Twist*>(
               &_Twist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Twist& a, Twist& b) {
    a.Swap(&b);
  }
  inline void Swap(Twist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Twist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Twist* New() const final {
    return CreateMaybeMessage<Twist>(nullptr);
  }

  Twist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Twist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Twist& from);
  void MergeFrom(const Twist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Twist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.Twist";
  }
  protected:
  explicit Twist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearFieldNumber = 1,
    kAngularFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 linear = 1;
  bool has_linear() const;
  private:
  bool _internal_has_linear() const;
  public:
  void clear_linear();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& linear() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* release_linear();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* mutable_linear();
  void set_allocated_linear(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& _internal_linear() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* _internal_mutable_linear();
  public:
  void unsafe_arena_set_allocated_linear(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* unsafe_arena_release_linear();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 angular = 2;
  bool has_angular() const;
  private:
  bool _internal_has_angular() const;
  public:
  void clear_angular();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& angular() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* release_angular();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* mutable_angular();
  void set_allocated_angular(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& _internal_angular() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* _internal_mutable_angular();
  public:
  void unsafe_arena_set_allocated_angular(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* unsafe_arena_release_angular();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.Twist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TwistStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped) */ {
 public:
  inline TwistStamped() : TwistStamped(nullptr) {}
  virtual ~TwistStamped();

  TwistStamped(const TwistStamped& from);
  TwistStamped(TwistStamped&& from) noexcept
    : TwistStamped() {
    *this = ::std::move(from);
  }

  inline TwistStamped& operator=(const TwistStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwistStamped& operator=(TwistStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwistStamped& default_instance();

  static inline const TwistStamped* internal_default_instance() {
    return reinterpret_cast<const TwistStamped*>(
               &_TwistStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TwistStamped& a, TwistStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(TwistStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwistStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwistStamped* New() const final {
    return CreateMaybeMessage<TwistStamped>(nullptr);
  }

  TwistStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwistStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwistStamped& from);
  void MergeFrom(const TwistStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwistStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped";
  }
  protected:
  explicit TwistStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTwistFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Twist twist = 2;
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& twist() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* release_twist();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* mutable_twist();
  void set_allocated_twist(::openbot_bridge::ros2_msgs::geometry_msgs::Twist* twist);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& _internal_twist() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* _internal_mutable_twist();
  public:
  void unsafe_arena_set_allocated_twist(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* twist);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* unsafe_arena_release_twist();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* twist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TwistWithCovariance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance) */ {
 public:
  inline TwistWithCovariance() : TwistWithCovariance(nullptr) {}
  virtual ~TwistWithCovariance();

  TwistWithCovariance(const TwistWithCovariance& from);
  TwistWithCovariance(TwistWithCovariance&& from) noexcept
    : TwistWithCovariance() {
    *this = ::std::move(from);
  }

  inline TwistWithCovariance& operator=(const TwistWithCovariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwistWithCovariance& operator=(TwistWithCovariance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwistWithCovariance& default_instance();

  static inline const TwistWithCovariance* internal_default_instance() {
    return reinterpret_cast<const TwistWithCovariance*>(
               &_TwistWithCovariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TwistWithCovariance& a, TwistWithCovariance& b) {
    a.Swap(&b);
  }
  inline void Swap(TwistWithCovariance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwistWithCovariance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwistWithCovariance* New() const final {
    return CreateMaybeMessage<TwistWithCovariance>(nullptr);
  }

  TwistWithCovariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwistWithCovariance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwistWithCovariance& from);
  void MergeFrom(const TwistWithCovariance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwistWithCovariance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance";
  }
  protected:
  explicit TwistWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 2,
    kTwistFieldNumber = 1,
  };
  // repeated double covariance = 2 [packed = true];
  int covariance_size() const;
  private:
  int _internal_covariance_size() const;
  public:
  void clear_covariance();
  private:
  double _internal_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_covariance() const;
  void _internal_add_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_covariance();
  public:
  double covariance(int index) const;
  void set_covariance(int index, double value);
  void add_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_covariance();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Twist twist = 1;
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& twist() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* release_twist();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* mutable_twist();
  void set_allocated_twist(::openbot_bridge::ros2_msgs::geometry_msgs::Twist* twist);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& _internal_twist() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* _internal_mutable_twist();
  public:
  void unsafe_arena_set_allocated_twist(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* twist);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* unsafe_arena_release_twist();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > covariance_;
  mutable std::atomic<int> _covariance_cached_byte_size_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* twist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TwistWithCovarianceStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped) */ {
 public:
  inline TwistWithCovarianceStamped() : TwistWithCovarianceStamped(nullptr) {}
  virtual ~TwistWithCovarianceStamped();

  TwistWithCovarianceStamped(const TwistWithCovarianceStamped& from);
  TwistWithCovarianceStamped(TwistWithCovarianceStamped&& from) noexcept
    : TwistWithCovarianceStamped() {
    *this = ::std::move(from);
  }

  inline TwistWithCovarianceStamped& operator=(const TwistWithCovarianceStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwistWithCovarianceStamped& operator=(TwistWithCovarianceStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwistWithCovarianceStamped& default_instance();

  static inline const TwistWithCovarianceStamped* internal_default_instance() {
    return reinterpret_cast<const TwistWithCovarianceStamped*>(
               &_TwistWithCovarianceStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TwistWithCovarianceStamped& a, TwistWithCovarianceStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(TwistWithCovarianceStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwistWithCovarianceStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwistWithCovarianceStamped* New() const final {
    return CreateMaybeMessage<TwistWithCovarianceStamped>(nullptr);
  }

  TwistWithCovarianceStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwistWithCovarianceStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwistWithCovarianceStamped& from);
  void MergeFrom(const TwistWithCovarianceStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwistWithCovarianceStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped";
  }
  protected:
  explicit TwistWithCovarianceStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTwistFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance twist = 2;
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance& twist() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* release_twist();
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* mutable_twist();
  void set_allocated_twist(::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* twist);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance& _internal_twist() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* _internal_mutable_twist();
  public:
  void unsafe_arena_set_allocated_twist(
      ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* twist);
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* unsafe_arena_release_twist();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* twist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Vector3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  virtual ~Vector3();

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3& default_instance();

  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(nullptr);
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Vector3Stamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped) */ {
 public:
  inline Vector3Stamped() : Vector3Stamped(nullptr) {}
  virtual ~Vector3Stamped();

  Vector3Stamped(const Vector3Stamped& from);
  Vector3Stamped(Vector3Stamped&& from) noexcept
    : Vector3Stamped() {
    *this = ::std::move(from);
  }

  inline Vector3Stamped& operator=(const Vector3Stamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3Stamped& operator=(Vector3Stamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3Stamped& default_instance();

  static inline const Vector3Stamped* internal_default_instance() {
    return reinterpret_cast<const Vector3Stamped*>(
               &_Vector3Stamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Vector3Stamped& a, Vector3Stamped& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3Stamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3Stamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3Stamped* New() const final {
    return CreateMaybeMessage<Vector3Stamped>(nullptr);
  }

  Vector3Stamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3Stamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3Stamped& from);
  void MergeFrom(const Vector3Stamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3Stamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped";
  }
  protected:
  explicit Vector3Stamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kVectorFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 vector = 2;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& vector() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* release_vector();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* mutable_vector();
  void set_allocated_vector(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* vector);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& _internal_vector() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* vector);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* unsafe_arena_release_vector();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* vector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Wrench PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.Wrench) */ {
 public:
  inline Wrench() : Wrench(nullptr) {}
  virtual ~Wrench();

  Wrench(const Wrench& from);
  Wrench(Wrench&& from) noexcept
    : Wrench() {
    *this = ::std::move(from);
  }

  inline Wrench& operator=(const Wrench& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wrench& operator=(Wrench&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wrench& default_instance();

  static inline const Wrench* internal_default_instance() {
    return reinterpret_cast<const Wrench*>(
               &_Wrench_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Wrench& a, Wrench& b) {
    a.Swap(&b);
  }
  inline void Swap(Wrench* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wrench* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wrench* New() const final {
    return CreateMaybeMessage<Wrench>(nullptr);
  }

  Wrench* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wrench>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wrench& from);
  void MergeFrom(const Wrench& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wrench* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.Wrench";
  }
  protected:
  explicit Wrench(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForceFieldNumber = 1,
    kTorqueFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 force = 1;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& force() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* release_force();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* mutable_force();
  void set_allocated_force(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* force);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& _internal_force() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* _internal_mutable_force();
  public:
  void unsafe_arena_set_allocated_force(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* force);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* unsafe_arena_release_force();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 torque = 2;
  bool has_torque() const;
  private:
  bool _internal_has_torque() const;
  public:
  void clear_torque();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& torque() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* release_torque();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* mutable_torque();
  void set_allocated_torque(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* torque);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& _internal_torque() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* _internal_mutable_torque();
  public:
  void unsafe_arena_set_allocated_torque(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* torque);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* unsafe_arena_release_torque();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.Wrench)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* force_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* torque_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class WrenchStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped) */ {
 public:
  inline WrenchStamped() : WrenchStamped(nullptr) {}
  virtual ~WrenchStamped();

  WrenchStamped(const WrenchStamped& from);
  WrenchStamped(WrenchStamped&& from) noexcept
    : WrenchStamped() {
    *this = ::std::move(from);
  }

  inline WrenchStamped& operator=(const WrenchStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrenchStamped& operator=(WrenchStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WrenchStamped& default_instance();

  static inline const WrenchStamped* internal_default_instance() {
    return reinterpret_cast<const WrenchStamped*>(
               &_WrenchStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(WrenchStamped& a, WrenchStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(WrenchStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrenchStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrenchStamped* New() const final {
    return CreateMaybeMessage<WrenchStamped>(nullptr);
  }

  WrenchStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrenchStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WrenchStamped& from);
  void MergeFrom(const WrenchStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrenchStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped";
  }
  protected:
  explicit WrenchStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kWrenchFieldNumber = 2,
  };
  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Wrench wrench = 2;
  bool has_wrench() const;
  private:
  bool _internal_has_wrench() const;
  public:
  void clear_wrench();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench& wrench() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* release_wrench();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* mutable_wrench();
  void set_allocated_wrench(::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* wrench);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench& _internal_wrench() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* _internal_mutable_wrench();
  public:
  void unsafe_arena_set_allocated_wrench(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* wrench);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* unsafe_arena_release_wrench();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* wrench_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class VelocityStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped) */ {
 public:
  inline VelocityStamped() : VelocityStamped(nullptr) {}
  virtual ~VelocityStamped();

  VelocityStamped(const VelocityStamped& from);
  VelocityStamped(VelocityStamped&& from) noexcept
    : VelocityStamped() {
    *this = ::std::move(from);
  }

  inline VelocityStamped& operator=(const VelocityStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityStamped& operator=(VelocityStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VelocityStamped& default_instance();

  static inline const VelocityStamped* internal_default_instance() {
    return reinterpret_cast<const VelocityStamped*>(
               &_VelocityStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(VelocityStamped& a, VelocityStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelocityStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VelocityStamped* New() const final {
    return CreateMaybeMessage<VelocityStamped>(nullptr);
  }

  VelocityStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VelocityStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VelocityStamped& from);
  void MergeFrom(const VelocityStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelocityStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped";
  }
  protected:
  explicit VelocityStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFrameIdFieldNumber = 2,
    kReferenceFrameIdFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kVelocityFieldNumber = 4,
  };
  // string body_frame_id = 2;
  void clear_body_frame_id();
  const std::string& body_frame_id() const;
  void set_body_frame_id(const std::string& value);
  void set_body_frame_id(std::string&& value);
  void set_body_frame_id(const char* value);
  void set_body_frame_id(const char* value, size_t size);
  std::string* mutable_body_frame_id();
  std::string* release_body_frame_id();
  void set_allocated_body_frame_id(std::string* body_frame_id);
  private:
  const std::string& _internal_body_frame_id() const;
  void _internal_set_body_frame_id(const std::string& value);
  std::string* _internal_mutable_body_frame_id();
  public:

  // string reference_frame_id = 3;
  void clear_reference_frame_id();
  const std::string& reference_frame_id() const;
  void set_reference_frame_id(const std::string& value);
  void set_reference_frame_id(std::string&& value);
  void set_reference_frame_id(const char* value);
  void set_reference_frame_id(const char* value, size_t size);
  std::string* mutable_reference_frame_id();
  std::string* release_reference_frame_id();
  void set_allocated_reference_frame_id(std::string* reference_frame_id);
  private:
  const std::string& _internal_reference_frame_id() const;
  void _internal_set_reference_frame_id(const std::string& value);
  std::string* _internal_mutable_reference_frame_id();
  public:

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* release_header();
  ::openbot_bridge::ros2_msgs::std_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  private:
  const ::openbot_bridge::ros2_msgs::std_msgs::Header& _internal_header() const;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::ros2_msgs::std_msgs::Header* header);
  ::openbot_bridge::ros2_msgs::std_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.ros2_msgs.geometry_msgs.Twist velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& velocity() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* release_velocity();
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* mutable_velocity();
  void set_allocated_velocity(::openbot_bridge::ros2_msgs::geometry_msgs::Twist* velocity);
  private:
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& _internal_velocity() const;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* velocity);
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* unsafe_arena_release_velocity();

  // @@protoc_insertion_point(class_scope:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_frame_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_frame_id_;
  ::openbot_bridge::ros2_msgs::std_msgs::Header* header_;
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* velocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Accel

// .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 linear = 1;
inline bool Accel::_internal_has_linear() const {
  return this != internal_default_instance() && linear_ != nullptr;
}
inline bool Accel::has_linear() const {
  return _internal_has_linear();
}
inline void Accel::clear_linear() {
  if (GetArena() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Accel::_internal_linear() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* p = linear_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Accel::linear() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Accel.linear)
  return _internal_linear();
}
inline void Accel::unsafe_arena_set_allocated_linear(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_);
  }
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Accel.linear)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Accel::release_linear() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = linear_;
  linear_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Accel::unsafe_arena_release_linear() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.Accel.linear)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = linear_;
  linear_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Accel::_internal_mutable_linear() {
  
  if (linear_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(GetArena());
    linear_ = p;
  }
  return linear_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Accel::mutable_linear() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Accel.linear)
  return _internal_mutable_linear();
}
inline void Accel::set_allocated_linear(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete linear_;
  }
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linear);
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    
  } else {
    
  }
  linear_ = linear;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Accel.linear)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 angular = 2;
inline bool Accel::_internal_has_angular() const {
  return this != internal_default_instance() && angular_ != nullptr;
}
inline bool Accel::has_angular() const {
  return _internal_has_angular();
}
inline void Accel::clear_angular() {
  if (GetArena() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Accel::_internal_angular() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* p = angular_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Accel::angular() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Accel.angular)
  return _internal_angular();
}
inline void Accel::unsafe_arena_set_allocated_angular(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_);
  }
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Accel.angular)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Accel::release_angular() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = angular_;
  angular_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Accel::unsafe_arena_release_angular() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.Accel.angular)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = angular_;
  angular_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Accel::_internal_mutable_angular() {
  
  if (angular_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(GetArena());
    angular_ = p;
  }
  return angular_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Accel::mutable_angular() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Accel.angular)
  return _internal_mutable_angular();
}
inline void Accel::set_allocated_angular(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete angular_;
  }
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(angular);
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    
  } else {
    
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Accel.angular)
}

// -------------------------------------------------------------------

// AccelStamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool AccelStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AccelStamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& AccelStamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& AccelStamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped.header)
  return _internal_header();
}
inline void AccelStamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* AccelStamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* AccelStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* AccelStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* AccelStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped.header)
  return _internal_mutable_header();
}
inline void AccelStamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Accel accel = 2;
inline bool AccelStamped::_internal_has_accel() const {
  return this != internal_default_instance() && accel_ != nullptr;
}
inline bool AccelStamped::has_accel() const {
  return _internal_has_accel();
}
inline void AccelStamped::clear_accel() {
  if (GetArena() == nullptr && accel_ != nullptr) {
    delete accel_;
  }
  accel_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel& AccelStamped::_internal_accel() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* p = accel_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Accel_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel& AccelStamped::accel() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped.accel)
  return _internal_accel();
}
inline void AccelStamped::unsafe_arena_set_allocated_accel(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* accel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel_);
  }
  accel_ = accel;
  if (accel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped.accel)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* AccelStamped::release_accel() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* temp = accel_;
  accel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* AccelStamped::unsafe_arena_release_accel() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped.accel)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* temp = accel_;
  accel_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* AccelStamped::_internal_mutable_accel() {
  
  if (accel_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Accel>(GetArena());
    accel_ = p;
  }
  return accel_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* AccelStamped::mutable_accel() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped.accel)
  return _internal_mutable_accel();
}
inline void AccelStamped::set_allocated_accel(::openbot_bridge::ros2_msgs::geometry_msgs::Accel* accel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete accel_;
  }
  if (accel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accel);
    if (message_arena != submessage_arena) {
      accel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel, submessage_arena);
    }
    
  } else {
    
  }
  accel_ = accel;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.AccelStamped.accel)
}

// -------------------------------------------------------------------

// AccelWithCovariance

// .openbot_bridge.ros2_msgs.geometry_msgs.Accel accel = 1;
inline bool AccelWithCovariance::_internal_has_accel() const {
  return this != internal_default_instance() && accel_ != nullptr;
}
inline bool AccelWithCovariance::has_accel() const {
  return _internal_has_accel();
}
inline void AccelWithCovariance::clear_accel() {
  if (GetArena() == nullptr && accel_ != nullptr) {
    delete accel_;
  }
  accel_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel& AccelWithCovariance::_internal_accel() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* p = accel_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Accel_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Accel& AccelWithCovariance::accel() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance.accel)
  return _internal_accel();
}
inline void AccelWithCovariance::unsafe_arena_set_allocated_accel(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* accel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel_);
  }
  accel_ = accel;
  if (accel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance.accel)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* AccelWithCovariance::release_accel() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* temp = accel_;
  accel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* AccelWithCovariance::unsafe_arena_release_accel() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance.accel)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* temp = accel_;
  accel_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* AccelWithCovariance::_internal_mutable_accel() {
  
  if (accel_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Accel>(GetArena());
    accel_ = p;
  }
  return accel_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Accel* AccelWithCovariance::mutable_accel() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance.accel)
  return _internal_mutable_accel();
}
inline void AccelWithCovariance::set_allocated_accel(::openbot_bridge::ros2_msgs::geometry_msgs::Accel* accel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete accel_;
  }
  if (accel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accel);
    if (message_arena != submessage_arena) {
      accel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel, submessage_arena);
    }
    
  } else {
    
  }
  accel_ = accel;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance.accel)
}

// repeated float covariance = 2 [packed = true];
inline int AccelWithCovariance::_internal_covariance_size() const {
  return covariance_.size();
}
inline int AccelWithCovariance::covariance_size() const {
  return _internal_covariance_size();
}
inline void AccelWithCovariance::clear_covariance() {
  covariance_.Clear();
}
inline float AccelWithCovariance::_internal_covariance(int index) const {
  return covariance_.Get(index);
}
inline float AccelWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance.covariance)
  return _internal_covariance(index);
}
inline void AccelWithCovariance::set_covariance(int index, float value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance.covariance)
}
inline void AccelWithCovariance::_internal_add_covariance(float value) {
  covariance_.Add(value);
}
inline void AccelWithCovariance::add_covariance(float value) {
  _internal_add_covariance(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance.covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AccelWithCovariance::_internal_covariance() const {
  return covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AccelWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance.covariance)
  return _internal_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AccelWithCovariance::_internal_mutable_covariance() {
  return &covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AccelWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance.covariance)
  return _internal_mutable_covariance();
}

// -------------------------------------------------------------------

// AccelWithCovarianceStamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool AccelWithCovarianceStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AccelWithCovarianceStamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& AccelWithCovarianceStamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& AccelWithCovarianceStamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped.header)
  return _internal_header();
}
inline void AccelWithCovarianceStamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* AccelWithCovarianceStamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* AccelWithCovarianceStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* AccelWithCovarianceStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* AccelWithCovarianceStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped.header)
  return _internal_mutable_header();
}
inline void AccelWithCovarianceStamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovariance accel = 2;
inline bool AccelWithCovarianceStamped::_internal_has_accel() const {
  return this != internal_default_instance() && accel_ != nullptr;
}
inline bool AccelWithCovarianceStamped::has_accel() const {
  return _internal_has_accel();
}
inline void AccelWithCovarianceStamped::clear_accel() {
  if (GetArena() == nullptr && accel_ != nullptr) {
    delete accel_;
  }
  accel_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance& AccelWithCovarianceStamped::_internal_accel() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* p = accel_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_AccelWithCovariance_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance& AccelWithCovarianceStamped::accel() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped.accel)
  return _internal_accel();
}
inline void AccelWithCovarianceStamped::unsafe_arena_set_allocated_accel(
    ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* accel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel_);
  }
  accel_ = accel;
  if (accel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped.accel)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* AccelWithCovarianceStamped::release_accel() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* temp = accel_;
  accel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* AccelWithCovarianceStamped::unsafe_arena_release_accel() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped.accel)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* temp = accel_;
  accel_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* AccelWithCovarianceStamped::_internal_mutable_accel() {
  
  if (accel_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance>(GetArena());
    accel_ = p;
  }
  return accel_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* AccelWithCovarianceStamped::mutable_accel() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped.accel)
  return _internal_mutable_accel();
}
inline void AccelWithCovarianceStamped::set_allocated_accel(::openbot_bridge::ros2_msgs::geometry_msgs::AccelWithCovariance* accel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete accel_;
  }
  if (accel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accel);
    if (message_arena != submessage_arena) {
      accel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel, submessage_arena);
    }
    
  } else {
    
  }
  accel_ = accel;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.AccelWithCovarianceStamped.accel)
}

// -------------------------------------------------------------------

// Inertia

// float m = 1;
inline void Inertia::clear_m() {
  m_ = 0;
}
inline float Inertia::_internal_m() const {
  return m_;
}
inline float Inertia::m() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.m)
  return _internal_m();
}
inline void Inertia::_internal_set_m(float value) {
  
  m_ = value;
}
inline void Inertia::set_m(float value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.m)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 com = 2;
inline bool Inertia::_internal_has_com() const {
  return this != internal_default_instance() && com_ != nullptr;
}
inline bool Inertia::has_com() const {
  return _internal_has_com();
}
inline void Inertia::clear_com() {
  if (GetArena() == nullptr && com_ != nullptr) {
    delete com_;
  }
  com_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Inertia::_internal_com() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* p = com_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Inertia::com() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.com)
  return _internal_com();
}
inline void Inertia::unsafe_arena_set_allocated_com(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* com) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(com_);
  }
  com_ = com;
  if (com) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.com)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Inertia::release_com() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = com_;
  com_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Inertia::unsafe_arena_release_com() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.com)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = com_;
  com_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Inertia::_internal_mutable_com() {
  
  if (com_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(GetArena());
    com_ = p;
  }
  return com_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Inertia::mutable_com() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.com)
  return _internal_mutable_com();
}
inline void Inertia::set_allocated_com(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* com) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete com_;
  }
  if (com) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(com);
    if (message_arena != submessage_arena) {
      com = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, com, submessage_arena);
    }
    
  } else {
    
  }
  com_ = com;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.com)
}

// float ixx = 3;
inline void Inertia::clear_ixx() {
  ixx_ = 0;
}
inline float Inertia::_internal_ixx() const {
  return ixx_;
}
inline float Inertia::ixx() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.ixx)
  return _internal_ixx();
}
inline void Inertia::_internal_set_ixx(float value) {
  
  ixx_ = value;
}
inline void Inertia::set_ixx(float value) {
  _internal_set_ixx(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.ixx)
}

// float ixy = 4;
inline void Inertia::clear_ixy() {
  ixy_ = 0;
}
inline float Inertia::_internal_ixy() const {
  return ixy_;
}
inline float Inertia::ixy() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.ixy)
  return _internal_ixy();
}
inline void Inertia::_internal_set_ixy(float value) {
  
  ixy_ = value;
}
inline void Inertia::set_ixy(float value) {
  _internal_set_ixy(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.ixy)
}

// float ixz = 5;
inline void Inertia::clear_ixz() {
  ixz_ = 0;
}
inline float Inertia::_internal_ixz() const {
  return ixz_;
}
inline float Inertia::ixz() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.ixz)
  return _internal_ixz();
}
inline void Inertia::_internal_set_ixz(float value) {
  
  ixz_ = value;
}
inline void Inertia::set_ixz(float value) {
  _internal_set_ixz(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.ixz)
}

// float iyy = 6;
inline void Inertia::clear_iyy() {
  iyy_ = 0;
}
inline float Inertia::_internal_iyy() const {
  return iyy_;
}
inline float Inertia::iyy() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.iyy)
  return _internal_iyy();
}
inline void Inertia::_internal_set_iyy(float value) {
  
  iyy_ = value;
}
inline void Inertia::set_iyy(float value) {
  _internal_set_iyy(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.iyy)
}

// float iyz = 7;
inline void Inertia::clear_iyz() {
  iyz_ = 0;
}
inline float Inertia::_internal_iyz() const {
  return iyz_;
}
inline float Inertia::iyz() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.iyz)
  return _internal_iyz();
}
inline void Inertia::_internal_set_iyz(float value) {
  
  iyz_ = value;
}
inline void Inertia::set_iyz(float value) {
  _internal_set_iyz(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.iyz)
}

// float izz = 8;
inline void Inertia::clear_izz() {
  izz_ = 0;
}
inline float Inertia::_internal_izz() const {
  return izz_;
}
inline float Inertia::izz() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.izz)
  return _internal_izz();
}
inline void Inertia::_internal_set_izz(float value) {
  
  izz_ = value;
}
inline void Inertia::set_izz(float value) {
  _internal_set_izz(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Inertia.izz)
}

// -------------------------------------------------------------------

// InertiaStamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool InertiaStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool InertiaStamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& InertiaStamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& InertiaStamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped.header)
  return _internal_header();
}
inline void InertiaStamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InertiaStamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InertiaStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InertiaStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* InertiaStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped.header)
  return _internal_mutable_header();
}
inline void InertiaStamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Inertia inertia = 2;
inline bool InertiaStamped::_internal_has_inertia() const {
  return this != internal_default_instance() && inertia_ != nullptr;
}
inline bool InertiaStamped::has_inertia() const {
  return _internal_has_inertia();
}
inline void InertiaStamped::clear_inertia() {
  if (GetArena() == nullptr && inertia_ != nullptr) {
    delete inertia_;
  }
  inertia_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia& InertiaStamped::_internal_inertia() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* p = inertia_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Inertia_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia& InertiaStamped::inertia() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped.inertia)
  return _internal_inertia();
}
inline void InertiaStamped::unsafe_arena_set_allocated_inertia(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* inertia) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inertia_);
  }
  inertia_ = inertia;
  if (inertia) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped.inertia)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* InertiaStamped::release_inertia() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* temp = inertia_;
  inertia_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* InertiaStamped::unsafe_arena_release_inertia() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped.inertia)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* temp = inertia_;
  inertia_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* InertiaStamped::_internal_mutable_inertia() {
  
  if (inertia_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Inertia>(GetArena());
    inertia_ = p;
  }
  return inertia_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* InertiaStamped::mutable_inertia() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped.inertia)
  return _internal_mutable_inertia();
}
inline void InertiaStamped::set_allocated_inertia(::openbot_bridge::ros2_msgs::geometry_msgs::Inertia* inertia) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inertia_;
  }
  if (inertia) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inertia);
    if (message_arena != submessage_arena) {
      inertia = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inertia, submessage_arena);
    }
    
  } else {
    
  }
  inertia_ = inertia;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.InertiaStamped.inertia)
}

// -------------------------------------------------------------------

// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Point.y)
}

// double z = 3;
inline void Point::clear_z() {
  z_ = 0;
}
inline double Point::_internal_z() const {
  return z_;
}
inline double Point::z() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Point::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Point.z)
}

// -------------------------------------------------------------------

// PointStamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool PointStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PointStamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PointStamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PointStamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped.header)
  return _internal_header();
}
inline void PointStamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointStamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PointStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped.header)
  return _internal_mutable_header();
}
inline void PointStamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Point point = 2;
inline bool PointStamped::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool PointStamped::has_point() const {
  return _internal_has_point();
}
inline void PointStamped::clear_point() {
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& PointStamped::_internal_point() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point* p = point_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Point&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Point_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& PointStamped::point() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped.point)
  return _internal_point();
}
inline void PointStamped::unsafe_arena_set_allocated_point(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Point* point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped.point)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* PointStamped::release_point() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* temp = point_;
  point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* PointStamped::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped.point)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* PointStamped::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Point>(GetArena());
    point_ = p;
  }
  return point_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* PointStamped::mutable_point() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped.point)
  return _internal_mutable_point();
}
inline void PointStamped::set_allocated_point(::openbot_bridge::ros2_msgs::geometry_msgs::Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PointStamped.point)
}

// -------------------------------------------------------------------

// Point32

// float x = 1;
inline void Point32::clear_x() {
  x_ = 0;
}
inline float Point32::_internal_x() const {
  return x_;
}
inline float Point32::x() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Point32.x)
  return _internal_x();
}
inline void Point32::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point32::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Point32.x)
}

// float y = 2;
inline void Point32::clear_y() {
  y_ = 0;
}
inline float Point32::_internal_y() const {
  return y_;
}
inline float Point32::y() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Point32.y)
  return _internal_y();
}
inline void Point32::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point32::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Point32.y)
}

// float z = 3;
inline void Point32::clear_z() {
  z_ = 0;
}
inline float Point32::_internal_z() const {
  return z_;
}
inline float Point32::z() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Point32.z)
  return _internal_z();
}
inline void Point32::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Point32::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Point32.z)
}

// -------------------------------------------------------------------

// Polygon

// repeated .openbot_bridge.ros2_msgs.geometry_msgs.Point32 points = 1;
inline int Polygon::_internal_points_size() const {
  return points_.size();
}
inline int Polygon::points_size() const {
  return _internal_points_size();
}
inline void Polygon::clear_points() {
  points_.Clear();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* Polygon::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Polygon.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point32 >*
Polygon::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.geometry_msgs.Polygon.points)
  return &points_;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point32& Polygon::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point32& Polygon::points(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Polygon.points)
  return _internal_points(index);
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* Polygon::_internal_add_points() {
  return points_.Add();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point32* Polygon::add_points() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.geometry_msgs.Polygon.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Point32 >&
Polygon::points() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.geometry_msgs.Polygon.points)
  return points_;
}

// -------------------------------------------------------------------

// PolygonStamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool PolygonStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PolygonStamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PolygonStamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PolygonStamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped.header)
  return _internal_header();
}
inline void PolygonStamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PolygonStamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PolygonStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PolygonStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PolygonStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped.header)
  return _internal_mutable_header();
}
inline void PolygonStamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Polygon polygon = 2;
inline bool PolygonStamped::_internal_has_polygon() const {
  return this != internal_default_instance() && polygon_ != nullptr;
}
inline bool PolygonStamped::has_polygon() const {
  return _internal_has_polygon();
}
inline void PolygonStamped::clear_polygon() {
  if (GetArena() == nullptr && polygon_ != nullptr) {
    delete polygon_;
  }
  polygon_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon& PolygonStamped::_internal_polygon() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* p = polygon_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Polygon_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon& PolygonStamped::polygon() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped.polygon)
  return _internal_polygon();
}
inline void PolygonStamped::unsafe_arena_set_allocated_polygon(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* polygon) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(polygon_);
  }
  polygon_ = polygon;
  if (polygon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped.polygon)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* PolygonStamped::release_polygon() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* temp = polygon_;
  polygon_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* PolygonStamped::unsafe_arena_release_polygon() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped.polygon)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* temp = polygon_;
  polygon_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* PolygonStamped::_internal_mutable_polygon() {
  
  if (polygon_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Polygon>(GetArena());
    polygon_ = p;
  }
  return polygon_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* PolygonStamped::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped.polygon)
  return _internal_mutable_polygon();
}
inline void PolygonStamped::set_allocated_polygon(::openbot_bridge::ros2_msgs::geometry_msgs::Polygon* polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete polygon_;
  }
  if (polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(polygon);
    if (message_arena != submessage_arena) {
      polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    
  } else {
    
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PolygonStamped.polygon)
}

// -------------------------------------------------------------------

// Pose2D

// double x = 1;
inline void Pose2D::clear_x() {
  x_ = 0;
}
inline double Pose2D::_internal_x() const {
  return x_;
}
inline double Pose2D::x() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D.x)
  return _internal_x();
}
inline void Pose2D::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Pose2D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D.x)
}

// double y = 2;
inline void Pose2D::clear_y() {
  y_ = 0;
}
inline double Pose2D::_internal_y() const {
  return y_;
}
inline double Pose2D::y() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D.y)
  return _internal_y();
}
inline void Pose2D::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Pose2D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D.y)
}

// double theta = 3;
inline void Pose2D::clear_theta() {
  theta_ = 0;
}
inline double Pose2D::_internal_theta() const {
  return theta_;
}
inline double Pose2D::theta() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D.theta)
  return _internal_theta();
}
inline void Pose2D::_internal_set_theta(double value) {
  
  theta_ = value;
}
inline void Pose2D::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Pose2D.theta)
}

// -------------------------------------------------------------------

// Pose

// .openbot_bridge.ros2_msgs.geometry_msgs.Point position = 1;
inline bool Pose::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Pose::has_position() const {
  return _internal_has_position();
}
inline void Pose::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& Pose::_internal_position() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Point* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Point&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Point_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Point& Pose::position() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Pose.position)
  return _internal_position();
}
inline void Pose::unsafe_arena_set_allocated_position(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Point* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Pose.position)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* Pose::release_position() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* Pose::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.Pose.position)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Point* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* Pose::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Point>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Point* Pose::mutable_position() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Pose.position)
  return _internal_mutable_position();
}
inline void Pose::set_allocated_position(::openbot_bridge::ros2_msgs::geometry_msgs::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Pose.position)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion orientation = 2;
inline bool Pose::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool Pose::has_orientation() const {
  return _internal_has_orientation();
}
inline void Pose::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& Pose::_internal_orientation() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Quaternion_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& Pose::orientation() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Pose.orientation)
  return _internal_orientation();
}
inline void Pose::unsafe_arena_set_allocated_orientation(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Pose.orientation)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Pose::release_orientation() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Pose::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.Pose.orientation)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Pose::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Pose::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Pose.orientation)
  return _internal_mutable_orientation();
}
inline void Pose::set_allocated_orientation(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Pose.orientation)
}

// -------------------------------------------------------------------

// PoseArray

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool PoseArray::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PoseArray::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PoseArray::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PoseArray::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray.header)
  return _internal_header();
}
inline void PoseArray::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PoseArray::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PoseArray::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PoseArray::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PoseArray::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray.header)
  return _internal_mutable_header();
}
inline void PoseArray::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray.header)
}

// repeated .openbot_bridge.ros2_msgs.geometry_msgs.Pose poses = 2;
inline int PoseArray::_internal_poses_size() const {
  return poses_.size();
}
inline int PoseArray::poses_size() const {
  return _internal_poses_size();
}
inline void PoseArray::clear_poses() {
  poses_.Clear();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* PoseArray::mutable_poses(int index) {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray.poses)
  return poses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Pose >*
PoseArray::mutable_poses() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray.poses)
  return &poses_;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& PoseArray::_internal_poses(int index) const {
  return poses_.Get(index);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& PoseArray::poses(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray.poses)
  return _internal_poses(index);
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* PoseArray::_internal_add_poses() {
  return poses_.Add();
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* PoseArray::add_poses() {
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray.poses)
  return _internal_add_poses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::openbot_bridge::ros2_msgs::geometry_msgs::Pose >&
PoseArray::poses() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.geometry_msgs.PoseArray.poses)
  return poses_;
}

// -------------------------------------------------------------------

// PoseStamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool PoseStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PoseStamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PoseStamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PoseStamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped.header)
  return _internal_header();
}
inline void PoseStamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PoseStamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PoseStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PoseStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PoseStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped.header)
  return _internal_mutable_header();
}
inline void PoseStamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 2;
inline bool PoseStamped::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool PoseStamped::has_pose() const {
  return _internal_has_pose();
}
inline void PoseStamped::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& PoseStamped::_internal_pose() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Pose_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& PoseStamped::pose() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped.pose)
  return _internal_pose();
}
inline void PoseStamped::unsafe_arena_set_allocated_pose(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped.pose)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* PoseStamped::release_pose() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* PoseStamped::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped.pose)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* PoseStamped::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* PoseStamped::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped.pose)
  return _internal_mutable_pose();
}
inline void PoseStamped::set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PoseStamped.pose)
}

// -------------------------------------------------------------------

// PoseWithCovariance

// .openbot_bridge.ros2_msgs.geometry_msgs.Pose pose = 1;
inline bool PoseWithCovariance::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool PoseWithCovariance::has_pose() const {
  return _internal_has_pose();
}
inline void PoseWithCovariance::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& PoseWithCovariance::_internal_pose() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Pose_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Pose& PoseWithCovariance::pose() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance.pose)
  return _internal_pose();
}
inline void PoseWithCovariance::unsafe_arena_set_allocated_pose(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance.pose)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* PoseWithCovariance::release_pose() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* PoseWithCovariance::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance.pose)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* PoseWithCovariance::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Pose* PoseWithCovariance::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance.pose)
  return _internal_mutable_pose();
}
inline void PoseWithCovariance::set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance.pose)
}

// repeated double covariance = 2 [packed = true];
inline int PoseWithCovariance::_internal_covariance_size() const {
  return covariance_.size();
}
inline int PoseWithCovariance::covariance_size() const {
  return _internal_covariance_size();
}
inline void PoseWithCovariance::clear_covariance() {
  covariance_.Clear();
}
inline double PoseWithCovariance::_internal_covariance(int index) const {
  return covariance_.Get(index);
}
inline double PoseWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance.covariance)
  return _internal_covariance(index);
}
inline void PoseWithCovariance::set_covariance(int index, double value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance.covariance)
}
inline void PoseWithCovariance::_internal_add_covariance(double value) {
  covariance_.Add(value);
}
inline void PoseWithCovariance::add_covariance(double value) {
  _internal_add_covariance(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance.covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PoseWithCovariance::_internal_covariance() const {
  return covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PoseWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance.covariance)
  return _internal_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PoseWithCovariance::_internal_mutable_covariance() {
  return &covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PoseWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance.covariance)
  return _internal_mutable_covariance();
}

// -------------------------------------------------------------------

// PoseWithCovarianceStamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool PoseWithCovarianceStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PoseWithCovarianceStamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PoseWithCovarianceStamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& PoseWithCovarianceStamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped.header)
  return _internal_header();
}
inline void PoseWithCovarianceStamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PoseWithCovarianceStamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PoseWithCovarianceStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PoseWithCovarianceStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* PoseWithCovarianceStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped.header)
  return _internal_mutable_header();
}
inline void PoseWithCovarianceStamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovariance pose = 2;
inline bool PoseWithCovarianceStamped::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool PoseWithCovarianceStamped::has_pose() const {
  return _internal_has_pose();
}
inline void PoseWithCovarianceStamped::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& PoseWithCovarianceStamped::_internal_pose() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_PoseWithCovariance_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance& PoseWithCovarianceStamped::pose() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped.pose)
  return _internal_pose();
}
inline void PoseWithCovarianceStamped::unsafe_arena_set_allocated_pose(
    ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped.pose)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* PoseWithCovarianceStamped::release_pose() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* temp = pose_;
  pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* PoseWithCovarianceStamped::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped.pose)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* PoseWithCovarianceStamped::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* PoseWithCovarianceStamped::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped.pose)
  return _internal_mutable_pose();
}
inline void PoseWithCovarianceStamped::set_allocated_pose(::openbot_bridge::ros2_msgs::geometry_msgs::PoseWithCovariance* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.PoseWithCovarianceStamped.pose)
}

// -------------------------------------------------------------------

// Quaternion

// double x = 1;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline double Quaternion::_internal_x() const {
  return x_;
}
inline double Quaternion::x() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Quaternion::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion.x)
}

// double y = 2;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline double Quaternion::_internal_y() const {
  return y_;
}
inline double Quaternion::y() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Quaternion::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion.y)
}

// double z = 3;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline double Quaternion::_internal_z() const {
  return z_;
}
inline double Quaternion::z() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Quaternion::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion.z)
}

// double w = 4;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline double Quaternion::_internal_w() const {
  return w_;
}
inline double Quaternion::w() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(double value) {
  
  w_ = value;
}
inline void Quaternion::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Quaternion.w)
}

// -------------------------------------------------------------------

// QuaternionStamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool QuaternionStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool QuaternionStamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& QuaternionStamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& QuaternionStamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped.header)
  return _internal_header();
}
inline void QuaternionStamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* QuaternionStamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* QuaternionStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* QuaternionStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* QuaternionStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped.header)
  return _internal_mutable_header();
}
inline void QuaternionStamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion quaternion = 2;
inline bool QuaternionStamped::_internal_has_quaternion() const {
  return this != internal_default_instance() && quaternion_ != nullptr;
}
inline bool QuaternionStamped::has_quaternion() const {
  return _internal_has_quaternion();
}
inline void QuaternionStamped::clear_quaternion() {
  if (GetArena() == nullptr && quaternion_ != nullptr) {
    delete quaternion_;
  }
  quaternion_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& QuaternionStamped::_internal_quaternion() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* p = quaternion_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Quaternion_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& QuaternionStamped::quaternion() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped.quaternion)
  return _internal_quaternion();
}
inline void QuaternionStamped::unsafe_arena_set_allocated_quaternion(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* quaternion) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quaternion_);
  }
  quaternion_ = quaternion;
  if (quaternion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped.quaternion)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* QuaternionStamped::release_quaternion() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* temp = quaternion_;
  quaternion_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* QuaternionStamped::unsafe_arena_release_quaternion() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped.quaternion)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* temp = quaternion_;
  quaternion_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* QuaternionStamped::_internal_mutable_quaternion() {
  
  if (quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion>(GetArena());
    quaternion_ = p;
  }
  return quaternion_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* QuaternionStamped::mutable_quaternion() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped.quaternion)
  return _internal_mutable_quaternion();
}
inline void QuaternionStamped::set_allocated_quaternion(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete quaternion_;
  }
  if (quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(quaternion);
    if (message_arena != submessage_arena) {
      quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternion, submessage_arena);
    }
    
  } else {
    
  }
  quaternion_ = quaternion;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.QuaternionStamped.quaternion)
}

// -------------------------------------------------------------------

// Transform

// .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 translation = 1;
inline bool Transform::_internal_has_translation() const {
  return this != internal_default_instance() && translation_ != nullptr;
}
inline bool Transform::has_translation() const {
  return _internal_has_translation();
}
inline void Transform::clear_translation() {
  if (GetArena() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Transform::_internal_translation() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* p = translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Transform::translation() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Transform.translation)
  return _internal_translation();
}
inline void Transform::unsafe_arena_set_allocated_translation(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* translation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Transform.translation)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Transform::release_translation() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = translation_;
  translation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Transform::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.Transform.translation)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Transform::_internal_mutable_translation() {
  
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(GetArena());
    translation_ = p;
  }
  return translation_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Transform::mutable_translation() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Transform.translation)
  return _internal_mutable_translation();
}
inline void Transform::set_allocated_translation(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Transform.translation)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Quaternion rotation = 2;
inline bool Transform::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool Transform::has_rotation() const {
  return _internal_has_rotation();
}
inline void Transform::clear_rotation() {
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& Transform::_internal_rotation() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Quaternion_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Transform.rotation)
  return _internal_rotation();
}
inline void Transform::unsafe_arena_set_allocated_rotation(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Transform.rotation)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Transform::release_rotation() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Transform::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.Transform.rotation)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Transform::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion>(GetArena());
    rotation_ = p;
  }
  return rotation_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* Transform::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Transform.rotation)
  return _internal_mutable_rotation();
}
inline void Transform::set_allocated_rotation(::openbot_bridge::ros2_msgs::geometry_msgs::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Transform.rotation)
}

// -------------------------------------------------------------------

// TransformStamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool TransformStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool TransformStamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& TransformStamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& TransformStamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.header)
  return _internal_header();
}
inline void TransformStamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* TransformStamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* TransformStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* TransformStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* TransformStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.header)
  return _internal_mutable_header();
}
inline void TransformStamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.header)
}

// string child_frame_id = 2;
inline void TransformStamped::clear_child_frame_id() {
  child_frame_id_.ClearToEmpty();
}
inline const std::string& TransformStamped::child_frame_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.child_frame_id)
  return _internal_child_frame_id();
}
inline void TransformStamped::set_child_frame_id(const std::string& value) {
  _internal_set_child_frame_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.child_frame_id)
}
inline std::string* TransformStamped::mutable_child_frame_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.child_frame_id)
  return _internal_mutable_child_frame_id();
}
inline const std::string& TransformStamped::_internal_child_frame_id() const {
  return child_frame_id_.Get();
}
inline void TransformStamped::_internal_set_child_frame_id(const std::string& value) {
  
  child_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransformStamped::set_child_frame_id(std::string&& value) {
  
  child_frame_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.child_frame_id)
}
inline void TransformStamped::set_child_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  child_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.child_frame_id)
}
inline void TransformStamped::set_child_frame_id(const char* value,
    size_t size) {
  
  child_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.child_frame_id)
}
inline std::string* TransformStamped::_internal_mutable_child_frame_id() {
  
  return child_frame_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransformStamped::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.child_frame_id)
  return child_frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransformStamped::set_allocated_child_frame_id(std::string* child_frame_id) {
  if (child_frame_id != nullptr) {
    
  } else {
    
  }
  child_frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), child_frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.child_frame_id)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Transform transform = 3;
inline bool TransformStamped::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool TransformStamped::has_transform() const {
  return _internal_has_transform();
}
inline void TransformStamped::clear_transform() {
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Transform& TransformStamped::_internal_transform() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Transform&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Transform_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Transform& TransformStamped::transform() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.transform)
  return _internal_transform();
}
inline void TransformStamped::unsafe_arena_set_allocated_transform(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.transform)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* TransformStamped::release_transform() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* temp = transform_;
  transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* TransformStamped::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.transform)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* TransformStamped::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Transform>(GetArena());
    transform_ = p;
  }
  return transform_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Transform* TransformStamped::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.transform)
  return _internal_mutable_transform();
}
inline void TransformStamped::set_allocated_transform(::openbot_bridge::ros2_msgs::geometry_msgs::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TransformStamped.transform)
}

// -------------------------------------------------------------------

// Twist

// .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 linear = 1;
inline bool Twist::_internal_has_linear() const {
  return this != internal_default_instance() && linear_ != nullptr;
}
inline bool Twist::has_linear() const {
  return _internal_has_linear();
}
inline void Twist::clear_linear() {
  if (GetArena() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Twist::_internal_linear() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* p = linear_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Twist::linear() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Twist.linear)
  return _internal_linear();
}
inline void Twist::unsafe_arena_set_allocated_linear(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_);
  }
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Twist.linear)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Twist::release_linear() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = linear_;
  linear_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Twist::unsafe_arena_release_linear() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.Twist.linear)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = linear_;
  linear_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Twist::_internal_mutable_linear() {
  
  if (linear_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(GetArena());
    linear_ = p;
  }
  return linear_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Twist::mutable_linear() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Twist.linear)
  return _internal_mutable_linear();
}
inline void Twist::set_allocated_linear(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete linear_;
  }
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linear);
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    
  } else {
    
  }
  linear_ = linear;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Twist.linear)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 angular = 2;
inline bool Twist::_internal_has_angular() const {
  return this != internal_default_instance() && angular_ != nullptr;
}
inline bool Twist::has_angular() const {
  return _internal_has_angular();
}
inline void Twist::clear_angular() {
  if (GetArena() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Twist::_internal_angular() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* p = angular_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Twist::angular() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Twist.angular)
  return _internal_angular();
}
inline void Twist::unsafe_arena_set_allocated_angular(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_);
  }
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Twist.angular)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Twist::release_angular() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = angular_;
  angular_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Twist::unsafe_arena_release_angular() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.Twist.angular)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = angular_;
  angular_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Twist::_internal_mutable_angular() {
  
  if (angular_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(GetArena());
    angular_ = p;
  }
  return angular_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Twist::mutable_angular() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Twist.angular)
  return _internal_mutable_angular();
}
inline void Twist::set_allocated_angular(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete angular_;
  }
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(angular);
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    
  } else {
    
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Twist.angular)
}

// -------------------------------------------------------------------

// TwistStamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool TwistStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool TwistStamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& TwistStamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& TwistStamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped.header)
  return _internal_header();
}
inline void TwistStamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* TwistStamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* TwistStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* TwistStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* TwistStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped.header)
  return _internal_mutable_header();
}
inline void TwistStamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Twist twist = 2;
inline bool TwistStamped::_internal_has_twist() const {
  return this != internal_default_instance() && twist_ != nullptr;
}
inline bool TwistStamped::has_twist() const {
  return _internal_has_twist();
}
inline void TwistStamped::clear_twist() {
  if (GetArena() == nullptr && twist_ != nullptr) {
    delete twist_;
  }
  twist_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& TwistStamped::_internal_twist() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* p = twist_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Twist_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& TwistStamped::twist() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped.twist)
  return _internal_twist();
}
inline void TwistStamped::unsafe_arena_set_allocated_twist(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* twist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_);
  }
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped.twist)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* TwistStamped::release_twist() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* temp = twist_;
  twist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* TwistStamped::unsafe_arena_release_twist() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped.twist)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* temp = twist_;
  twist_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* TwistStamped::_internal_mutable_twist() {
  
  if (twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Twist>(GetArena());
    twist_ = p;
  }
  return twist_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* TwistStamped::mutable_twist() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped.twist)
  return _internal_mutable_twist();
}
inline void TwistStamped::set_allocated_twist(::openbot_bridge::ros2_msgs::geometry_msgs::Twist* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete twist_;
  }
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(twist);
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TwistStamped.twist)
}

// -------------------------------------------------------------------

// TwistWithCovariance

// .openbot_bridge.ros2_msgs.geometry_msgs.Twist twist = 1;
inline bool TwistWithCovariance::_internal_has_twist() const {
  return this != internal_default_instance() && twist_ != nullptr;
}
inline bool TwistWithCovariance::has_twist() const {
  return _internal_has_twist();
}
inline void TwistWithCovariance::clear_twist() {
  if (GetArena() == nullptr && twist_ != nullptr) {
    delete twist_;
  }
  twist_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& TwistWithCovariance::_internal_twist() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* p = twist_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Twist_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& TwistWithCovariance::twist() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance.twist)
  return _internal_twist();
}
inline void TwistWithCovariance::unsafe_arena_set_allocated_twist(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* twist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_);
  }
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance.twist)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* TwistWithCovariance::release_twist() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* temp = twist_;
  twist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* TwistWithCovariance::unsafe_arena_release_twist() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance.twist)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* temp = twist_;
  twist_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* TwistWithCovariance::_internal_mutable_twist() {
  
  if (twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Twist>(GetArena());
    twist_ = p;
  }
  return twist_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* TwistWithCovariance::mutable_twist() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance.twist)
  return _internal_mutable_twist();
}
inline void TwistWithCovariance::set_allocated_twist(::openbot_bridge::ros2_msgs::geometry_msgs::Twist* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete twist_;
  }
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(twist);
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance.twist)
}

// repeated double covariance = 2 [packed = true];
inline int TwistWithCovariance::_internal_covariance_size() const {
  return covariance_.size();
}
inline int TwistWithCovariance::covariance_size() const {
  return _internal_covariance_size();
}
inline void TwistWithCovariance::clear_covariance() {
  covariance_.Clear();
}
inline double TwistWithCovariance::_internal_covariance(int index) const {
  return covariance_.Get(index);
}
inline double TwistWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance.covariance)
  return _internal_covariance(index);
}
inline void TwistWithCovariance::set_covariance(int index, double value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance.covariance)
}
inline void TwistWithCovariance::_internal_add_covariance(double value) {
  covariance_.Add(value);
}
inline void TwistWithCovariance::add_covariance(double value) {
  _internal_add_covariance(value);
  // @@protoc_insertion_point(field_add:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance.covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TwistWithCovariance::_internal_covariance() const {
  return covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TwistWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance.covariance)
  return _internal_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TwistWithCovariance::_internal_mutable_covariance() {
  return &covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TwistWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance.covariance)
  return _internal_mutable_covariance();
}

// -------------------------------------------------------------------

// TwistWithCovarianceStamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool TwistWithCovarianceStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool TwistWithCovarianceStamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& TwistWithCovarianceStamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& TwistWithCovarianceStamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped.header)
  return _internal_header();
}
inline void TwistWithCovarianceStamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* TwistWithCovarianceStamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* TwistWithCovarianceStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* TwistWithCovarianceStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* TwistWithCovarianceStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped.header)
  return _internal_mutable_header();
}
inline void TwistWithCovarianceStamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovariance twist = 2;
inline bool TwistWithCovarianceStamped::_internal_has_twist() const {
  return this != internal_default_instance() && twist_ != nullptr;
}
inline bool TwistWithCovarianceStamped::has_twist() const {
  return _internal_has_twist();
}
inline void TwistWithCovarianceStamped::clear_twist() {
  if (GetArena() == nullptr && twist_ != nullptr) {
    delete twist_;
  }
  twist_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance& TwistWithCovarianceStamped::_internal_twist() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* p = twist_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_TwistWithCovariance_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance& TwistWithCovarianceStamped::twist() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped.twist)
  return _internal_twist();
}
inline void TwistWithCovarianceStamped::unsafe_arena_set_allocated_twist(
    ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* twist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_);
  }
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped.twist)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* TwistWithCovarianceStamped::release_twist() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* temp = twist_;
  twist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* TwistWithCovarianceStamped::unsafe_arena_release_twist() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped.twist)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* temp = twist_;
  twist_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* TwistWithCovarianceStamped::_internal_mutable_twist() {
  
  if (twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance>(GetArena());
    twist_ = p;
  }
  return twist_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* TwistWithCovarianceStamped::mutable_twist() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped.twist)
  return _internal_mutable_twist();
}
inline void TwistWithCovarianceStamped::set_allocated_twist(::openbot_bridge::ros2_msgs::geometry_msgs::TwistWithCovariance* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete twist_;
  }
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(twist);
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.TwistWithCovarianceStamped.twist)
}

// -------------------------------------------------------------------

// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::_internal_x() const {
  return x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::_internal_y() const {
  return y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::_internal_z() const {
  return z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.Vector3.z)
}

// -------------------------------------------------------------------

// Vector3Stamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool Vector3Stamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Vector3Stamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Vector3Stamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& Vector3Stamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped.header)
  return _internal_header();
}
inline void Vector3Stamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Vector3Stamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Vector3Stamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Vector3Stamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* Vector3Stamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped.header)
  return _internal_mutable_header();
}
inline void Vector3Stamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 vector = 2;
inline bool Vector3Stamped::_internal_has_vector() const {
  return this != internal_default_instance() && vector_ != nullptr;
}
inline bool Vector3Stamped::has_vector() const {
  return _internal_has_vector();
}
inline void Vector3Stamped::clear_vector() {
  if (GetArena() == nullptr && vector_ != nullptr) {
    delete vector_;
  }
  vector_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Vector3Stamped::_internal_vector() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* p = vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Vector3Stamped::vector() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped.vector)
  return _internal_vector();
}
inline void Vector3Stamped::unsafe_arena_set_allocated_vector(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* vector) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector_);
  }
  vector_ = vector;
  if (vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped.vector)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Vector3Stamped::release_vector() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = vector_;
  vector_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Vector3Stamped::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped.vector)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = vector_;
  vector_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Vector3Stamped::_internal_mutable_vector() {
  
  if (vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(GetArena());
    vector_ = p;
  }
  return vector_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Vector3Stamped::mutable_vector() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped.vector)
  return _internal_mutable_vector();
}
inline void Vector3Stamped::set_allocated_vector(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vector_;
  }
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vector);
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    
  } else {
    
  }
  vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Vector3Stamped.vector)
}

// -------------------------------------------------------------------

// Wrench

// .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 force = 1;
inline bool Wrench::_internal_has_force() const {
  return this != internal_default_instance() && force_ != nullptr;
}
inline bool Wrench::has_force() const {
  return _internal_has_force();
}
inline void Wrench::clear_force() {
  if (GetArena() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Wrench::_internal_force() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* p = force_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Wrench::force() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Wrench.force)
  return _internal_force();
}
inline void Wrench::unsafe_arena_set_allocated_force(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* force) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(force_);
  }
  force_ = force;
  if (force) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Wrench.force)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Wrench::release_force() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = force_;
  force_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Wrench::unsafe_arena_release_force() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.Wrench.force)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = force_;
  force_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Wrench::_internal_mutable_force() {
  
  if (force_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(GetArena());
    force_ = p;
  }
  return force_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Wrench::mutable_force() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Wrench.force)
  return _internal_mutable_force();
}
inline void Wrench::set_allocated_force(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* force) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete force_;
  }
  if (force) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(force);
    if (message_arena != submessage_arena) {
      force = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force, submessage_arena);
    }
    
  } else {
    
  }
  force_ = force;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Wrench.force)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Vector3 torque = 2;
inline bool Wrench::_internal_has_torque() const {
  return this != internal_default_instance() && torque_ != nullptr;
}
inline bool Wrench::has_torque() const {
  return _internal_has_torque();
}
inline void Wrench::clear_torque() {
  if (GetArena() == nullptr && torque_ != nullptr) {
    delete torque_;
  }
  torque_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Wrench::_internal_torque() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* p = torque_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Vector3_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3& Wrench::torque() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.Wrench.torque)
  return _internal_torque();
}
inline void Wrench::unsafe_arena_set_allocated_torque(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* torque) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(torque_);
  }
  torque_ = torque;
  if (torque) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Wrench.torque)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Wrench::release_torque() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = torque_;
  torque_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Wrench::unsafe_arena_release_torque() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.Wrench.torque)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* temp = torque_;
  torque_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Wrench::_internal_mutable_torque() {
  
  if (torque_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Vector3>(GetArena());
    torque_ = p;
  }
  return torque_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* Wrench::mutable_torque() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.Wrench.torque)
  return _internal_mutable_torque();
}
inline void Wrench::set_allocated_torque(::openbot_bridge::ros2_msgs::geometry_msgs::Vector3* torque) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete torque_;
  }
  if (torque) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(torque);
    if (message_arena != submessage_arena) {
      torque = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, torque, submessage_arena);
    }
    
  } else {
    
  }
  torque_ = torque;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.Wrench.torque)
}

// -------------------------------------------------------------------

// WrenchStamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool WrenchStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool WrenchStamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& WrenchStamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& WrenchStamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped.header)
  return _internal_header();
}
inline void WrenchStamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* WrenchStamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* WrenchStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* WrenchStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* WrenchStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped.header)
  return _internal_mutable_header();
}
inline void WrenchStamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped.header)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Wrench wrench = 2;
inline bool WrenchStamped::_internal_has_wrench() const {
  return this != internal_default_instance() && wrench_ != nullptr;
}
inline bool WrenchStamped::has_wrench() const {
  return _internal_has_wrench();
}
inline void WrenchStamped::clear_wrench() {
  if (GetArena() == nullptr && wrench_ != nullptr) {
    delete wrench_;
  }
  wrench_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench& WrenchStamped::_internal_wrench() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* p = wrench_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Wrench_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench& WrenchStamped::wrench() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped.wrench)
  return _internal_wrench();
}
inline void WrenchStamped::unsafe_arena_set_allocated_wrench(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* wrench) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wrench_);
  }
  wrench_ = wrench;
  if (wrench) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped.wrench)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* WrenchStamped::release_wrench() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* temp = wrench_;
  wrench_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* WrenchStamped::unsafe_arena_release_wrench() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped.wrench)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* temp = wrench_;
  wrench_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* WrenchStamped::_internal_mutable_wrench() {
  
  if (wrench_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Wrench>(GetArena());
    wrench_ = p;
  }
  return wrench_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* WrenchStamped::mutable_wrench() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped.wrench)
  return _internal_mutable_wrench();
}
inline void WrenchStamped::set_allocated_wrench(::openbot_bridge::ros2_msgs::geometry_msgs::Wrench* wrench) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wrench_;
  }
  if (wrench) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wrench);
    if (message_arena != submessage_arena) {
      wrench = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrench, submessage_arena);
    }
    
  } else {
    
  }
  wrench_ = wrench;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.WrenchStamped.wrench)
}

// -------------------------------------------------------------------

// VelocityStamped

// .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
inline bool VelocityStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool VelocityStamped::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& VelocityStamped::_internal_header() const {
  const ::openbot_bridge::ros2_msgs::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::std_msgs::Header&>(
      ::openbot_bridge::ros2_msgs::std_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::std_msgs::Header& VelocityStamped::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.header)
  return _internal_header();
}
inline void VelocityStamped::unsafe_arena_set_allocated_header(
    ::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.header)
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* VelocityStamped::release_header() {
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* VelocityStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.header)
  
  ::openbot_bridge::ros2_msgs::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* VelocityStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::std_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::ros2_msgs::std_msgs::Header* VelocityStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.header)
  return _internal_mutable_header();
}
inline void VelocityStamped::set_allocated_header(::openbot_bridge::ros2_msgs::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.header)
}

// string body_frame_id = 2;
inline void VelocityStamped::clear_body_frame_id() {
  body_frame_id_.ClearToEmpty();
}
inline const std::string& VelocityStamped::body_frame_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.body_frame_id)
  return _internal_body_frame_id();
}
inline void VelocityStamped::set_body_frame_id(const std::string& value) {
  _internal_set_body_frame_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.body_frame_id)
}
inline std::string* VelocityStamped::mutable_body_frame_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.body_frame_id)
  return _internal_mutable_body_frame_id();
}
inline const std::string& VelocityStamped::_internal_body_frame_id() const {
  return body_frame_id_.Get();
}
inline void VelocityStamped::_internal_set_body_frame_id(const std::string& value) {
  
  body_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VelocityStamped::set_body_frame_id(std::string&& value) {
  
  body_frame_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.body_frame_id)
}
inline void VelocityStamped::set_body_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.body_frame_id)
}
inline void VelocityStamped::set_body_frame_id(const char* value,
    size_t size) {
  
  body_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.body_frame_id)
}
inline std::string* VelocityStamped::_internal_mutable_body_frame_id() {
  
  return body_frame_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VelocityStamped::release_body_frame_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.body_frame_id)
  return body_frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VelocityStamped::set_allocated_body_frame_id(std::string* body_frame_id) {
  if (body_frame_id != nullptr) {
    
  } else {
    
  }
  body_frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body_frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.body_frame_id)
}

// string reference_frame_id = 3;
inline void VelocityStamped::clear_reference_frame_id() {
  reference_frame_id_.ClearToEmpty();
}
inline const std::string& VelocityStamped::reference_frame_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.reference_frame_id)
  return _internal_reference_frame_id();
}
inline void VelocityStamped::set_reference_frame_id(const std::string& value) {
  _internal_set_reference_frame_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.reference_frame_id)
}
inline std::string* VelocityStamped::mutable_reference_frame_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.reference_frame_id)
  return _internal_mutable_reference_frame_id();
}
inline const std::string& VelocityStamped::_internal_reference_frame_id() const {
  return reference_frame_id_.Get();
}
inline void VelocityStamped::_internal_set_reference_frame_id(const std::string& value) {
  
  reference_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VelocityStamped::set_reference_frame_id(std::string&& value) {
  
  reference_frame_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.reference_frame_id)
}
inline void VelocityStamped::set_reference_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.reference_frame_id)
}
inline void VelocityStamped::set_reference_frame_id(const char* value,
    size_t size) {
  
  reference_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.reference_frame_id)
}
inline std::string* VelocityStamped::_internal_mutable_reference_frame_id() {
  
  return reference_frame_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VelocityStamped::release_reference_frame_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.reference_frame_id)
  return reference_frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VelocityStamped::set_allocated_reference_frame_id(std::string* reference_frame_id) {
  if (reference_frame_id != nullptr) {
    
  } else {
    
  }
  reference_frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.reference_frame_id)
}

// .openbot_bridge.ros2_msgs.geometry_msgs.Twist velocity = 4;
inline bool VelocityStamped::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool VelocityStamped::has_velocity() const {
  return _internal_has_velocity();
}
inline void VelocityStamped::clear_velocity() {
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& VelocityStamped::_internal_velocity() const {
  const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist&>(
      ::openbot_bridge::ros2_msgs::geometry_msgs::_Twist_default_instance_);
}
inline const ::openbot_bridge::ros2_msgs::geometry_msgs::Twist& VelocityStamped::velocity() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.velocity)
  return _internal_velocity();
}
inline void VelocityStamped::unsafe_arena_set_allocated_velocity(
    ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.velocity)
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* VelocityStamped::release_velocity() {
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* temp = velocity_;
  velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* VelocityStamped::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.velocity)
  
  ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* VelocityStamped::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::ros2_msgs::geometry_msgs::Twist>(GetArena());
    velocity_ = p;
  }
  return velocity_;
}
inline ::openbot_bridge::ros2_msgs::geometry_msgs::Twist* VelocityStamped::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.velocity)
  return _internal_mutable_velocity();
}
inline void VelocityStamped::set_allocated_velocity(::openbot_bridge::ros2_msgs::geometry_msgs::Twist* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.ros2_msgs.geometry_msgs.VelocityStamped.velocity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace geometry_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fros2_5fmsgs_2fgeometry_5fmsgs_2eproto
