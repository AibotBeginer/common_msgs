// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/ros2_msgs/diagnostic_msgs.proto

#include "openbot_bridge/ros2_msgs/diagnostic_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiagnosticStatus_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValue_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto;
namespace openbot_bridge {
namespace ros2_msgs {
namespace diagnostic_msgs {
class KeyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyValue> _instance;
} _KeyValue_default_instance_;
class DiagnosticStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosticStatus> _instance;
} _DiagnosticStatus_default_instance_;
class DiagnosticArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosticArray> _instance;
} _DiagnosticArray_default_instance_;
}  // namespace diagnostic_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
static void InitDefaultsscc_info_DiagnosticArray_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::diagnostic_msgs::_DiagnosticArray_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiagnosticArray_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DiagnosticArray_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto.base,
      &scc_info_DiagnosticStatus_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_DiagnosticStatus_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::diagnostic_msgs::_DiagnosticStatus_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiagnosticStatus_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DiagnosticStatus_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto}, {
      &scc_info_KeyValue_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_KeyValue_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::ros2_msgs::diagnostic_msgs::_KeyValue_default_instance_;
    new (ptr) ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValue_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyValue_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue, key_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus, level_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus, name_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus, message_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus, hardware_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticArray, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticArray, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue)},
  { 7, -1, sizeof(::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus)},
  { 17, -1, sizeof(::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticArray)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::diagnostic_msgs::_KeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::diagnostic_msgs::_DiagnosticStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::ros2_msgs::diagnostic_msgs::_DiagnosticArray_default_instance_),
};

const char descriptor_table_protodef_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.openbot_bridge/ros2_msgs/diagnostic_ms"
  "gs.proto\022(openbot_bridge.ros2_msgs.diagn"
  "ostic_msgs\032\'openbot_bridge/ros2_msgs/std"
  "_msgs.proto\"&\n\010KeyValue\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t\"\231\001\n\020DiagnosticStatus\022\r\n\005leve"
  "l\030\001 \001(\014\022\014\n\004name\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\022\023"
  "\n\013hardware_id\030\004 \001(\t\022B\n\006values\030\005 \003(\01322.op"
  "enbot_bridge.ros2_msgs.diagnostic_msgs.K"
  "eyValue\"\230\001\n\017DiagnosticArray\0229\n\006header\030\001 "
  "\001(\0132).openbot_bridge.ros2_msgs.std_msgs."
  "Header\022J\n\006status\030\002 \003(\0132:.openbot_bridge."
  "ros2_msgs.diagnostic_msgs.DiagnosticStat"
  "usb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto_deps[1] = {
  &::descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fstd_5fmsgs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto_sccs[3] = {
  &scc_info_DiagnosticArray_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.base,
  &scc_info_DiagnosticStatus_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.base,
  &scc_info_KeyValue_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto = {
  false, false, descriptor_table_protodef_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto, "openbot_bridge/ros2_msgs/diagnostic_msgs.proto", 490,
  &descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto_once, descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto_sccs, descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto::offsets,
  file_level_metadata_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto, 3, file_level_enum_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto, file_level_service_descriptors_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto)), true);
namespace openbot_bridge {
namespace ros2_msgs {
namespace diagnostic_msgs {

// ===================================================================

class KeyValue::_Internal {
 public:
};

KeyValue::KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
}

void KeyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyValue_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyValue::ArenaDtor(void* object) {
  KeyValue* _this = reinterpret_cast< KeyValue* >(object);
  (void)_this;
}
void KeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValue& KeyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyValue_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void KeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DiagnosticStatus::_Internal {
 public:
};

DiagnosticStatus::DiagnosticStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
}
DiagnosticStatus::DiagnosticStatus(const DiagnosticStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level().empty()) {
    level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_level(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  hardware_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hardware_id().empty()) {
    hardware_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hardware_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
}

void DiagnosticStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosticStatus_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.base);
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hardware_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosticStatus::~DiagnosticStatus() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiagnosticStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  level_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hardware_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosticStatus::ArenaDtor(void* object) {
  DiagnosticStatus* _this = reinterpret_cast< DiagnosticStatus* >(object);
  (void)_this;
}
void DiagnosticStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiagnosticStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosticStatus& DiagnosticStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosticStatus_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void DiagnosticStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  level_.ClearToEmpty();
  name_.ClearToEmpty();
  message_.ClearToEmpty();
  hardware_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiagnosticStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hardware_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hardware_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.hardware_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosticStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes level = 1;
  if (this->level().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_level(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // string hardware_id = 4;
  if (this->hardware_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hardware_id().data(), static_cast<int>(this->_internal_hardware_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus.hardware_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hardware_id(), target);
  }

  // repeated .openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue values = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
  return target;
}

size_t DiagnosticStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.diagnostic_msgs.KeyValue values = 5;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes level = 1;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_level());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string hardware_id = 4;
  if (this->hardware_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hardware_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosticStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosticStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosticStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
    MergeFrom(*source);
  }
}

void DiagnosticStatus::MergeFrom(const DiagnosticStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.level().size() > 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.hardware_id().size() > 0) {
    _internal_set_hardware_id(from._internal_hardware_id());
  }
}

void DiagnosticStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosticStatus::CopyFrom(const DiagnosticStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosticStatus::IsInitialized() const {
  return true;
}

void DiagnosticStatus::InternalSwap(DiagnosticStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  level_.Swap(&other->level_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hardware_id_.Swap(&other->hardware_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosticStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DiagnosticArray::_Internal {
 public:
  static const ::openbot_bridge::ros2_msgs::std_msgs::Header& header(const DiagnosticArray* msg);
};

const ::openbot_bridge::ros2_msgs::std_msgs::Header&
DiagnosticArray::_Internal::header(const DiagnosticArray* msg) {
  return *msg->header_;
}
void DiagnosticArray::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DiagnosticArray::DiagnosticArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
}
DiagnosticArray::DiagnosticArray(const DiagnosticArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      status_(from.status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::ros2_msgs::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
}

void DiagnosticArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosticArray_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.base);
  header_ = nullptr;
}

DiagnosticArray::~DiagnosticArray() {
  // @@protoc_insertion_point(destructor:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiagnosticArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void DiagnosticArray::ArenaDtor(void* object) {
  DiagnosticArray* _this = reinterpret_cast< DiagnosticArray* >(object);
  (void)_this;
}
void DiagnosticArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiagnosticArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosticArray& DiagnosticArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosticArray_openbot_5fbridge_2fros2_5fmsgs_2fdiagnostic_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void DiagnosticArray::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiagnosticArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosticArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_status(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
  return target;
}

size_t DiagnosticArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticStatus status = 2;
  total_size += 1UL * this->_internal_status_size();
  for (const auto& msg : this->status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .openbot_bridge.ros2_msgs.std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosticArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosticArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosticArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
    MergeFrom(*source);
  }
}

void DiagnosticArray::MergeFrom(const DiagnosticArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_.MergeFrom(from.status_);
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::ros2_msgs::std_msgs::Header::MergeFrom(from._internal_header());
  }
}

void DiagnosticArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosticArray::CopyFrom(const DiagnosticArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.ros2_msgs.diagnostic_msgs.DiagnosticArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosticArray::IsInitialized() const {
  return true;
}

void DiagnosticArray::InternalSwap(DiagnosticArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.InternalSwap(&other->status_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosticArray::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace diagnostic_msgs
}  // namespace ros2_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::diagnostic_msgs::KeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticArray* Arena::CreateMaybeMessage< ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::ros2_msgs::diagnostic_msgs::DiagnosticArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
