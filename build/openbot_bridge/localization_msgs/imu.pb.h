// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/localization_msgs/imu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2flocalization_5fmsgs_2fimu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2flocalization_5fmsgs_2fimu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "openbot_bridge/basic_msgs/header.pb.h"
#include "openbot_bridge/localization_msgs/pose.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2flocalization_5fmsgs_2fimu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openbot_5fbridge_2flocalization_5fmsgs_2fimu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2fimu_2eproto;
namespace openbot_bridge {
namespace localization_msgs {
class CorrectedImu;
class CorrectedImuDefaultTypeInternal;
extern CorrectedImuDefaultTypeInternal _CorrectedImu_default_instance_;
}  // namespace localization_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::openbot_bridge::localization_msgs::CorrectedImu* Arena::CreateMaybeMessage<::openbot_bridge::localization_msgs::CorrectedImu>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openbot_bridge {
namespace localization_msgs {

// ===================================================================

class CorrectedImu PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.localization_msgs.CorrectedImu) */ {
 public:
  inline CorrectedImu() : CorrectedImu(nullptr) {}
  virtual ~CorrectedImu();

  CorrectedImu(const CorrectedImu& from);
  CorrectedImu(CorrectedImu&& from) noexcept
    : CorrectedImu() {
    *this = ::std::move(from);
  }

  inline CorrectedImu& operator=(const CorrectedImu& from) {
    CopyFrom(from);
    return *this;
  }
  inline CorrectedImu& operator=(CorrectedImu&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CorrectedImu& default_instance();

  static inline const CorrectedImu* internal_default_instance() {
    return reinterpret_cast<const CorrectedImu*>(
               &_CorrectedImu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CorrectedImu& a, CorrectedImu& b) {
    a.Swap(&b);
  }
  inline void Swap(CorrectedImu* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CorrectedImu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CorrectedImu* New() const final {
    return CreateMaybeMessage<CorrectedImu>(nullptr);
  }

  CorrectedImu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CorrectedImu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CorrectedImu& from);
  void MergeFrom(const CorrectedImu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CorrectedImu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.localization_msgs.CorrectedImu";
  }
  protected:
  explicit CorrectedImu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2fimu_2eproto);
    return ::descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2fimu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kImuFieldNumber = 3,
  };
  // .openbot_bridge.basic_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::basic_msgs::Header& header() const;
  ::openbot_bridge::basic_msgs::Header* release_header();
  ::openbot_bridge::basic_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::basic_msgs::Header* header);
  private:
  const ::openbot_bridge::basic_msgs::Header& _internal_header() const;
  ::openbot_bridge::basic_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::basic_msgs::Header* header);
  ::openbot_bridge::basic_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.localization_msgs.Pose imu = 3;
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;
  public:
  void clear_imu();
  const ::openbot_bridge::localization_msgs::Pose& imu() const;
  ::openbot_bridge::localization_msgs::Pose* release_imu();
  ::openbot_bridge::localization_msgs::Pose* mutable_imu();
  void set_allocated_imu(::openbot_bridge::localization_msgs::Pose* imu);
  private:
  const ::openbot_bridge::localization_msgs::Pose& _internal_imu() const;
  ::openbot_bridge::localization_msgs::Pose* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::openbot_bridge::localization_msgs::Pose* imu);
  ::openbot_bridge::localization_msgs::Pose* unsafe_arena_release_imu();

  // @@protoc_insertion_point(class_scope:openbot_bridge.localization_msgs.CorrectedImu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::basic_msgs::Header* header_;
  ::openbot_bridge::localization_msgs::Pose* imu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2flocalization_5fmsgs_2fimu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CorrectedImu

// .openbot_bridge.basic_msgs.Header header = 1;
inline bool CorrectedImu::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CorrectedImu::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::basic_msgs::Header& CorrectedImu::_internal_header() const {
  const ::openbot_bridge::basic_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::basic_msgs::Header&>(
      ::openbot_bridge::basic_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::basic_msgs::Header& CorrectedImu::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.localization_msgs.CorrectedImu.header)
  return _internal_header();
}
inline void CorrectedImu::unsafe_arena_set_allocated_header(
    ::openbot_bridge::basic_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.localization_msgs.CorrectedImu.header)
}
inline ::openbot_bridge::basic_msgs::Header* CorrectedImu::release_header() {
  
  ::openbot_bridge::basic_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::basic_msgs::Header* CorrectedImu::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.localization_msgs.CorrectedImu.header)
  
  ::openbot_bridge::basic_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::basic_msgs::Header* CorrectedImu::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::basic_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::basic_msgs::Header* CorrectedImu::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.localization_msgs.CorrectedImu.header)
  return _internal_mutable_header();
}
inline void CorrectedImu::set_allocated_header(::openbot_bridge::basic_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.localization_msgs.CorrectedImu.header)
}

// .openbot_bridge.localization_msgs.Pose imu = 3;
inline bool CorrectedImu::_internal_has_imu() const {
  return this != internal_default_instance() && imu_ != nullptr;
}
inline bool CorrectedImu::has_imu() const {
  return _internal_has_imu();
}
inline const ::openbot_bridge::localization_msgs::Pose& CorrectedImu::_internal_imu() const {
  const ::openbot_bridge::localization_msgs::Pose* p = imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::localization_msgs::Pose&>(
      ::openbot_bridge::localization_msgs::_Pose_default_instance_);
}
inline const ::openbot_bridge::localization_msgs::Pose& CorrectedImu::imu() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.localization_msgs.CorrectedImu.imu)
  return _internal_imu();
}
inline void CorrectedImu::unsafe_arena_set_allocated_imu(
    ::openbot_bridge::localization_msgs::Pose* imu) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_);
  }
  imu_ = imu;
  if (imu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.localization_msgs.CorrectedImu.imu)
}
inline ::openbot_bridge::localization_msgs::Pose* CorrectedImu::release_imu() {
  
  ::openbot_bridge::localization_msgs::Pose* temp = imu_;
  imu_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::localization_msgs::Pose* CorrectedImu::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_release:openbot_bridge.localization_msgs.CorrectedImu.imu)
  
  ::openbot_bridge::localization_msgs::Pose* temp = imu_;
  imu_ = nullptr;
  return temp;
}
inline ::openbot_bridge::localization_msgs::Pose* CorrectedImu::_internal_mutable_imu() {
  
  if (imu_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::localization_msgs::Pose>(GetArena());
    imu_ = p;
  }
  return imu_;
}
inline ::openbot_bridge::localization_msgs::Pose* CorrectedImu::mutable_imu() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.localization_msgs.CorrectedImu.imu)
  return _internal_mutable_imu();
}
inline void CorrectedImu::set_allocated_imu(::openbot_bridge::localization_msgs::Pose* imu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_);
  }
  if (imu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu)->GetArena();
    if (message_arena != submessage_arena) {
      imu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.localization_msgs.CorrectedImu.imu)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization_msgs
}  // namespace openbot_bridge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2flocalization_5fmsgs_2fimu_2eproto
