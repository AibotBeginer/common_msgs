// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/localization_msgs/localization_status.proto

#include "openbot_bridge/localization_msgs/localization_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace openbot_bridge {
namespace localization_msgs {
class MsfSensorMsgStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsfSensorMsgStatus> _instance;
} _MsfSensorMsgStatus_default_instance_;
class MsfStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsfStatus> _instance;
} _MsfStatus_default_instance_;
}  // namespace localization_msgs
}  // namespace openbot_bridge
static void InitDefaultsscc_info_MsfSensorMsgStatus_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::localization_msgs::_MsfSensorMsgStatus_default_instance_;
    new (ptr) ::openbot_bridge::localization_msgs::MsfSensorMsgStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsfSensorMsgStatus_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsfSensorMsgStatus_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto}, {}};

static void InitDefaultsscc_info_MsfStatus_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::localization_msgs::_MsfStatus_default_instance_;
    new (ptr) ::openbot_bridge::localization_msgs::MsfStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsfStatus_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsfStatus_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::localization_msgs::MsfSensorMsgStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::localization_msgs::MsfSensorMsgStatus, imu_delay_status_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::localization_msgs::MsfSensorMsgStatus, imu_missing_status_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::localization_msgs::MsfSensorMsgStatus, imu_data_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::localization_msgs::MsfStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::localization_msgs::MsfStatus, local_lidar_consistency_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::localization_msgs::MsfStatus, gnss_consistency_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::localization_msgs::MsfStatus, local_lidar_status_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::localization_msgs::MsfStatus, local_lidar_quality_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::localization_msgs::MsfStatus, gnsspos_position_type_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::localization_msgs::MsfStatus, msf_running_status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openbot_bridge::localization_msgs::MsfSensorMsgStatus)},
  { 8, -1, sizeof(::openbot_bridge::localization_msgs::MsfStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::localization_msgs::_MsfSensorMsgStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::localization_msgs::_MsfStatus_default_instance_),
};

const char descriptor_table_protodef_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n:openbot_bridge/localization_msgs/local"
  "ization_status.proto\022 openbot_bridge.loc"
  "alization_msgs\"\203\002\n\022MsfSensorMsgStatus\022M\n"
  "\020imu_delay_status\030\001 \001(\01623.openbot_bridge"
  ".localization_msgs.ImuMsgDelayStatus\022Q\n\022"
  "imu_missing_status\030\002 \001(\01625.openbot_bridg"
  "e.localization_msgs.ImuMsgMissingStatus\022"
  "K\n\017imu_data_status\030\003 \001(\01622.openbot_bridg"
  "e.localization_msgs.ImuMsgDataStatus\"\367\003\n"
  "\tMsfStatus\022X\n\027local_lidar_consistency\030\001 "
  "\001(\01627.openbot_bridge.localization_msgs.L"
  "ocalLidarConsistency\022K\n\020gnss_consistency"
  "\030\002 \001(\01621.openbot_bridge.localization_msg"
  "s.GnssConsistency\022N\n\022local_lidar_status\030"
  "\003 \001(\01622.openbot_bridge.localization_msgs"
  ".LocalLidarStatus\022P\n\023local_lidar_quality"
  "\030\004 \001(\01623.openbot_bridge.localization_msg"
  "s.LocalLidarQuality\022Q\n\025gnsspos_position_"
  "type\030\005 \001(\01622.openbot_bridge.localization"
  "_msgs.GnssPositionType\022N\n\022msf_running_st"
  "atus\030\006 \001(\01622.openbot_bridge.localization"
  "_msgs.MsfRunningStatus*\242\002\n\020LocalLidarSta"
  "tus\022\032\n\026MSF_LOCAL_LIDAR_NORMAL\020\000\022\037\n\033MSF_L"
  "OCAL_LIDAR_MAP_MISSING\020\001\022&\n\"MSF_LOCAL_LI"
  "DAR_EXTRINSICS_MISSING\020\002\022&\n\"MSF_LOCAL_LI"
  "DAR_MAP_LOADING_FAILED\020\003\022\035\n\031MSF_LOCAL_LI"
  "DAR_NO_OUTPUT\020\004\022\036\n\032MSF_LOCAL_LIDAR_OUT_O"
  "F_MAP\020\005\022\034\n\030MSF_LOCAL_LIDAR_NOT_GOOD\020\006\022$\n"
  " MSF_LOCAL_LIDAR_UNDEFINED_STATUS\020\007*\202\001\n\021"
  "LocalLidarQuality\022\035\n\031MSF_LOCAL_LIDAR_VER"
  "Y_GOOD\020\000\022\030\n\024MSF_LOCAL_LIDAR_GOOD\020\001\022\033\n\027MS"
  "F_LOCAL_LIDAR_NOT_BAD\020\002\022\027\n\023MSF_LOCAL_LID"
  "AR_BAD\020\003*\247\001\n\025LocalLidarConsistency\022\"\n\036MS"
  "F_LOCAL_LIDAR_CONSISTENCY_00\020\000\022\"\n\036MSF_LO"
  "CAL_LIDAR_CONSISTENCY_01\020\001\022\"\n\036MSF_LOCAL_"
  "LIDAR_CONSISTENCY_02\020\002\022\"\n\036MSF_LOCAL_LIDA"
  "R_CONSISTENCY_03\020\003*\205\001\n\017GnssConsistency\022\033"
  "\n\027MSF_GNSS_CONSISTENCY_00\020\000\022\033\n\027MSF_GNSS_"
  "CONSISTENCY_01\020\001\022\033\n\027MSF_GNSS_CONSISTENCY"
  "_02\020\002\022\033\n\027MSF_GNSS_CONSISTENCY_03\020\003*\261\004\n\020G"
  "nssPositionType\022\010\n\004NONE\020\000\022\014\n\010FIXEDPOS\020\001\022"
  "\017\n\013FIXEDHEIGHT\020\002\022\r\n\tFLOATCONV\020\004\022\014\n\010WIDEL"
  "ANE\020\005\022\016\n\nNARROWLANE\020\006\022\024\n\020DOPPLER_VELOCIT"
  "Y\020\010\022\n\n\006SINGLE\020\020\022\013\n\007PSRDIFF\020\021\022\010\n\004WAAS\020\022\022\016"
  "\n\nPROPOGATED\020\023\022\014\n\010OMNISTAR\020\024\022\014\n\010L1_FLOAT"
  "\020 \022\022\n\016IONOFREE_FLOAT\020!\022\020\n\014NARROW_FLOAT\020\""
  "\022\n\n\006L1_INT\0200\022\014\n\010WIDE_INT\0201\022\016\n\nNARROW_INT"
  "\0202\022\022\n\016RTK_DIRECT_INS\0203\022\014\n\010INS_SBAS\0204\022\r\n\t"
  "INS_PSRSP\0205\022\017\n\013INS_PSRDIFF\0206\022\020\n\014INS_RTKF"
  "LOAT\0207\022\020\n\014INS_RTKFIXED\0208\022\020\n\014INS_OMNISTAR"
  "\0209\022\023\n\017INS_OMNISTAR_HP\020:\022\023\n\017INS_OMNISTAR_"
  "XP\020;\022\017\n\013OMNISTAR_HP\020@\022\017\n\013OMNISTAR_XP\020A\022\022"
  "\n\016PPP_CONVERGING\020D\022\007\n\003PPP\020E\022\026\n\022INS_PPP_C"
  "onverging\020I\022\013\n\007INS_PPP\020J\022\014\n\010MSG_LOSS\020[*t"
  "\n\021ImuMsgDelayStatus\022\024\n\020IMU_DELAY_NORMAL\020"
  "\000\022\017\n\013IMU_DELAY_1\020\001\022\017\n\013IMU_DELAY_2\020\002\022\017\n\013I"
  "MU_DELAY_3\020\003\022\026\n\022IMU_DELAY_ABNORMAL\020\004*\246\001\n"
  "\023ImuMsgMissingStatus\022\026\n\022IMU_MISSING_NORM"
  "AL\020\000\022\021\n\rIMU_MISSING_1\020\001\022\021\n\rIMU_MISSING_2"
  "\020\002\022\021\n\rIMU_MISSING_3\020\003\022\021\n\rIMU_MISSING_4\020\004"
  "\022\021\n\rIMU_MISSING_5\020\005\022\030\n\024IMU_MISSING_ABNOR"
  "MAL\020\006*R\n\020ImuMsgDataStatus\022\023\n\017IMU_DATA_NO"
  "RMAL\020\000\022\025\n\021IMU_DATA_ABNORMAL\020\001\022\022\n\016IMU_DAT"
  "A_OTHER\020\002*\254\004\n\020MsfRunningStatus\022\026\n\022MSF_SO"
  "L_LIDAR_GNSS\020\000\022\022\n\016MSF_SOL_X_GNSS\020\001\022\023\n\017MS"
  "F_SOL_LIDAR_X\020\002\022\024\n\020MSF_SOL_LIDAR_XX\020\003\022\025\n"
  "\021MSF_SOL_LIDAR_XXX\020\004\022\017\n\013MSF_SOL_X_X\020\005\022\020\n"
  "\014MSF_SOL_X_XX\020\006\022\021\n\rMSF_SOL_X_XXX\020\007\022\027\n\023MS"
  "F_SSOL_LIDAR_GNSS\020\010\022\023\n\017MSF_SSOL_X_GNSS\020\t"
  "\022\024\n\020MSF_SSOL_LIDAR_X\020\n\022\025\n\021MSF_SSOL_LIDAR"
  "_XX\020\013\022\026\n\022MSF_SSOL_LIDAR_XXX\020\014\022\020\n\014MSF_SSO"
  "L_X_X\020\r\022\021\n\rMSF_SSOL_X_XX\020\016\022\022\n\016MSF_SSOL_X"
  "_XXX\020\017\022\030\n\024MSF_NOSOL_LIDAR_GNSS\020\020\022\024\n\020MSF_"
  "NOSOL_X_GNSS\020\021\022\025\n\021MSF_NOSOL_LIDAR_X\020\022\022\026\n"
  "\022MSF_NOSOL_LIDAR_XX\020\023\022\027\n\023MSF_NOSOL_LIDAR"
  "_XXX\020\024\022\021\n\rMSF_NOSOL_X_X\020\025\022\022\n\016MSF_NOSOL_X"
  "_XX\020\026\022\023\n\017MSF_NOSOL_X_XXX\020\027\022\024\n\020MSF_RUNNIN"
  "G_INIT\020\030b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto_sccs[2] = {
  &scc_info_MsfSensorMsgStatus_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto.base,
  &scc_info_MsfStatus_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto = {
  false, false, descriptor_table_protodef_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto, "openbot_bridge/localization_msgs/localization_status.proto", 3096,
  &descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto_once, descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto_sccs, descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto::offsets,
  file_level_metadata_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto, 2, file_level_enum_descriptors_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto, file_level_service_descriptors_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto)), true);
namespace openbot_bridge {
namespace localization_msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalLidarStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto[0];
}
bool LocalLidarStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalLidarQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto[1];
}
bool LocalLidarQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalLidarConsistency_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto[2];
}
bool LocalLidarConsistency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GnssConsistency_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto[3];
}
bool GnssConsistency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GnssPositionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto[4];
}
bool GnssPositionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 8:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 32:
    case 33:
    case 34:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 64:
    case 65:
    case 68:
    case 69:
    case 73:
    case 74:
    case 91:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImuMsgDelayStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto[5];
}
bool ImuMsgDelayStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImuMsgMissingStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto[6];
}
bool ImuMsgMissingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImuMsgDataStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto[7];
}
bool ImuMsgDataStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsfRunningStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto[8];
}
bool MsfRunningStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MsfSensorMsgStatus::_Internal {
 public:
};

MsfSensorMsgStatus::MsfSensorMsgStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.localization_msgs.MsfSensorMsgStatus)
}
MsfSensorMsgStatus::MsfSensorMsgStatus(const MsfSensorMsgStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&imu_delay_status_, &from.imu_delay_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&imu_data_status_) -
    reinterpret_cast<char*>(&imu_delay_status_)) + sizeof(imu_data_status_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.localization_msgs.MsfSensorMsgStatus)
}

void MsfSensorMsgStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&imu_delay_status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&imu_data_status_) -
      reinterpret_cast<char*>(&imu_delay_status_)) + sizeof(imu_data_status_));
}

MsfSensorMsgStatus::~MsfSensorMsgStatus() {
  // @@protoc_insertion_point(destructor:openbot_bridge.localization_msgs.MsfSensorMsgStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsfSensorMsgStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsfSensorMsgStatus::ArenaDtor(void* object) {
  MsfSensorMsgStatus* _this = reinterpret_cast< MsfSensorMsgStatus* >(object);
  (void)_this;
}
void MsfSensorMsgStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsfSensorMsgStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsfSensorMsgStatus& MsfSensorMsgStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsfSensorMsgStatus_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void MsfSensorMsgStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.localization_msgs.MsfSensorMsgStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&imu_delay_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imu_data_status_) -
      reinterpret_cast<char*>(&imu_delay_status_)) + sizeof(imu_data_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsfSensorMsgStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.localization_msgs.ImuMsgDelayStatus imu_delay_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_imu_delay_status(static_cast<::openbot_bridge::localization_msgs::ImuMsgDelayStatus>(val));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.localization_msgs.ImuMsgMissingStatus imu_missing_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_imu_missing_status(static_cast<::openbot_bridge::localization_msgs::ImuMsgMissingStatus>(val));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.localization_msgs.ImuMsgDataStatus imu_data_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_imu_data_status(static_cast<::openbot_bridge::localization_msgs::ImuMsgDataStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsfSensorMsgStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.localization_msgs.MsfSensorMsgStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.localization_msgs.ImuMsgDelayStatus imu_delay_status = 1;
  if (this->imu_delay_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_imu_delay_status(), target);
  }

  // .openbot_bridge.localization_msgs.ImuMsgMissingStatus imu_missing_status = 2;
  if (this->imu_missing_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_imu_missing_status(), target);
  }

  // .openbot_bridge.localization_msgs.ImuMsgDataStatus imu_data_status = 3;
  if (this->imu_data_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_imu_data_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.localization_msgs.MsfSensorMsgStatus)
  return target;
}

size_t MsfSensorMsgStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.localization_msgs.MsfSensorMsgStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.localization_msgs.ImuMsgDelayStatus imu_delay_status = 1;
  if (this->imu_delay_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_imu_delay_status());
  }

  // .openbot_bridge.localization_msgs.ImuMsgMissingStatus imu_missing_status = 2;
  if (this->imu_missing_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_imu_missing_status());
  }

  // .openbot_bridge.localization_msgs.ImuMsgDataStatus imu_data_status = 3;
  if (this->imu_data_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_imu_data_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsfSensorMsgStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.localization_msgs.MsfSensorMsgStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MsfSensorMsgStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsfSensorMsgStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.localization_msgs.MsfSensorMsgStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.localization_msgs.MsfSensorMsgStatus)
    MergeFrom(*source);
  }
}

void MsfSensorMsgStatus::MergeFrom(const MsfSensorMsgStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.localization_msgs.MsfSensorMsgStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imu_delay_status() != 0) {
    _internal_set_imu_delay_status(from._internal_imu_delay_status());
  }
  if (from.imu_missing_status() != 0) {
    _internal_set_imu_missing_status(from._internal_imu_missing_status());
  }
  if (from.imu_data_status() != 0) {
    _internal_set_imu_data_status(from._internal_imu_data_status());
  }
}

void MsfSensorMsgStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.localization_msgs.MsfSensorMsgStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsfSensorMsgStatus::CopyFrom(const MsfSensorMsgStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.localization_msgs.MsfSensorMsgStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsfSensorMsgStatus::IsInitialized() const {
  return true;
}

void MsfSensorMsgStatus::InternalSwap(MsfSensorMsgStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsfSensorMsgStatus, imu_data_status_)
      + sizeof(MsfSensorMsgStatus::imu_data_status_)
      - PROTOBUF_FIELD_OFFSET(MsfSensorMsgStatus, imu_delay_status_)>(
          reinterpret_cast<char*>(&imu_delay_status_),
          reinterpret_cast<char*>(&other->imu_delay_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsfSensorMsgStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsfStatus::_Internal {
 public:
};

MsfStatus::MsfStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.localization_msgs.MsfStatus)
}
MsfStatus::MsfStatus(const MsfStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&local_lidar_consistency_, &from.local_lidar_consistency_,
    static_cast<size_t>(reinterpret_cast<char*>(&msf_running_status_) -
    reinterpret_cast<char*>(&local_lidar_consistency_)) + sizeof(msf_running_status_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.localization_msgs.MsfStatus)
}

void MsfStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&local_lidar_consistency_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&msf_running_status_) -
      reinterpret_cast<char*>(&local_lidar_consistency_)) + sizeof(msf_running_status_));
}

MsfStatus::~MsfStatus() {
  // @@protoc_insertion_point(destructor:openbot_bridge.localization_msgs.MsfStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsfStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsfStatus::ArenaDtor(void* object) {
  MsfStatus* _this = reinterpret_cast< MsfStatus* >(object);
  (void)_this;
}
void MsfStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsfStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsfStatus& MsfStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsfStatus_openbot_5fbridge_2flocalization_5fmsgs_2flocalization_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void MsfStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.localization_msgs.MsfStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&local_lidar_consistency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msf_running_status_) -
      reinterpret_cast<char*>(&local_lidar_consistency_)) + sizeof(msf_running_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsfStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.localization_msgs.LocalLidarConsistency local_lidar_consistency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_local_lidar_consistency(static_cast<::openbot_bridge::localization_msgs::LocalLidarConsistency>(val));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.localization_msgs.GnssConsistency gnss_consistency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gnss_consistency(static_cast<::openbot_bridge::localization_msgs::GnssConsistency>(val));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.localization_msgs.LocalLidarStatus local_lidar_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_local_lidar_status(static_cast<::openbot_bridge::localization_msgs::LocalLidarStatus>(val));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.localization_msgs.LocalLidarQuality local_lidar_quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_local_lidar_quality(static_cast<::openbot_bridge::localization_msgs::LocalLidarQuality>(val));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.localization_msgs.GnssPositionType gnsspos_position_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gnsspos_position_type(static_cast<::openbot_bridge::localization_msgs::GnssPositionType>(val));
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.localization_msgs.MsfRunningStatus msf_running_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msf_running_status(static_cast<::openbot_bridge::localization_msgs::MsfRunningStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsfStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.localization_msgs.MsfStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.localization_msgs.LocalLidarConsistency local_lidar_consistency = 1;
  if (this->local_lidar_consistency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_local_lidar_consistency(), target);
  }

  // .openbot_bridge.localization_msgs.GnssConsistency gnss_consistency = 2;
  if (this->gnss_consistency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gnss_consistency(), target);
  }

  // .openbot_bridge.localization_msgs.LocalLidarStatus local_lidar_status = 3;
  if (this->local_lidar_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_local_lidar_status(), target);
  }

  // .openbot_bridge.localization_msgs.LocalLidarQuality local_lidar_quality = 4;
  if (this->local_lidar_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_local_lidar_quality(), target);
  }

  // .openbot_bridge.localization_msgs.GnssPositionType gnsspos_position_type = 5;
  if (this->gnsspos_position_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_gnsspos_position_type(), target);
  }

  // .openbot_bridge.localization_msgs.MsfRunningStatus msf_running_status = 6;
  if (this->msf_running_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_msf_running_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.localization_msgs.MsfStatus)
  return target;
}

size_t MsfStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.localization_msgs.MsfStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.localization_msgs.LocalLidarConsistency local_lidar_consistency = 1;
  if (this->local_lidar_consistency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_local_lidar_consistency());
  }

  // .openbot_bridge.localization_msgs.GnssConsistency gnss_consistency = 2;
  if (this->gnss_consistency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gnss_consistency());
  }

  // .openbot_bridge.localization_msgs.LocalLidarStatus local_lidar_status = 3;
  if (this->local_lidar_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_local_lidar_status());
  }

  // .openbot_bridge.localization_msgs.LocalLidarQuality local_lidar_quality = 4;
  if (this->local_lidar_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_local_lidar_quality());
  }

  // .openbot_bridge.localization_msgs.GnssPositionType gnsspos_position_type = 5;
  if (this->gnsspos_position_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gnsspos_position_type());
  }

  // .openbot_bridge.localization_msgs.MsfRunningStatus msf_running_status = 6;
  if (this->msf_running_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msf_running_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsfStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.localization_msgs.MsfStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MsfStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsfStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.localization_msgs.MsfStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.localization_msgs.MsfStatus)
    MergeFrom(*source);
  }
}

void MsfStatus::MergeFrom(const MsfStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.localization_msgs.MsfStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_lidar_consistency() != 0) {
    _internal_set_local_lidar_consistency(from._internal_local_lidar_consistency());
  }
  if (from.gnss_consistency() != 0) {
    _internal_set_gnss_consistency(from._internal_gnss_consistency());
  }
  if (from.local_lidar_status() != 0) {
    _internal_set_local_lidar_status(from._internal_local_lidar_status());
  }
  if (from.local_lidar_quality() != 0) {
    _internal_set_local_lidar_quality(from._internal_local_lidar_quality());
  }
  if (from.gnsspos_position_type() != 0) {
    _internal_set_gnsspos_position_type(from._internal_gnsspos_position_type());
  }
  if (from.msf_running_status() != 0) {
    _internal_set_msf_running_status(from._internal_msf_running_status());
  }
}

void MsfStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.localization_msgs.MsfStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsfStatus::CopyFrom(const MsfStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.localization_msgs.MsfStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsfStatus::IsInitialized() const {
  return true;
}

void MsfStatus::InternalSwap(MsfStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsfStatus, msf_running_status_)
      + sizeof(MsfStatus::msf_running_status_)
      - PROTOBUF_FIELD_OFFSET(MsfStatus, local_lidar_consistency_)>(
          reinterpret_cast<char*>(&local_lidar_consistency_),
          reinterpret_cast<char*>(&other->local_lidar_consistency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsfStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace localization_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openbot_bridge::localization_msgs::MsfSensorMsgStatus* Arena::CreateMaybeMessage< ::openbot_bridge::localization_msgs::MsfSensorMsgStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::localization_msgs::MsfSensorMsgStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::localization_msgs::MsfStatus* Arena::CreateMaybeMessage< ::openbot_bridge::localization_msgs::MsfStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::localization_msgs::MsfStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
