// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/sensor_msgs/heading.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fsensor_5fmsgs_2fheading_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fsensor_5fmsgs_2fheading_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "openbot_bridge/basic_msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fsensor_5fmsgs_2fheading_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openbot_5fbridge_2fsensor_5fmsgs_2fheading_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fheading_2eproto;
namespace openbot_bridge {
namespace sensor_msgs {
class Heading;
class HeadingDefaultTypeInternal;
extern HeadingDefaultTypeInternal _Heading_default_instance_;
}  // namespace sensor_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::openbot_bridge::sensor_msgs::Heading* Arena::CreateMaybeMessage<::openbot_bridge::sensor_msgs::Heading>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openbot_bridge {
namespace sensor_msgs {

// ===================================================================

class Heading PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.sensor_msgs.Heading) */ {
 public:
  inline Heading() : Heading(nullptr) {}
  virtual ~Heading();

  Heading(const Heading& from);
  Heading(Heading&& from) noexcept
    : Heading() {
    *this = ::std::move(from);
  }

  inline Heading& operator=(const Heading& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heading& operator=(Heading&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Heading& default_instance();

  static inline const Heading* internal_default_instance() {
    return reinterpret_cast<const Heading*>(
               &_Heading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Heading& a, Heading& b) {
    a.Swap(&b);
  }
  inline void Swap(Heading* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Heading* New() const final {
    return CreateMaybeMessage<Heading>(nullptr);
  }

  Heading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Heading>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Heading& from);
  void MergeFrom(const Heading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.sensor_msgs.Heading";
  }
  protected:
  explicit Heading(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fheading_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fheading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationIdFieldNumber = 11,
    kHeaderFieldNumber = 1,
    kMeasurementTimeFieldNumber = 2,
    kSolutionStatusFieldNumber = 3,
    kPositionTypeFieldNumber = 4,
    kBaselineLengthFieldNumber = 5,
    kHeadingFieldNumber = 6,
    kPitchFieldNumber = 7,
    kReservedFieldNumber = 8,
    kHeadingStdDevFieldNumber = 9,
    kPitchStdDevFieldNumber = 10,
    kSatelliteTrackedNumberFieldNumber = 12,
    kSatelliteSoulutionNumberFieldNumber = 13,
    kSatelliteNumberObsFieldNumber = 14,
    kSatelliteNumberMultiFieldNumber = 15,
    kSolutionSourceFieldNumber = 16,
    kExtendedSolutionStatusFieldNumber = 17,
    kGalileoBeidouSigMaskFieldNumber = 18,
    kGpsGlonassSigMaskFieldNumber = 19,
  };
  // bytes station_id = 11;
  void clear_station_id();
  const std::string& station_id() const;
  void set_station_id(const std::string& value);
  void set_station_id(std::string&& value);
  void set_station_id(const char* value);
  void set_station_id(const void* value, size_t size);
  std::string* mutable_station_id();
  std::string* release_station_id();
  void set_allocated_station_id(std::string* station_id);
  private:
  const std::string& _internal_station_id() const;
  void _internal_set_station_id(const std::string& value);
  std::string* _internal_mutable_station_id();
  public:

  // .openbot_bridge.basic_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::basic_msgs::Header& header() const;
  ::openbot_bridge::basic_msgs::Header* release_header();
  ::openbot_bridge::basic_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::basic_msgs::Header* header);
  private:
  const ::openbot_bridge::basic_msgs::Header& _internal_header() const;
  ::openbot_bridge::basic_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::basic_msgs::Header* header);
  ::openbot_bridge::basic_msgs::Header* unsafe_arena_release_header();

  // double measurement_time = 2;
  void clear_measurement_time();
  double measurement_time() const;
  void set_measurement_time(double value);
  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);
  public:

  // uint32 solution_status = 3;
  void clear_solution_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 solution_status() const;
  void set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_solution_status() const;
  void _internal_set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 position_type = 4;
  void clear_position_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 position_type() const;
  void set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position_type() const;
  void _internal_set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float baseline_length = 5;
  void clear_baseline_length();
  float baseline_length() const;
  void set_baseline_length(float value);
  private:
  float _internal_baseline_length() const;
  void _internal_set_baseline_length(float value);
  public:

  // float heading = 6;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // float pitch = 7;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float reserved = 8;
  void clear_reserved();
  float reserved() const;
  void set_reserved(float value);
  private:
  float _internal_reserved() const;
  void _internal_set_reserved(float value);
  public:

  // float heading_std_dev = 9;
  void clear_heading_std_dev();
  float heading_std_dev() const;
  void set_heading_std_dev(float value);
  private:
  float _internal_heading_std_dev() const;
  void _internal_set_heading_std_dev(float value);
  public:

  // float pitch_std_dev = 10;
  void clear_pitch_std_dev();
  float pitch_std_dev() const;
  void set_pitch_std_dev(float value);
  private:
  float _internal_pitch_std_dev() const;
  void _internal_set_pitch_std_dev(float value);
  public:

  // uint32 satellite_tracked_number = 12;
  void clear_satellite_tracked_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 satellite_tracked_number() const;
  void set_satellite_tracked_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_satellite_tracked_number() const;
  void _internal_set_satellite_tracked_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 satellite_soulution_number = 13;
  void clear_satellite_soulution_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 satellite_soulution_number() const;
  void set_satellite_soulution_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_satellite_soulution_number() const;
  void _internal_set_satellite_soulution_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 satellite_number_obs = 14;
  void clear_satellite_number_obs();
  ::PROTOBUF_NAMESPACE_ID::uint32 satellite_number_obs() const;
  void set_satellite_number_obs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_satellite_number_obs() const;
  void _internal_set_satellite_number_obs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 satellite_number_multi = 15;
  void clear_satellite_number_multi();
  ::PROTOBUF_NAMESPACE_ID::uint32 satellite_number_multi() const;
  void set_satellite_number_multi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_satellite_number_multi() const;
  void _internal_set_satellite_number_multi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 solution_source = 16;
  void clear_solution_source();
  ::PROTOBUF_NAMESPACE_ID::uint32 solution_source() const;
  void set_solution_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_solution_source() const;
  void _internal_set_solution_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 extended_solution_status = 17;
  void clear_extended_solution_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 extended_solution_status() const;
  void set_extended_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_extended_solution_status() const;
  void _internal_set_extended_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 galileo_beidou_sig_mask = 18;
  void clear_galileo_beidou_sig_mask();
  ::PROTOBUF_NAMESPACE_ID::uint32 galileo_beidou_sig_mask() const;
  void set_galileo_beidou_sig_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_galileo_beidou_sig_mask() const;
  void _internal_set_galileo_beidou_sig_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gps_glonass_sig_mask = 19;
  void clear_gps_glonass_sig_mask();
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_glonass_sig_mask() const;
  void set_gps_glonass_sig_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gps_glonass_sig_mask() const;
  void _internal_set_gps_glonass_sig_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.sensor_msgs.Heading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr station_id_;
  ::openbot_bridge::basic_msgs::Header* header_;
  double measurement_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 solution_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_type_;
  float baseline_length_;
  float heading_;
  float pitch_;
  float reserved_;
  float heading_std_dev_;
  float pitch_std_dev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 satellite_tracked_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 satellite_soulution_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 satellite_number_obs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 satellite_number_multi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 solution_source_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extended_solution_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 galileo_beidou_sig_mask_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_glonass_sig_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fsensor_5fmsgs_2fheading_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Heading

// .openbot_bridge.basic_msgs.Header header = 1;
inline bool Heading::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Heading::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::basic_msgs::Header& Heading::_internal_header() const {
  const ::openbot_bridge::basic_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::basic_msgs::Header&>(
      ::openbot_bridge::basic_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::basic_msgs::Header& Heading::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.header)
  return _internal_header();
}
inline void Heading::unsafe_arena_set_allocated_header(
    ::openbot_bridge::basic_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.sensor_msgs.Heading.header)
}
inline ::openbot_bridge::basic_msgs::Header* Heading::release_header() {
  
  ::openbot_bridge::basic_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::basic_msgs::Header* Heading::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.sensor_msgs.Heading.header)
  
  ::openbot_bridge::basic_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::basic_msgs::Header* Heading::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::basic_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::basic_msgs::Header* Heading::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.sensor_msgs.Heading.header)
  return _internal_mutable_header();
}
inline void Heading::set_allocated_header(::openbot_bridge::basic_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.sensor_msgs.Heading.header)
}

// double measurement_time = 2;
inline void Heading::clear_measurement_time() {
  measurement_time_ = 0;
}
inline double Heading::_internal_measurement_time() const {
  return measurement_time_;
}
inline double Heading::measurement_time() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.measurement_time)
  return _internal_measurement_time();
}
inline void Heading::_internal_set_measurement_time(double value) {
  
  measurement_time_ = value;
}
inline void Heading::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.measurement_time)
}

// uint32 solution_status = 3;
inline void Heading::clear_solution_status() {
  solution_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::_internal_solution_status() const {
  return solution_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::solution_status() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.solution_status)
  return _internal_solution_status();
}
inline void Heading::_internal_set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  solution_status_ = value;
}
inline void Heading::set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_solution_status(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.solution_status)
}

// uint32 position_type = 4;
inline void Heading::clear_position_type() {
  position_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::_internal_position_type() const {
  return position_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::position_type() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.position_type)
  return _internal_position_type();
}
inline void Heading::_internal_set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  position_type_ = value;
}
inline void Heading::set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position_type(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.position_type)
}

// float baseline_length = 5;
inline void Heading::clear_baseline_length() {
  baseline_length_ = 0;
}
inline float Heading::_internal_baseline_length() const {
  return baseline_length_;
}
inline float Heading::baseline_length() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.baseline_length)
  return _internal_baseline_length();
}
inline void Heading::_internal_set_baseline_length(float value) {
  
  baseline_length_ = value;
}
inline void Heading::set_baseline_length(float value) {
  _internal_set_baseline_length(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.baseline_length)
}

// float heading = 6;
inline void Heading::clear_heading() {
  heading_ = 0;
}
inline float Heading::_internal_heading() const {
  return heading_;
}
inline float Heading::heading() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.heading)
  return _internal_heading();
}
inline void Heading::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void Heading::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.heading)
}

// float pitch = 7;
inline void Heading::clear_pitch() {
  pitch_ = 0;
}
inline float Heading::_internal_pitch() const {
  return pitch_;
}
inline float Heading::pitch() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.pitch)
  return _internal_pitch();
}
inline void Heading::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void Heading::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.pitch)
}

// float reserved = 8;
inline void Heading::clear_reserved() {
  reserved_ = 0;
}
inline float Heading::_internal_reserved() const {
  return reserved_;
}
inline float Heading::reserved() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.reserved)
  return _internal_reserved();
}
inline void Heading::_internal_set_reserved(float value) {
  
  reserved_ = value;
}
inline void Heading::set_reserved(float value) {
  _internal_set_reserved(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.reserved)
}

// float heading_std_dev = 9;
inline void Heading::clear_heading_std_dev() {
  heading_std_dev_ = 0;
}
inline float Heading::_internal_heading_std_dev() const {
  return heading_std_dev_;
}
inline float Heading::heading_std_dev() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.heading_std_dev)
  return _internal_heading_std_dev();
}
inline void Heading::_internal_set_heading_std_dev(float value) {
  
  heading_std_dev_ = value;
}
inline void Heading::set_heading_std_dev(float value) {
  _internal_set_heading_std_dev(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.heading_std_dev)
}

// float pitch_std_dev = 10;
inline void Heading::clear_pitch_std_dev() {
  pitch_std_dev_ = 0;
}
inline float Heading::_internal_pitch_std_dev() const {
  return pitch_std_dev_;
}
inline float Heading::pitch_std_dev() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.pitch_std_dev)
  return _internal_pitch_std_dev();
}
inline void Heading::_internal_set_pitch_std_dev(float value) {
  
  pitch_std_dev_ = value;
}
inline void Heading::set_pitch_std_dev(float value) {
  _internal_set_pitch_std_dev(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.pitch_std_dev)
}

// bytes station_id = 11;
inline void Heading::clear_station_id() {
  station_id_.ClearToEmpty();
}
inline const std::string& Heading::station_id() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.station_id)
  return _internal_station_id();
}
inline void Heading::set_station_id(const std::string& value) {
  _internal_set_station_id(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.station_id)
}
inline std::string* Heading::mutable_station_id() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.sensor_msgs.Heading.station_id)
  return _internal_mutable_station_id();
}
inline const std::string& Heading::_internal_station_id() const {
  return station_id_.Get();
}
inline void Heading::_internal_set_station_id(const std::string& value) {
  
  station_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Heading::set_station_id(std::string&& value) {
  
  station_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.sensor_msgs.Heading.station_id)
}
inline void Heading::set_station_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  station_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.sensor_msgs.Heading.station_id)
}
inline void Heading::set_station_id(const void* value,
    size_t size) {
  
  station_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.sensor_msgs.Heading.station_id)
}
inline std::string* Heading::_internal_mutable_station_id() {
  
  return station_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Heading::release_station_id() {
  // @@protoc_insertion_point(field_release:openbot_bridge.sensor_msgs.Heading.station_id)
  return station_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Heading::set_allocated_station_id(std::string* station_id) {
  if (station_id != nullptr) {
    
  } else {
    
  }
  station_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), station_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.sensor_msgs.Heading.station_id)
}

// uint32 satellite_tracked_number = 12;
inline void Heading::clear_satellite_tracked_number() {
  satellite_tracked_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::_internal_satellite_tracked_number() const {
  return satellite_tracked_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::satellite_tracked_number() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.satellite_tracked_number)
  return _internal_satellite_tracked_number();
}
inline void Heading::_internal_set_satellite_tracked_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  satellite_tracked_number_ = value;
}
inline void Heading::set_satellite_tracked_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_satellite_tracked_number(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.satellite_tracked_number)
}

// uint32 satellite_soulution_number = 13;
inline void Heading::clear_satellite_soulution_number() {
  satellite_soulution_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::_internal_satellite_soulution_number() const {
  return satellite_soulution_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::satellite_soulution_number() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.satellite_soulution_number)
  return _internal_satellite_soulution_number();
}
inline void Heading::_internal_set_satellite_soulution_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  satellite_soulution_number_ = value;
}
inline void Heading::set_satellite_soulution_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_satellite_soulution_number(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.satellite_soulution_number)
}

// uint32 satellite_number_obs = 14;
inline void Heading::clear_satellite_number_obs() {
  satellite_number_obs_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::_internal_satellite_number_obs() const {
  return satellite_number_obs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::satellite_number_obs() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.satellite_number_obs)
  return _internal_satellite_number_obs();
}
inline void Heading::_internal_set_satellite_number_obs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  satellite_number_obs_ = value;
}
inline void Heading::set_satellite_number_obs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_satellite_number_obs(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.satellite_number_obs)
}

// uint32 satellite_number_multi = 15;
inline void Heading::clear_satellite_number_multi() {
  satellite_number_multi_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::_internal_satellite_number_multi() const {
  return satellite_number_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::satellite_number_multi() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.satellite_number_multi)
  return _internal_satellite_number_multi();
}
inline void Heading::_internal_set_satellite_number_multi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  satellite_number_multi_ = value;
}
inline void Heading::set_satellite_number_multi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_satellite_number_multi(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.satellite_number_multi)
}

// uint32 solution_source = 16;
inline void Heading::clear_solution_source() {
  solution_source_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::_internal_solution_source() const {
  return solution_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::solution_source() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.solution_source)
  return _internal_solution_source();
}
inline void Heading::_internal_set_solution_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  solution_source_ = value;
}
inline void Heading::set_solution_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_solution_source(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.solution_source)
}

// uint32 extended_solution_status = 17;
inline void Heading::clear_extended_solution_status() {
  extended_solution_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::_internal_extended_solution_status() const {
  return extended_solution_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::extended_solution_status() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.extended_solution_status)
  return _internal_extended_solution_status();
}
inline void Heading::_internal_set_extended_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  extended_solution_status_ = value;
}
inline void Heading::set_extended_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_extended_solution_status(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.extended_solution_status)
}

// uint32 galileo_beidou_sig_mask = 18;
inline void Heading::clear_galileo_beidou_sig_mask() {
  galileo_beidou_sig_mask_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::_internal_galileo_beidou_sig_mask() const {
  return galileo_beidou_sig_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::galileo_beidou_sig_mask() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.galileo_beidou_sig_mask)
  return _internal_galileo_beidou_sig_mask();
}
inline void Heading::_internal_set_galileo_beidou_sig_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  galileo_beidou_sig_mask_ = value;
}
inline void Heading::set_galileo_beidou_sig_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_galileo_beidou_sig_mask(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.galileo_beidou_sig_mask)
}

// uint32 gps_glonass_sig_mask = 19;
inline void Heading::clear_gps_glonass_sig_mask() {
  gps_glonass_sig_mask_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::_internal_gps_glonass_sig_mask() const {
  return gps_glonass_sig_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::gps_glonass_sig_mask() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Heading.gps_glonass_sig_mask)
  return _internal_gps_glonass_sig_mask();
}
inline void Heading::_internal_set_gps_glonass_sig_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gps_glonass_sig_mask_ = value;
}
inline void Heading::set_gps_glonass_sig_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gps_glonass_sig_mask(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Heading.gps_glonass_sig_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sensor_msgs
}  // namespace openbot_bridge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fsensor_5fmsgs_2fheading_2eproto
