// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/sensor_msgs/gnss.proto

#include "openbot_bridge/sensor_msgs/gnss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_openbot_5fbridge_2fbasic_5fmsgs_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointLLH_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto;
namespace openbot_bridge {
namespace sensor_msgs {
class GnssDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gnss> _instance;
} _Gnss_default_instance_;
class RawDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawData> _instance;
} _RawData_default_instance_;
}  // namespace sensor_msgs
}  // namespace openbot_bridge
static void InitDefaultsscc_info_Gnss_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::sensor_msgs::_Gnss_default_instance_;
    new (ptr) ::openbot_bridge::sensor_msgs::Gnss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Gnss_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Gnss_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fbasic_5fmsgs_2fheader_2eproto.base,
      &scc_info_PointLLH_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto.base,
      &scc_info_Point3D_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_RawData_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::sensor_msgs::_RawData_default_instance_;
    new (ptr) ::openbot_bridge::sensor_msgs::RawData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawData_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawData_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto}, {
      &scc_info_Header_openbot_5fbridge_2fbasic_5fmsgs_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::Gnss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::Gnss, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::Gnss, measurement_time_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::Gnss, velocity_latency_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::Gnss, position_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::Gnss, position_std_dev_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::Gnss, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::Gnss, linear_velocity_std_dev_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::Gnss, num_sats_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::Gnss, type_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::Gnss, solution_status_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::Gnss, position_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::RawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::RawData, header_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::sensor_msgs::RawData, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openbot_bridge::sensor_msgs::Gnss)},
  { 16, -1, sizeof(::openbot_bridge::sensor_msgs::RawData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::sensor_msgs::_Gnss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::sensor_msgs::_RawData_default_instance_),
};

const char descriptor_table_protodef_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%openbot_bridge/sensor_msgs/gnss.proto\022"
  "\032openbot_bridge.sensor_msgs\032(openbot_bri"
  "dge/basic_msgs/geometry.proto\032&openbot_b"
  "ridge/basic_msgs/header.proto\"\302\004\n\004Gnss\0221"
  "\n\006header\030\001 \001(\0132!.openbot_bridge.basic_ms"
  "gs.Header\022\030\n\020measurement_time\030\002 \001(\001\022\030\n\020v"
  "elocity_latency\030\003 \001(\002\0225\n\010position\030\004 \001(\0132"
  "#.openbot_bridge.basic_msgs.PointLLH\022<\n\020"
  "position_std_dev\030\005 \001(\0132\".openbot_bridge."
  "basic_msgs.Point3D\022;\n\017linear_velocity\030\006 "
  "\001(\0132\".openbot_bridge.basic_msgs.Point3D\022"
  "C\n\027linear_velocity_std_dev\030\007 \001(\0132\".openb"
  "ot_bridge.basic_msgs.Point3D\022\020\n\010num_sats"
  "\030\010 \001(\005\0223\n\004type\030\t \001(\0162%.openbot_bridge.se"
  "nsor_msgs.Gnss.Type\022\027\n\017solution_status\030\n"
  " \001(\r\022\025\n\rposition_type\030\013 \001(\r\"e\n\004Type\022\013\n\007I"
  "NVALID\020\000\022\016\n\nPROPAGATED\020\001\022\n\n\006SINGLE\020\002\022\013\n\007"
  "PSRDIFF\020\003\022\007\n\003PPP\020\004\022\r\n\tRTK_FLOAT\020\005\022\017\n\013RTK"
  "_INTEGER\020\006\"J\n\007RawData\0221\n\006header\030\001 \001(\0132!."
  "openbot_bridge.basic_msgs.Header\022\014\n\004data"
  "\030\002 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto_deps[2] = {
  &::descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fgeometry_2eproto,
  &::descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto_sccs[2] = {
  &scc_info_Gnss_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto.base,
  &scc_info_RawData_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto = {
  false, false, descriptor_table_protodef_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto, "openbot_bridge/sensor_msgs/gnss.proto", 814,
  &descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto_once, descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto_sccs, descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto::offsets,
  file_level_metadata_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto, 2, file_level_enum_descriptors_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto, file_level_service_descriptors_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto)), true);
namespace openbot_bridge {
namespace sensor_msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gnss_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto[0];
}
bool Gnss_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Gnss_Type Gnss::INVALID;
constexpr Gnss_Type Gnss::PROPAGATED;
constexpr Gnss_Type Gnss::SINGLE;
constexpr Gnss_Type Gnss::PSRDIFF;
constexpr Gnss_Type Gnss::PPP;
constexpr Gnss_Type Gnss::RTK_FLOAT;
constexpr Gnss_Type Gnss::RTK_INTEGER;
constexpr Gnss_Type Gnss::Type_MIN;
constexpr Gnss_Type Gnss::Type_MAX;
constexpr int Gnss::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Gnss::_Internal {
 public:
  static const ::openbot_bridge::basic_msgs::Header& header(const Gnss* msg);
  static const ::openbot_bridge::basic_msgs::PointLLH& position(const Gnss* msg);
  static const ::openbot_bridge::basic_msgs::Point3D& position_std_dev(const Gnss* msg);
  static const ::openbot_bridge::basic_msgs::Point3D& linear_velocity(const Gnss* msg);
  static const ::openbot_bridge::basic_msgs::Point3D& linear_velocity_std_dev(const Gnss* msg);
};

const ::openbot_bridge::basic_msgs::Header&
Gnss::_Internal::header(const Gnss* msg) {
  return *msg->header_;
}
const ::openbot_bridge::basic_msgs::PointLLH&
Gnss::_Internal::position(const Gnss* msg) {
  return *msg->position_;
}
const ::openbot_bridge::basic_msgs::Point3D&
Gnss::_Internal::position_std_dev(const Gnss* msg) {
  return *msg->position_std_dev_;
}
const ::openbot_bridge::basic_msgs::Point3D&
Gnss::_Internal::linear_velocity(const Gnss* msg) {
  return *msg->linear_velocity_;
}
const ::openbot_bridge::basic_msgs::Point3D&
Gnss::_Internal::linear_velocity_std_dev(const Gnss* msg) {
  return *msg->linear_velocity_std_dev_;
}
void Gnss::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void Gnss::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Gnss::clear_position_std_dev() {
  if (GetArena() == nullptr && position_std_dev_ != nullptr) {
    delete position_std_dev_;
  }
  position_std_dev_ = nullptr;
}
void Gnss::clear_linear_velocity() {
  if (GetArena() == nullptr && linear_velocity_ != nullptr) {
    delete linear_velocity_;
  }
  linear_velocity_ = nullptr;
}
void Gnss::clear_linear_velocity_std_dev() {
  if (GetArena() == nullptr && linear_velocity_std_dev_ != nullptr) {
    delete linear_velocity_std_dev_;
  }
  linear_velocity_std_dev_ = nullptr;
}
Gnss::Gnss(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.sensor_msgs.Gnss)
}
Gnss::Gnss(const Gnss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::basic_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::openbot_bridge::basic_msgs::PointLLH(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_position_std_dev()) {
    position_std_dev_ = new ::openbot_bridge::basic_msgs::Point3D(*from.position_std_dev_);
  } else {
    position_std_dev_ = nullptr;
  }
  if (from._internal_has_linear_velocity()) {
    linear_velocity_ = new ::openbot_bridge::basic_msgs::Point3D(*from.linear_velocity_);
  } else {
    linear_velocity_ = nullptr;
  }
  if (from._internal_has_linear_velocity_std_dev()) {
    linear_velocity_std_dev_ = new ::openbot_bridge::basic_msgs::Point3D(*from.linear_velocity_std_dev_);
  } else {
    linear_velocity_std_dev_ = nullptr;
  }
  ::memcpy(&measurement_time_, &from.measurement_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_type_) -
    reinterpret_cast<char*>(&measurement_time_)) + sizeof(position_type_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.sensor_msgs.Gnss)
}

void Gnss::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Gnss_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&position_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(position_type_));
}

Gnss::~Gnss() {
  // @@protoc_insertion_point(destructor:openbot_bridge.sensor_msgs.Gnss)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Gnss::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete position_std_dev_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete linear_velocity_std_dev_;
}

void Gnss::ArenaDtor(void* object) {
  Gnss* _this = reinterpret_cast< Gnss* >(object);
  (void)_this;
}
void Gnss::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Gnss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gnss& Gnss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gnss_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto.base);
  return *internal_default_instance();
}


void Gnss::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.sensor_msgs.Gnss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && position_std_dev_ != nullptr) {
    delete position_std_dev_;
  }
  position_std_dev_ = nullptr;
  if (GetArena() == nullptr && linear_velocity_ != nullptr) {
    delete linear_velocity_;
  }
  linear_velocity_ = nullptr;
  if (GetArena() == nullptr && linear_velocity_std_dev_ != nullptr) {
    delete linear_velocity_std_dev_;
  }
  linear_velocity_std_dev_ = nullptr;
  ::memset(&measurement_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_type_) -
      reinterpret_cast<char*>(&measurement_time_)) + sizeof(position_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gnss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.basic_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double measurement_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float velocity_latency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          velocity_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.PointLLH position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.Point3D position_std_dev = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_std_dev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.Point3D linear_velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.Point3D linear_velocity_std_dev = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity_std_dev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_sats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_sats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.sensor_msgs.Gnss.Type type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::openbot_bridge::sensor_msgs::Gnss_Type>(val));
        } else goto handle_unusual;
        continue;
      // uint32 solution_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          solution_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 position_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          position_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gnss::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.sensor_msgs.Gnss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // double measurement_time = 2;
  if (!(this->measurement_time() <= 0 && this->measurement_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_measurement_time(), target);
  }

  // float velocity_latency = 3;
  if (!(this->velocity_latency() <= 0 && this->velocity_latency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_velocity_latency(), target);
  }

  // .openbot_bridge.basic_msgs.PointLLH position = 4;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  // .openbot_bridge.basic_msgs.Point3D position_std_dev = 5;
  if (this->has_position_std_dev()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::position_std_dev(this), target, stream);
  }

  // .openbot_bridge.basic_msgs.Point3D linear_velocity = 6;
  if (this->has_linear_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::linear_velocity(this), target, stream);
  }

  // .openbot_bridge.basic_msgs.Point3D linear_velocity_std_dev = 7;
  if (this->has_linear_velocity_std_dev()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::linear_velocity_std_dev(this), target, stream);
  }

  // int32 num_sats = 8;
  if (this->num_sats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_sats(), target);
  }

  // .openbot_bridge.sensor_msgs.Gnss.Type type = 9;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  // uint32 solution_status = 10;
  if (this->solution_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_solution_status(), target);
  }

  // uint32 position_type = 11;
  if (this->position_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_position_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.sensor_msgs.Gnss)
  return target;
}

size_t Gnss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.sensor_msgs.Gnss)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .openbot_bridge.basic_msgs.PointLLH position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .openbot_bridge.basic_msgs.Point3D position_std_dev = 5;
  if (this->has_position_std_dev()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_std_dev_);
  }

  // .openbot_bridge.basic_msgs.Point3D linear_velocity = 6;
  if (this->has_linear_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_velocity_);
  }

  // .openbot_bridge.basic_msgs.Point3D linear_velocity_std_dev = 7;
  if (this->has_linear_velocity_std_dev()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_velocity_std_dev_);
  }

  // double measurement_time = 2;
  if (!(this->measurement_time() <= 0 && this->measurement_time() >= 0)) {
    total_size += 1 + 8;
  }

  // float velocity_latency = 3;
  if (!(this->velocity_latency() <= 0 && this->velocity_latency() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 num_sats = 8;
  if (this->num_sats() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_sats());
  }

  // .openbot_bridge.sensor_msgs.Gnss.Type type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 solution_status = 10;
  if (this->solution_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_solution_status());
  }

  // uint32 position_type = 11;
  if (this->position_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gnss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.sensor_msgs.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  const Gnss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gnss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.sensor_msgs.Gnss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.sensor_msgs.Gnss)
    MergeFrom(*source);
  }
}

void Gnss::MergeFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.sensor_msgs.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::basic_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::openbot_bridge::basic_msgs::PointLLH::MergeFrom(from._internal_position());
  }
  if (from.has_position_std_dev()) {
    _internal_mutable_position_std_dev()->::openbot_bridge::basic_msgs::Point3D::MergeFrom(from._internal_position_std_dev());
  }
  if (from.has_linear_velocity()) {
    _internal_mutable_linear_velocity()->::openbot_bridge::basic_msgs::Point3D::MergeFrom(from._internal_linear_velocity());
  }
  if (from.has_linear_velocity_std_dev()) {
    _internal_mutable_linear_velocity_std_dev()->::openbot_bridge::basic_msgs::Point3D::MergeFrom(from._internal_linear_velocity_std_dev());
  }
  if (!(from.measurement_time() <= 0 && from.measurement_time() >= 0)) {
    _internal_set_measurement_time(from._internal_measurement_time());
  }
  if (!(from.velocity_latency() <= 0 && from.velocity_latency() >= 0)) {
    _internal_set_velocity_latency(from._internal_velocity_latency());
  }
  if (from.num_sats() != 0) {
    _internal_set_num_sats(from._internal_num_sats());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.solution_status() != 0) {
    _internal_set_solution_status(from._internal_solution_status());
  }
  if (from.position_type() != 0) {
    _internal_set_position_type(from._internal_position_type());
  }
}

void Gnss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.sensor_msgs.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gnss::CopyFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.sensor_msgs.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gnss::IsInitialized() const {
  return true;
}

void Gnss::InternalSwap(Gnss* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gnss, position_type_)
      + sizeof(Gnss::position_type_)
      - PROTOBUF_FIELD_OFFSET(Gnss, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gnss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawData::_Internal {
 public:
  static const ::openbot_bridge::basic_msgs::Header& header(const RawData* msg);
};

const ::openbot_bridge::basic_msgs::Header&
RawData::_Internal::header(const RawData* msg) {
  return *msg->header_;
}
void RawData::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RawData::RawData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.sensor_msgs.RawData)
}
RawData::RawData(const RawData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::openbot_bridge::basic_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.sensor_msgs.RawData)
}

void RawData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawData_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

RawData::~RawData() {
  // @@protoc_insertion_point(destructor:openbot_bridge.sensor_msgs.RawData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void RawData::ArenaDtor(void* object) {
  RawData* _this = reinterpret_cast< RawData* >(object);
  (void)_this;
}
void RawData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawData& RawData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawData_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto.base);
  return *internal_default_instance();
}


void RawData::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.sensor_msgs.RawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.basic_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.sensor_msgs.RawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.sensor_msgs.RawData)
  return target;
}

size_t RawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.sensor_msgs.RawData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .openbot_bridge.basic_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.sensor_msgs.RawData)
  GOOGLE_DCHECK_NE(&from, this);
  const RawData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.sensor_msgs.RawData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.sensor_msgs.RawData)
    MergeFrom(*source);
  }
}

void RawData::MergeFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.sensor_msgs.RawData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::openbot_bridge::basic_msgs::Header::MergeFrom(from._internal_header());
  }
}

void RawData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.sensor_msgs.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawData::CopyFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.sensor_msgs.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawData::IsInitialized() const {
  return true;
}

void RawData::InternalSwap(RawData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sensor_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openbot_bridge::sensor_msgs::Gnss* Arena::CreateMaybeMessage< ::openbot_bridge::sensor_msgs::Gnss >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::sensor_msgs::Gnss >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::sensor_msgs::RawData* Arena::CreateMaybeMessage< ::openbot_bridge::sensor_msgs::RawData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::sensor_msgs::RawData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
