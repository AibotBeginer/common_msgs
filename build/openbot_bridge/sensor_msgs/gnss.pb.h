// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/sensor_msgs/gnss.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "openbot_bridge/basic_msgs/geometry.pb.h"
#include "openbot_bridge/basic_msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto;
namespace openbot_bridge {
namespace sensor_msgs {
class Gnss;
class GnssDefaultTypeInternal;
extern GnssDefaultTypeInternal _Gnss_default_instance_;
class RawData;
class RawDataDefaultTypeInternal;
extern RawDataDefaultTypeInternal _RawData_default_instance_;
}  // namespace sensor_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::openbot_bridge::sensor_msgs::Gnss* Arena::CreateMaybeMessage<::openbot_bridge::sensor_msgs::Gnss>(Arena*);
template<> ::openbot_bridge::sensor_msgs::RawData* Arena::CreateMaybeMessage<::openbot_bridge::sensor_msgs::RawData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openbot_bridge {
namespace sensor_msgs {

enum Gnss_Type : int {
  Gnss_Type_INVALID = 0,
  Gnss_Type_PROPAGATED = 1,
  Gnss_Type_SINGLE = 2,
  Gnss_Type_PSRDIFF = 3,
  Gnss_Type_PPP = 4,
  Gnss_Type_RTK_FLOAT = 5,
  Gnss_Type_RTK_INTEGER = 6,
  Gnss_Type_Gnss_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Gnss_Type_Gnss_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Gnss_Type_IsValid(int value);
constexpr Gnss_Type Gnss_Type_Type_MIN = Gnss_Type_INVALID;
constexpr Gnss_Type Gnss_Type_Type_MAX = Gnss_Type_RTK_INTEGER;
constexpr int Gnss_Type_Type_ARRAYSIZE = Gnss_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gnss_Type_descriptor();
template<typename T>
inline const std::string& Gnss_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gnss_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gnss_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gnss_Type_descriptor(), enum_t_value);
}
inline bool Gnss_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Gnss_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gnss_Type>(
    Gnss_Type_descriptor(), name, value);
}
// ===================================================================

class Gnss PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.sensor_msgs.Gnss) */ {
 public:
  inline Gnss() : Gnss(nullptr) {}
  virtual ~Gnss();

  Gnss(const Gnss& from);
  Gnss(Gnss&& from) noexcept
    : Gnss() {
    *this = ::std::move(from);
  }

  inline Gnss& operator=(const Gnss& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gnss& operator=(Gnss&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gnss& default_instance();

  static inline const Gnss* internal_default_instance() {
    return reinterpret_cast<const Gnss*>(
               &_Gnss_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Gnss& a, Gnss& b) {
    a.Swap(&b);
  }
  inline void Swap(Gnss* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gnss* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gnss* New() const final {
    return CreateMaybeMessage<Gnss>(nullptr);
  }

  Gnss* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gnss>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gnss& from);
  void MergeFrom(const Gnss& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gnss* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.sensor_msgs.Gnss";
  }
  protected:
  explicit Gnss(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Gnss_Type Type;
  static constexpr Type INVALID =
    Gnss_Type_INVALID;
  static constexpr Type PROPAGATED =
    Gnss_Type_PROPAGATED;
  static constexpr Type SINGLE =
    Gnss_Type_SINGLE;
  static constexpr Type PSRDIFF =
    Gnss_Type_PSRDIFF;
  static constexpr Type PPP =
    Gnss_Type_PPP;
  static constexpr Type RTK_FLOAT =
    Gnss_Type_RTK_FLOAT;
  static constexpr Type RTK_INTEGER =
    Gnss_Type_RTK_INTEGER;
  static inline bool Type_IsValid(int value) {
    return Gnss_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Gnss_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Gnss_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Gnss_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Gnss_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Gnss_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Gnss_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPositionFieldNumber = 4,
    kPositionStdDevFieldNumber = 5,
    kLinearVelocityFieldNumber = 6,
    kLinearVelocityStdDevFieldNumber = 7,
    kMeasurementTimeFieldNumber = 2,
    kVelocityLatencyFieldNumber = 3,
    kNumSatsFieldNumber = 8,
    kTypeFieldNumber = 9,
    kSolutionStatusFieldNumber = 10,
    kPositionTypeFieldNumber = 11,
  };
  // .openbot_bridge.basic_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::basic_msgs::Header& header() const;
  ::openbot_bridge::basic_msgs::Header* release_header();
  ::openbot_bridge::basic_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::basic_msgs::Header* header);
  private:
  const ::openbot_bridge::basic_msgs::Header& _internal_header() const;
  ::openbot_bridge::basic_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::basic_msgs::Header* header);
  ::openbot_bridge::basic_msgs::Header* unsafe_arena_release_header();

  // .openbot_bridge.basic_msgs.PointLLH position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::openbot_bridge::basic_msgs::PointLLH& position() const;
  ::openbot_bridge::basic_msgs::PointLLH* release_position();
  ::openbot_bridge::basic_msgs::PointLLH* mutable_position();
  void set_allocated_position(::openbot_bridge::basic_msgs::PointLLH* position);
  private:
  const ::openbot_bridge::basic_msgs::PointLLH& _internal_position() const;
  ::openbot_bridge::basic_msgs::PointLLH* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::openbot_bridge::basic_msgs::PointLLH* position);
  ::openbot_bridge::basic_msgs::PointLLH* unsafe_arena_release_position();

  // .openbot_bridge.basic_msgs.Point3D position_std_dev = 5;
  bool has_position_std_dev() const;
  private:
  bool _internal_has_position_std_dev() const;
  public:
  void clear_position_std_dev();
  const ::openbot_bridge::basic_msgs::Point3D& position_std_dev() const;
  ::openbot_bridge::basic_msgs::Point3D* release_position_std_dev();
  ::openbot_bridge::basic_msgs::Point3D* mutable_position_std_dev();
  void set_allocated_position_std_dev(::openbot_bridge::basic_msgs::Point3D* position_std_dev);
  private:
  const ::openbot_bridge::basic_msgs::Point3D& _internal_position_std_dev() const;
  ::openbot_bridge::basic_msgs::Point3D* _internal_mutable_position_std_dev();
  public:
  void unsafe_arena_set_allocated_position_std_dev(
      ::openbot_bridge::basic_msgs::Point3D* position_std_dev);
  ::openbot_bridge::basic_msgs::Point3D* unsafe_arena_release_position_std_dev();

  // .openbot_bridge.basic_msgs.Point3D linear_velocity = 6;
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  const ::openbot_bridge::basic_msgs::Point3D& linear_velocity() const;
  ::openbot_bridge::basic_msgs::Point3D* release_linear_velocity();
  ::openbot_bridge::basic_msgs::Point3D* mutable_linear_velocity();
  void set_allocated_linear_velocity(::openbot_bridge::basic_msgs::Point3D* linear_velocity);
  private:
  const ::openbot_bridge::basic_msgs::Point3D& _internal_linear_velocity() const;
  ::openbot_bridge::basic_msgs::Point3D* _internal_mutable_linear_velocity();
  public:
  void unsafe_arena_set_allocated_linear_velocity(
      ::openbot_bridge::basic_msgs::Point3D* linear_velocity);
  ::openbot_bridge::basic_msgs::Point3D* unsafe_arena_release_linear_velocity();

  // .openbot_bridge.basic_msgs.Point3D linear_velocity_std_dev = 7;
  bool has_linear_velocity_std_dev() const;
  private:
  bool _internal_has_linear_velocity_std_dev() const;
  public:
  void clear_linear_velocity_std_dev();
  const ::openbot_bridge::basic_msgs::Point3D& linear_velocity_std_dev() const;
  ::openbot_bridge::basic_msgs::Point3D* release_linear_velocity_std_dev();
  ::openbot_bridge::basic_msgs::Point3D* mutable_linear_velocity_std_dev();
  void set_allocated_linear_velocity_std_dev(::openbot_bridge::basic_msgs::Point3D* linear_velocity_std_dev);
  private:
  const ::openbot_bridge::basic_msgs::Point3D& _internal_linear_velocity_std_dev() const;
  ::openbot_bridge::basic_msgs::Point3D* _internal_mutable_linear_velocity_std_dev();
  public:
  void unsafe_arena_set_allocated_linear_velocity_std_dev(
      ::openbot_bridge::basic_msgs::Point3D* linear_velocity_std_dev);
  ::openbot_bridge::basic_msgs::Point3D* unsafe_arena_release_linear_velocity_std_dev();

  // double measurement_time = 2;
  void clear_measurement_time();
  double measurement_time() const;
  void set_measurement_time(double value);
  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);
  public:

  // float velocity_latency = 3;
  void clear_velocity_latency();
  float velocity_latency() const;
  void set_velocity_latency(float value);
  private:
  float _internal_velocity_latency() const;
  void _internal_set_velocity_latency(float value);
  public:

  // int32 num_sats = 8;
  void clear_num_sats();
  ::PROTOBUF_NAMESPACE_ID::int32 num_sats() const;
  void set_num_sats(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_sats() const;
  void _internal_set_num_sats(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .openbot_bridge.sensor_msgs.Gnss.Type type = 9;
  void clear_type();
  ::openbot_bridge::sensor_msgs::Gnss_Type type() const;
  void set_type(::openbot_bridge::sensor_msgs::Gnss_Type value);
  private:
  ::openbot_bridge::sensor_msgs::Gnss_Type _internal_type() const;
  void _internal_set_type(::openbot_bridge::sensor_msgs::Gnss_Type value);
  public:

  // uint32 solution_status = 10;
  void clear_solution_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 solution_status() const;
  void set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_solution_status() const;
  void _internal_set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 position_type = 11;
  void clear_position_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 position_type() const;
  void set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position_type() const;
  void _internal_set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.sensor_msgs.Gnss)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openbot_bridge::basic_msgs::Header* header_;
  ::openbot_bridge::basic_msgs::PointLLH* position_;
  ::openbot_bridge::basic_msgs::Point3D* position_std_dev_;
  ::openbot_bridge::basic_msgs::Point3D* linear_velocity_;
  ::openbot_bridge::basic_msgs::Point3D* linear_velocity_std_dev_;
  double measurement_time_;
  float velocity_latency_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_sats_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 solution_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto;
};
// -------------------------------------------------------------------

class RawData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.sensor_msgs.RawData) */ {
 public:
  inline RawData() : RawData(nullptr) {}
  virtual ~RawData();

  RawData(const RawData& from);
  RawData(RawData&& from) noexcept
    : RawData() {
    *this = ::std::move(from);
  }

  inline RawData& operator=(const RawData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawData& operator=(RawData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawData& default_instance();

  static inline const RawData* internal_default_instance() {
    return reinterpret_cast<const RawData*>(
               &_RawData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RawData& a, RawData& b) {
    a.Swap(&b);
  }
  inline void Swap(RawData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawData* New() const final {
    return CreateMaybeMessage<RawData>(nullptr);
  }

  RawData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawData& from);
  void MergeFrom(const RawData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.sensor_msgs.RawData";
  }
  protected:
  explicit RawData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .openbot_bridge.basic_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::openbot_bridge::basic_msgs::Header& header() const;
  ::openbot_bridge::basic_msgs::Header* release_header();
  ::openbot_bridge::basic_msgs::Header* mutable_header();
  void set_allocated_header(::openbot_bridge::basic_msgs::Header* header);
  private:
  const ::openbot_bridge::basic_msgs::Header& _internal_header() const;
  ::openbot_bridge::basic_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::openbot_bridge::basic_msgs::Header* header);
  ::openbot_bridge::basic_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:openbot_bridge.sensor_msgs.RawData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::openbot_bridge::basic_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Gnss

// .openbot_bridge.basic_msgs.Header header = 1;
inline bool Gnss::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Gnss::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::basic_msgs::Header& Gnss::_internal_header() const {
  const ::openbot_bridge::basic_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::basic_msgs::Header&>(
      ::openbot_bridge::basic_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::basic_msgs::Header& Gnss::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Gnss.header)
  return _internal_header();
}
inline void Gnss::unsafe_arena_set_allocated_header(
    ::openbot_bridge::basic_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.sensor_msgs.Gnss.header)
}
inline ::openbot_bridge::basic_msgs::Header* Gnss::release_header() {
  
  ::openbot_bridge::basic_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::basic_msgs::Header* Gnss::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.sensor_msgs.Gnss.header)
  
  ::openbot_bridge::basic_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::basic_msgs::Header* Gnss::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::basic_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::basic_msgs::Header* Gnss::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.sensor_msgs.Gnss.header)
  return _internal_mutable_header();
}
inline void Gnss::set_allocated_header(::openbot_bridge::basic_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.sensor_msgs.Gnss.header)
}

// double measurement_time = 2;
inline void Gnss::clear_measurement_time() {
  measurement_time_ = 0;
}
inline double Gnss::_internal_measurement_time() const {
  return measurement_time_;
}
inline double Gnss::measurement_time() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Gnss.measurement_time)
  return _internal_measurement_time();
}
inline void Gnss::_internal_set_measurement_time(double value) {
  
  measurement_time_ = value;
}
inline void Gnss::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Gnss.measurement_time)
}

// float velocity_latency = 3;
inline void Gnss::clear_velocity_latency() {
  velocity_latency_ = 0;
}
inline float Gnss::_internal_velocity_latency() const {
  return velocity_latency_;
}
inline float Gnss::velocity_latency() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Gnss.velocity_latency)
  return _internal_velocity_latency();
}
inline void Gnss::_internal_set_velocity_latency(float value) {
  
  velocity_latency_ = value;
}
inline void Gnss::set_velocity_latency(float value) {
  _internal_set_velocity_latency(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Gnss.velocity_latency)
}

// .openbot_bridge.basic_msgs.PointLLH position = 4;
inline bool Gnss::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Gnss::has_position() const {
  return _internal_has_position();
}
inline const ::openbot_bridge::basic_msgs::PointLLH& Gnss::_internal_position() const {
  const ::openbot_bridge::basic_msgs::PointLLH* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::basic_msgs::PointLLH&>(
      ::openbot_bridge::basic_msgs::_PointLLH_default_instance_);
}
inline const ::openbot_bridge::basic_msgs::PointLLH& Gnss::position() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Gnss.position)
  return _internal_position();
}
inline void Gnss::unsafe_arena_set_allocated_position(
    ::openbot_bridge::basic_msgs::PointLLH* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.sensor_msgs.Gnss.position)
}
inline ::openbot_bridge::basic_msgs::PointLLH* Gnss::release_position() {
  
  ::openbot_bridge::basic_msgs::PointLLH* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::basic_msgs::PointLLH* Gnss::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:openbot_bridge.sensor_msgs.Gnss.position)
  
  ::openbot_bridge::basic_msgs::PointLLH* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::openbot_bridge::basic_msgs::PointLLH* Gnss::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::basic_msgs::PointLLH>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::openbot_bridge::basic_msgs::PointLLH* Gnss::mutable_position() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.sensor_msgs.Gnss.position)
  return _internal_mutable_position();
}
inline void Gnss::set_allocated_position(::openbot_bridge::basic_msgs::PointLLH* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.sensor_msgs.Gnss.position)
}

// .openbot_bridge.basic_msgs.Point3D position_std_dev = 5;
inline bool Gnss::_internal_has_position_std_dev() const {
  return this != internal_default_instance() && position_std_dev_ != nullptr;
}
inline bool Gnss::has_position_std_dev() const {
  return _internal_has_position_std_dev();
}
inline const ::openbot_bridge::basic_msgs::Point3D& Gnss::_internal_position_std_dev() const {
  const ::openbot_bridge::basic_msgs::Point3D* p = position_std_dev_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::basic_msgs::Point3D&>(
      ::openbot_bridge::basic_msgs::_Point3D_default_instance_);
}
inline const ::openbot_bridge::basic_msgs::Point3D& Gnss::position_std_dev() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Gnss.position_std_dev)
  return _internal_position_std_dev();
}
inline void Gnss::unsafe_arena_set_allocated_position_std_dev(
    ::openbot_bridge::basic_msgs::Point3D* position_std_dev) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_std_dev_);
  }
  position_std_dev_ = position_std_dev;
  if (position_std_dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.sensor_msgs.Gnss.position_std_dev)
}
inline ::openbot_bridge::basic_msgs::Point3D* Gnss::release_position_std_dev() {
  
  ::openbot_bridge::basic_msgs::Point3D* temp = position_std_dev_;
  position_std_dev_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::basic_msgs::Point3D* Gnss::unsafe_arena_release_position_std_dev() {
  // @@protoc_insertion_point(field_release:openbot_bridge.sensor_msgs.Gnss.position_std_dev)
  
  ::openbot_bridge::basic_msgs::Point3D* temp = position_std_dev_;
  position_std_dev_ = nullptr;
  return temp;
}
inline ::openbot_bridge::basic_msgs::Point3D* Gnss::_internal_mutable_position_std_dev() {
  
  if (position_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::basic_msgs::Point3D>(GetArena());
    position_std_dev_ = p;
  }
  return position_std_dev_;
}
inline ::openbot_bridge::basic_msgs::Point3D* Gnss::mutable_position_std_dev() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.sensor_msgs.Gnss.position_std_dev)
  return _internal_mutable_position_std_dev();
}
inline void Gnss::set_allocated_position_std_dev(::openbot_bridge::basic_msgs::Point3D* position_std_dev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_std_dev_);
  }
  if (position_std_dev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_std_dev)->GetArena();
    if (message_arena != submessage_arena) {
      position_std_dev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_std_dev, submessage_arena);
    }
    
  } else {
    
  }
  position_std_dev_ = position_std_dev;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.sensor_msgs.Gnss.position_std_dev)
}

// .openbot_bridge.basic_msgs.Point3D linear_velocity = 6;
inline bool Gnss::_internal_has_linear_velocity() const {
  return this != internal_default_instance() && linear_velocity_ != nullptr;
}
inline bool Gnss::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline const ::openbot_bridge::basic_msgs::Point3D& Gnss::_internal_linear_velocity() const {
  const ::openbot_bridge::basic_msgs::Point3D* p = linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::basic_msgs::Point3D&>(
      ::openbot_bridge::basic_msgs::_Point3D_default_instance_);
}
inline const ::openbot_bridge::basic_msgs::Point3D& Gnss::linear_velocity() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Gnss.linear_velocity)
  return _internal_linear_velocity();
}
inline void Gnss::unsafe_arena_set_allocated_linear_velocity(
    ::openbot_bridge::basic_msgs::Point3D* linear_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.sensor_msgs.Gnss.linear_velocity)
}
inline ::openbot_bridge::basic_msgs::Point3D* Gnss::release_linear_velocity() {
  
  ::openbot_bridge::basic_msgs::Point3D* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::basic_msgs::Point3D* Gnss::unsafe_arena_release_linear_velocity() {
  // @@protoc_insertion_point(field_release:openbot_bridge.sensor_msgs.Gnss.linear_velocity)
  
  ::openbot_bridge::basic_msgs::Point3D* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  return temp;
}
inline ::openbot_bridge::basic_msgs::Point3D* Gnss::_internal_mutable_linear_velocity() {
  
  if (linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::basic_msgs::Point3D>(GetArena());
    linear_velocity_ = p;
  }
  return linear_velocity_;
}
inline ::openbot_bridge::basic_msgs::Point3D* Gnss::mutable_linear_velocity() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.sensor_msgs.Gnss.linear_velocity)
  return _internal_mutable_linear_velocity();
}
inline void Gnss::set_allocated_linear_velocity(::openbot_bridge::basic_msgs::Point3D* linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity)->GetArena();
    if (message_arena != submessage_arena) {
      linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.sensor_msgs.Gnss.linear_velocity)
}

// .openbot_bridge.basic_msgs.Point3D linear_velocity_std_dev = 7;
inline bool Gnss::_internal_has_linear_velocity_std_dev() const {
  return this != internal_default_instance() && linear_velocity_std_dev_ != nullptr;
}
inline bool Gnss::has_linear_velocity_std_dev() const {
  return _internal_has_linear_velocity_std_dev();
}
inline const ::openbot_bridge::basic_msgs::Point3D& Gnss::_internal_linear_velocity_std_dev() const {
  const ::openbot_bridge::basic_msgs::Point3D* p = linear_velocity_std_dev_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::basic_msgs::Point3D&>(
      ::openbot_bridge::basic_msgs::_Point3D_default_instance_);
}
inline const ::openbot_bridge::basic_msgs::Point3D& Gnss::linear_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Gnss.linear_velocity_std_dev)
  return _internal_linear_velocity_std_dev();
}
inline void Gnss::unsafe_arena_set_allocated_linear_velocity_std_dev(
    ::openbot_bridge::basic_msgs::Point3D* linear_velocity_std_dev) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_std_dev_);
  }
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  if (linear_velocity_std_dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.sensor_msgs.Gnss.linear_velocity_std_dev)
}
inline ::openbot_bridge::basic_msgs::Point3D* Gnss::release_linear_velocity_std_dev() {
  
  ::openbot_bridge::basic_msgs::Point3D* temp = linear_velocity_std_dev_;
  linear_velocity_std_dev_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::basic_msgs::Point3D* Gnss::unsafe_arena_release_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:openbot_bridge.sensor_msgs.Gnss.linear_velocity_std_dev)
  
  ::openbot_bridge::basic_msgs::Point3D* temp = linear_velocity_std_dev_;
  linear_velocity_std_dev_ = nullptr;
  return temp;
}
inline ::openbot_bridge::basic_msgs::Point3D* Gnss::_internal_mutable_linear_velocity_std_dev() {
  
  if (linear_velocity_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::basic_msgs::Point3D>(GetArena());
    linear_velocity_std_dev_ = p;
  }
  return linear_velocity_std_dev_;
}
inline ::openbot_bridge::basic_msgs::Point3D* Gnss::mutable_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.sensor_msgs.Gnss.linear_velocity_std_dev)
  return _internal_mutable_linear_velocity_std_dev();
}
inline void Gnss::set_allocated_linear_velocity_std_dev(::openbot_bridge::basic_msgs::Point3D* linear_velocity_std_dev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_std_dev_);
  }
  if (linear_velocity_std_dev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_std_dev)->GetArena();
    if (message_arena != submessage_arena) {
      linear_velocity_std_dev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity_std_dev, submessage_arena);
    }
    
  } else {
    
  }
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.sensor_msgs.Gnss.linear_velocity_std_dev)
}

// int32 num_sats = 8;
inline void Gnss::clear_num_sats() {
  num_sats_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Gnss::_internal_num_sats() const {
  return num_sats_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Gnss::num_sats() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Gnss.num_sats)
  return _internal_num_sats();
}
inline void Gnss::_internal_set_num_sats(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_sats_ = value;
}
inline void Gnss::set_num_sats(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_sats(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Gnss.num_sats)
}

// .openbot_bridge.sensor_msgs.Gnss.Type type = 9;
inline void Gnss::clear_type() {
  type_ = 0;
}
inline ::openbot_bridge::sensor_msgs::Gnss_Type Gnss::_internal_type() const {
  return static_cast< ::openbot_bridge::sensor_msgs::Gnss_Type >(type_);
}
inline ::openbot_bridge::sensor_msgs::Gnss_Type Gnss::type() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Gnss.type)
  return _internal_type();
}
inline void Gnss::_internal_set_type(::openbot_bridge::sensor_msgs::Gnss_Type value) {
  
  type_ = value;
}
inline void Gnss::set_type(::openbot_bridge::sensor_msgs::Gnss_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Gnss.type)
}

// uint32 solution_status = 10;
inline void Gnss::clear_solution_status() {
  solution_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Gnss::_internal_solution_status() const {
  return solution_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Gnss::solution_status() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Gnss.solution_status)
  return _internal_solution_status();
}
inline void Gnss::_internal_set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  solution_status_ = value;
}
inline void Gnss::set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_solution_status(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Gnss.solution_status)
}

// uint32 position_type = 11;
inline void Gnss::clear_position_type() {
  position_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Gnss::_internal_position_type() const {
  return position_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Gnss::position_type() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.Gnss.position_type)
  return _internal_position_type();
}
inline void Gnss::_internal_set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  position_type_ = value;
}
inline void Gnss::set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position_type(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.Gnss.position_type)
}

// -------------------------------------------------------------------

// RawData

// .openbot_bridge.basic_msgs.Header header = 1;
inline bool RawData::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RawData::has_header() const {
  return _internal_has_header();
}
inline const ::openbot_bridge::basic_msgs::Header& RawData::_internal_header() const {
  const ::openbot_bridge::basic_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::openbot_bridge::basic_msgs::Header&>(
      ::openbot_bridge::basic_msgs::_Header_default_instance_);
}
inline const ::openbot_bridge::basic_msgs::Header& RawData::header() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.RawData.header)
  return _internal_header();
}
inline void RawData::unsafe_arena_set_allocated_header(
    ::openbot_bridge::basic_msgs::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openbot_bridge.sensor_msgs.RawData.header)
}
inline ::openbot_bridge::basic_msgs::Header* RawData::release_header() {
  
  ::openbot_bridge::basic_msgs::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::openbot_bridge::basic_msgs::Header* RawData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:openbot_bridge.sensor_msgs.RawData.header)
  
  ::openbot_bridge::basic_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::openbot_bridge::basic_msgs::Header* RawData::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::openbot_bridge::basic_msgs::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::openbot_bridge::basic_msgs::Header* RawData::mutable_header() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.sensor_msgs.RawData.header)
  return _internal_mutable_header();
}
inline void RawData::set_allocated_header(::openbot_bridge::basic_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.sensor_msgs.RawData.header)
}

// bytes data = 2;
inline void RawData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& RawData::data() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.sensor_msgs.RawData.data)
  return _internal_data();
}
inline void RawData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.sensor_msgs.RawData.data)
}
inline std::string* RawData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.sensor_msgs.RawData.data)
  return _internal_mutable_data();
}
inline const std::string& RawData::_internal_data() const {
  return data_.Get();
}
inline void RawData::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawData::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.sensor_msgs.RawData.data)
}
inline void RawData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.sensor_msgs.RawData.data)
}
inline void RawData::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.sensor_msgs.RawData.data)
}
inline std::string* RawData::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawData::release_data() {
  // @@protoc_insertion_point(field_release:openbot_bridge.sensor_msgs.RawData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.sensor_msgs.RawData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sensor_msgs
}  // namespace openbot_bridge

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::openbot_bridge::sensor_msgs::Gnss_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openbot_bridge::sensor_msgs::Gnss_Type>() {
  return ::openbot_bridge::sensor_msgs::Gnss_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fsensor_5fmsgs_2fgnss_2eproto
