// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/basic_msgs/drive_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fbasic_5fmsgs_2fdrive_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fbasic_5fmsgs_2fdrive_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fdrive_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openbot_5fbridge_2fbasic_5fmsgs_2fdrive_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fdrive_5fstate_2eproto;
namespace openbot_bridge {
namespace basic_msgs {
class EngageAdvice;
class EngageAdviceDefaultTypeInternal;
extern EngageAdviceDefaultTypeInternal _EngageAdvice_default_instance_;
}  // namespace basic_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> ::openbot_bridge::basic_msgs::EngageAdvice* Arena::CreateMaybeMessage<::openbot_bridge::basic_msgs::EngageAdvice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace openbot_bridge {
namespace basic_msgs {

enum EngageAdvice_Advice : int {
  EngageAdvice_Advice_UNKNOWN = 0,
  EngageAdvice_Advice_DISALLOW_ENGAGE = 1,
  EngageAdvice_Advice_READY_TO_ENGAGE = 2,
  EngageAdvice_Advice_KEEP_ENGAGED = 3,
  EngageAdvice_Advice_PREPARE_DISENGAGE = 4,
  EngageAdvice_Advice_EngageAdvice_Advice_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EngageAdvice_Advice_EngageAdvice_Advice_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EngageAdvice_Advice_IsValid(int value);
constexpr EngageAdvice_Advice EngageAdvice_Advice_Advice_MIN = EngageAdvice_Advice_UNKNOWN;
constexpr EngageAdvice_Advice EngageAdvice_Advice_Advice_MAX = EngageAdvice_Advice_PREPARE_DISENGAGE;
constexpr int EngageAdvice_Advice_Advice_ARRAYSIZE = EngageAdvice_Advice_Advice_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngageAdvice_Advice_descriptor();
template<typename T>
inline const std::string& EngageAdvice_Advice_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EngageAdvice_Advice>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EngageAdvice_Advice_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EngageAdvice_Advice_descriptor(), enum_t_value);
}
inline bool EngageAdvice_Advice_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EngageAdvice_Advice* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EngageAdvice_Advice>(
    EngageAdvice_Advice_descriptor(), name, value);
}
// ===================================================================

class EngageAdvice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:openbot_bridge.basic_msgs.EngageAdvice) */ {
 public:
  inline EngageAdvice() : EngageAdvice(nullptr) {}
  virtual ~EngageAdvice();

  EngageAdvice(const EngageAdvice& from);
  EngageAdvice(EngageAdvice&& from) noexcept
    : EngageAdvice() {
    *this = ::std::move(from);
  }

  inline EngageAdvice& operator=(const EngageAdvice& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngageAdvice& operator=(EngageAdvice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngageAdvice& default_instance();

  static inline const EngageAdvice* internal_default_instance() {
    return reinterpret_cast<const EngageAdvice*>(
               &_EngageAdvice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EngageAdvice& a, EngageAdvice& b) {
    a.Swap(&b);
  }
  inline void Swap(EngageAdvice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngageAdvice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngageAdvice* New() const final {
    return CreateMaybeMessage<EngageAdvice>(nullptr);
  }

  EngageAdvice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngageAdvice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngageAdvice& from);
  void MergeFrom(const EngageAdvice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngageAdvice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "openbot_bridge.basic_msgs.EngageAdvice";
  }
  protected:
  explicit EngageAdvice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fdrive_5fstate_2eproto);
    return ::descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fdrive_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EngageAdvice_Advice Advice;
  static constexpr Advice UNKNOWN =
    EngageAdvice_Advice_UNKNOWN;
  static constexpr Advice DISALLOW_ENGAGE =
    EngageAdvice_Advice_DISALLOW_ENGAGE;
  static constexpr Advice READY_TO_ENGAGE =
    EngageAdvice_Advice_READY_TO_ENGAGE;
  static constexpr Advice KEEP_ENGAGED =
    EngageAdvice_Advice_KEEP_ENGAGED;
  static constexpr Advice PREPARE_DISENGAGE =
    EngageAdvice_Advice_PREPARE_DISENGAGE;
  static inline bool Advice_IsValid(int value) {
    return EngageAdvice_Advice_IsValid(value);
  }
  static constexpr Advice Advice_MIN =
    EngageAdvice_Advice_Advice_MIN;
  static constexpr Advice Advice_MAX =
    EngageAdvice_Advice_Advice_MAX;
  static constexpr int Advice_ARRAYSIZE =
    EngageAdvice_Advice_Advice_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Advice_descriptor() {
    return EngageAdvice_Advice_descriptor();
  }
  template<typename T>
  static inline const std::string& Advice_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Advice>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Advice_Name.");
    return EngageAdvice_Advice_Name(enum_t_value);
  }
  static inline bool Advice_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Advice* value) {
    return EngageAdvice_Advice_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kAdviceFieldNumber = 1,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .openbot_bridge.basic_msgs.EngageAdvice.Advice advice = 1;
  void clear_advice();
  ::openbot_bridge::basic_msgs::EngageAdvice_Advice advice() const;
  void set_advice(::openbot_bridge::basic_msgs::EngageAdvice_Advice value);
  private:
  ::openbot_bridge::basic_msgs::EngageAdvice_Advice _internal_advice() const;
  void _internal_set_advice(::openbot_bridge::basic_msgs::EngageAdvice_Advice value);
  public:

  // @@protoc_insertion_point(class_scope:openbot_bridge.basic_msgs.EngageAdvice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int advice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openbot_5fbridge_2fbasic_5fmsgs_2fdrive_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EngageAdvice

// .openbot_bridge.basic_msgs.EngageAdvice.Advice advice = 1;
inline void EngageAdvice::clear_advice() {
  advice_ = 0;
}
inline ::openbot_bridge::basic_msgs::EngageAdvice_Advice EngageAdvice::_internal_advice() const {
  return static_cast< ::openbot_bridge::basic_msgs::EngageAdvice_Advice >(advice_);
}
inline ::openbot_bridge::basic_msgs::EngageAdvice_Advice EngageAdvice::advice() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.basic_msgs.EngageAdvice.advice)
  return _internal_advice();
}
inline void EngageAdvice::_internal_set_advice(::openbot_bridge::basic_msgs::EngageAdvice_Advice value) {
  
  advice_ = value;
}
inline void EngageAdvice::set_advice(::openbot_bridge::basic_msgs::EngageAdvice_Advice value) {
  _internal_set_advice(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.basic_msgs.EngageAdvice.advice)
}

// string reason = 2;
inline void EngageAdvice::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& EngageAdvice::reason() const {
  // @@protoc_insertion_point(field_get:openbot_bridge.basic_msgs.EngageAdvice.reason)
  return _internal_reason();
}
inline void EngageAdvice::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:openbot_bridge.basic_msgs.EngageAdvice.reason)
}
inline std::string* EngageAdvice::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:openbot_bridge.basic_msgs.EngageAdvice.reason)
  return _internal_mutable_reason();
}
inline const std::string& EngageAdvice::_internal_reason() const {
  return reason_.Get();
}
inline void EngageAdvice::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EngageAdvice::set_reason(std::string&& value) {
  
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:openbot_bridge.basic_msgs.EngageAdvice.reason)
}
inline void EngageAdvice::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:openbot_bridge.basic_msgs.EngageAdvice.reason)
}
inline void EngageAdvice::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:openbot_bridge.basic_msgs.EngageAdvice.reason)
}
inline std::string* EngageAdvice::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EngageAdvice::release_reason() {
  // @@protoc_insertion_point(field_release:openbot_bridge.basic_msgs.EngageAdvice.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EngageAdvice::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:openbot_bridge.basic_msgs.EngageAdvice.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace basic_msgs
}  // namespace openbot_bridge

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::openbot_bridge::basic_msgs::EngageAdvice_Advice> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openbot_bridge::basic_msgs::EngageAdvice_Advice>() {
  return ::openbot_bridge::basic_msgs::EngageAdvice_Advice_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openbot_5fbridge_2fbasic_5fmsgs_2fdrive_5fstate_2eproto
