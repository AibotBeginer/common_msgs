// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/basic_msgs/pnc_point.proto

#include "openbot_bridge/basic_msgs/pnc_point.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GaussianInfo_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleMotionPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto;
namespace openbot_bridge {
namespace basic_msgs {
class SLPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLPoint> _instance;
} _SLPoint_default_instance_;
class FrenetFramePointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrenetFramePoint> _instance;
} _FrenetFramePoint_default_instance_;
class SpeedPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedPoint> _instance;
} _SpeedPoint_default_instance_;
class PathPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPoint> _instance;
} _PathPoint_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class TrajectoryPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryPoint> _instance;
} _TrajectoryPoint_default_instance_;
class TrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectory> _instance;
} _Trajectory_default_instance_;
class VehicleMotionPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleMotionPoint> _instance;
} _VehicleMotionPoint_default_instance_;
class VehicleMotionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleMotion> _instance;
} _VehicleMotion_default_instance_;
class GaussianInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GaussianInfo> _instance;
} _GaussianInfo_default_instance_;
}  // namespace basic_msgs
}  // namespace openbot_bridge
static void InitDefaultsscc_info_FrenetFramePoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::basic_msgs::_FrenetFramePoint_default_instance_;
    new (ptr) ::openbot_bridge::basic_msgs::FrenetFramePoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrenetFramePoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrenetFramePoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto}, {}};

static void InitDefaultsscc_info_GaussianInfo_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::basic_msgs::_GaussianInfo_default_instance_;
    new (ptr) ::openbot_bridge::basic_msgs::GaussianInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GaussianInfo_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GaussianInfo_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto}, {}};

static void InitDefaultsscc_info_Path_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::basic_msgs::_Path_default_instance_;
    new (ptr) ::openbot_bridge::basic_msgs::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Path_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Path_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto}, {
      &scc_info_PathPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_PathPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::basic_msgs::_PathPoint_default_instance_;
    new (ptr) ::openbot_bridge::basic_msgs::PathPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PathPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto}, {}};

static void InitDefaultsscc_info_SLPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::basic_msgs::_SLPoint_default_instance_;
    new (ptr) ::openbot_bridge::basic_msgs::SLPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto}, {}};

static void InitDefaultsscc_info_SpeedPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::basic_msgs::_SpeedPoint_default_instance_;
    new (ptr) ::openbot_bridge::basic_msgs::SpeedPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeedPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto}, {}};

static void InitDefaultsscc_info_Trajectory_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::basic_msgs::_Trajectory_default_instance_;
    new (ptr) ::openbot_bridge::basic_msgs::Trajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trajectory_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto}, {
      &scc_info_TrajectoryPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::basic_msgs::_TrajectoryPoint_default_instance_;
    new (ptr) ::openbot_bridge::basic_msgs::TrajectoryPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrajectoryPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto}, {
      &scc_info_PathPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
      &scc_info_GaussianInfo_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_VehicleMotion_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::basic_msgs::_VehicleMotion_default_instance_;
    new (ptr) ::openbot_bridge::basic_msgs::VehicleMotion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleMotion_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleMotion_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto}, {
      &scc_info_VehicleMotionPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_VehicleMotionPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::basic_msgs::_VehicleMotionPoint_default_instance_;
    new (ptr) ::openbot_bridge::basic_msgs::VehicleMotionPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleMotionPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleMotionPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto}, {
      &scc_info_TrajectoryPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::SLPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::SLPoint, s_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::SLPoint, l_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::FrenetFramePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::FrenetFramePoint, s_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::FrenetFramePoint, l_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::FrenetFramePoint, dl_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::FrenetFramePoint, ddl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::SpeedPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::SpeedPoint, s_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::SpeedPoint, t_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::SpeedPoint, v_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::SpeedPoint, a_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::SpeedPoint, da_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::PathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::PathPoint, x_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::PathPoint, y_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::PathPoint, z_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::PathPoint, theta_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::PathPoint, kappa_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::PathPoint, s_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::PathPoint, dkappa_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::PathPoint, ddkappa_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::PathPoint, lane_id_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::PathPoint, x_derivative_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::PathPoint, y_derivative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::Path, name_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::Path, path_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::TrajectoryPoint, path_point_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::TrajectoryPoint, v_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::TrajectoryPoint, a_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::TrajectoryPoint, relative_time_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::TrajectoryPoint, da_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::TrajectoryPoint, steer_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::TrajectoryPoint, gaussian_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::Trajectory, name_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::Trajectory, trajectory_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::VehicleMotionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::VehicleMotionPoint, trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::VehicleMotionPoint, steer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::VehicleMotion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::VehicleMotion, name_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::VehicleMotion, vehicle_motion_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::GaussianInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::GaussianInfo, sigma_x_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::GaussianInfo, sigma_y_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::GaussianInfo, correlation_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::GaussianInfo, area_probability_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::GaussianInfo, ellipse_a_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::GaussianInfo, ellipse_b_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::GaussianInfo, theta_a_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openbot_bridge::basic_msgs::SLPoint)},
  { 7, -1, sizeof(::openbot_bridge::basic_msgs::FrenetFramePoint)},
  { 16, -1, sizeof(::openbot_bridge::basic_msgs::SpeedPoint)},
  { 26, -1, sizeof(::openbot_bridge::basic_msgs::PathPoint)},
  { 42, -1, sizeof(::openbot_bridge::basic_msgs::Path)},
  { 49, -1, sizeof(::openbot_bridge::basic_msgs::TrajectoryPoint)},
  { 61, -1, sizeof(::openbot_bridge::basic_msgs::Trajectory)},
  { 68, -1, sizeof(::openbot_bridge::basic_msgs::VehicleMotionPoint)},
  { 75, -1, sizeof(::openbot_bridge::basic_msgs::VehicleMotion)},
  { 82, -1, sizeof(::openbot_bridge::basic_msgs::GaussianInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::basic_msgs::_SLPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::basic_msgs::_FrenetFramePoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::basic_msgs::_SpeedPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::basic_msgs::_PathPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::basic_msgs::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::basic_msgs::_TrajectoryPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::basic_msgs::_Trajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::basic_msgs::_VehicleMotionPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::basic_msgs::_VehicleMotion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::basic_msgs::_GaussianInfo_default_instance_),
};

const char descriptor_table_protodef_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)openbot_bridge/basic_msgs/pnc_point.pr"
  "oto\022\031openbot_bridge.basic_msgs\"\037\n\007SLPoin"
  "t\022\t\n\001s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\"A\n\020FrenetFramePo"
  "int\022\t\n\001s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\022\n\n\002dl\030\003 \001(\001\022\013\n"
  "\003ddl\030\004 \001(\001\"D\n\nSpeedPoint\022\t\n\001s\030\001 \001(\001\022\t\n\001t"
  "\030\002 \001(\001\022\t\n\001v\030\003 \001(\001\022\t\n\001a\030\004 \001(\001\022\n\n\002da\030\005 \001(\001"
  "\"\263\001\n\tPathPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001"
  "z\030\003 \001(\001\022\r\n\005theta\030\004 \001(\001\022\r\n\005kappa\030\005 \001(\001\022\t\n"
  "\001s\030\006 \001(\001\022\016\n\006dkappa\030\007 \001(\001\022\017\n\007ddkappa\030\010 \001("
  "\001\022\017\n\007lane_id\030\t \001(\t\022\024\n\014x_derivative\030\n \001(\001"
  "\022\024\n\014y_derivative\030\013 \001(\001\"N\n\004Path\022\014\n\004name\030\001"
  " \001(\t\0228\n\npath_point\030\002 \003(\0132$.openbot_bridg"
  "e.basic_msgs.PathPoint\"\323\001\n\017TrajectoryPoi"
  "nt\0228\n\npath_point\030\001 \001(\0132$.openbot_bridge."
  "basic_msgs.PathPoint\022\t\n\001v\030\002 \001(\001\022\t\n\001a\030\003 \001"
  "(\001\022\025\n\rrelative_time\030\004 \001(\001\022\n\n\002da\030\005 \001(\001\022\r\n"
  "\005steer\030\006 \001(\001\022>\n\rgaussian_info\030\007 \001(\0132\'.op"
  "enbot_bridge.basic_msgs.GaussianInfo\"`\n\n"
  "Trajectory\022\014\n\004name\030\001 \001(\t\022D\n\020trajectory_p"
  "oint\030\002 \003(\0132*.openbot_bridge.basic_msgs.T"
  "rajectoryPoint\"i\n\022VehicleMotionPoint\022D\n\020"
  "trajectory_point\030\001 \001(\0132*.openbot_bridge."
  "basic_msgs.TrajectoryPoint\022\r\n\005steer\030\002 \001("
  "\001\"j\n\rVehicleMotion\022\014\n\004name\030\001 \001(\t\022K\n\024vehi"
  "cle_motion_point\030\002 \003(\0132-.openbot_bridge."
  "basic_msgs.VehicleMotionPoint\"\226\001\n\014Gaussi"
  "anInfo\022\017\n\007sigma_x\030\001 \001(\001\022\017\n\007sigma_y\030\002 \001(\001"
  "\022\023\n\013correlation\030\003 \001(\001\022\030\n\020area_probabilit"
  "y\030\004 \001(\001\022\021\n\tellipse_a\030\005 \001(\001\022\021\n\tellipse_b\030"
  "\006 \001(\001\022\017\n\007theta_a\030\007 \001(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto_sccs[10] = {
  &scc_info_FrenetFramePoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
  &scc_info_GaussianInfo_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
  &scc_info_Path_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
  &scc_info_PathPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
  &scc_info_SLPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
  &scc_info_SpeedPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
  &scc_info_Trajectory_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
  &scc_info_TrajectoryPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
  &scc_info_VehicleMotion_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
  &scc_info_VehicleMotionPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto = {
  false, false, descriptor_table_protodef_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto, "openbot_bridge/basic_msgs/pnc_point.proto", 1190,
  &descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto_once, descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto_sccs, descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto::offsets,
  file_level_metadata_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto, 10, file_level_enum_descriptors_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto, file_level_service_descriptors_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto)), true);
namespace openbot_bridge {
namespace basic_msgs {

// ===================================================================

class SLPoint::_Internal {
 public:
};

SLPoint::SLPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.basic_msgs.SLPoint)
}
SLPoint::SLPoint(const SLPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&s_)) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.basic_msgs.SLPoint)
}

void SLPoint::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&s_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&s_)) + sizeof(l_));
}

SLPoint::~SLPoint() {
  // @@protoc_insertion_point(destructor:openbot_bridge.basic_msgs.SLPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLPoint::ArenaDtor(void* object) {
  SLPoint* _this = reinterpret_cast< SLPoint* >(object);
  (void)_this;
}
void SLPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLPoint& SLPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void SLPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.basic_msgs.SLPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&s_)) + sizeof(l_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.basic_msgs.SLPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // double l = 2;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.basic_msgs.SLPoint)
  return target;
}

size_t SLPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.basic_msgs.SLPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 8;
  }

  // double l = 2;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.basic_msgs.SLPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SLPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.basic_msgs.SLPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.basic_msgs.SLPoint)
    MergeFrom(*source);
  }
}

void SLPoint::MergeFrom(const SLPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.basic_msgs.SLPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s() <= 0 && from.s() >= 0)) {
    _internal_set_s(from._internal_s());
  }
  if (!(from.l() <= 0 && from.l() >= 0)) {
    _internal_set_l(from._internal_l());
  }
}

void SLPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.basic_msgs.SLPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLPoint::CopyFrom(const SLPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.basic_msgs.SLPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPoint::IsInitialized() const {
  return true;
}

void SLPoint::InternalSwap(SLPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLPoint, l_)
      + sizeof(SLPoint::l_)
      - PROTOBUF_FIELD_OFFSET(SLPoint, s_)>(
          reinterpret_cast<char*>(&s_),
          reinterpret_cast<char*>(&other->s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FrenetFramePoint::_Internal {
 public:
};

FrenetFramePoint::FrenetFramePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.basic_msgs.FrenetFramePoint)
}
FrenetFramePoint::FrenetFramePoint(const FrenetFramePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&ddl_) -
    reinterpret_cast<char*>(&s_)) + sizeof(ddl_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.basic_msgs.FrenetFramePoint)
}

void FrenetFramePoint::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&s_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ddl_) -
      reinterpret_cast<char*>(&s_)) + sizeof(ddl_));
}

FrenetFramePoint::~FrenetFramePoint() {
  // @@protoc_insertion_point(destructor:openbot_bridge.basic_msgs.FrenetFramePoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrenetFramePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrenetFramePoint::ArenaDtor(void* object) {
  FrenetFramePoint* _this = reinterpret_cast< FrenetFramePoint* >(object);
  (void)_this;
}
void FrenetFramePoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrenetFramePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrenetFramePoint& FrenetFramePoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrenetFramePoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void FrenetFramePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.basic_msgs.FrenetFramePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ddl_) -
      reinterpret_cast<char*>(&s_)) + sizeof(ddl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrenetFramePoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          dl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ddl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ddl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrenetFramePoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.basic_msgs.FrenetFramePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // double l = 2;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_l(), target);
  }

  // double dl = 3;
  if (!(this->dl() <= 0 && this->dl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_dl(), target);
  }

  // double ddl = 4;
  if (!(this->ddl() <= 0 && this->ddl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_ddl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.basic_msgs.FrenetFramePoint)
  return target;
}

size_t FrenetFramePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.basic_msgs.FrenetFramePoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 8;
  }

  // double l = 2;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    total_size += 1 + 8;
  }

  // double dl = 3;
  if (!(this->dl() <= 0 && this->dl() >= 0)) {
    total_size += 1 + 8;
  }

  // double ddl = 4;
  if (!(this->ddl() <= 0 && this->ddl() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrenetFramePoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.basic_msgs.FrenetFramePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const FrenetFramePoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrenetFramePoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.basic_msgs.FrenetFramePoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.basic_msgs.FrenetFramePoint)
    MergeFrom(*source);
  }
}

void FrenetFramePoint::MergeFrom(const FrenetFramePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.basic_msgs.FrenetFramePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s() <= 0 && from.s() >= 0)) {
    _internal_set_s(from._internal_s());
  }
  if (!(from.l() <= 0 && from.l() >= 0)) {
    _internal_set_l(from._internal_l());
  }
  if (!(from.dl() <= 0 && from.dl() >= 0)) {
    _internal_set_dl(from._internal_dl());
  }
  if (!(from.ddl() <= 0 && from.ddl() >= 0)) {
    _internal_set_ddl(from._internal_ddl());
  }
}

void FrenetFramePoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.basic_msgs.FrenetFramePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrenetFramePoint::CopyFrom(const FrenetFramePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.basic_msgs.FrenetFramePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrenetFramePoint::IsInitialized() const {
  return true;
}

void FrenetFramePoint::InternalSwap(FrenetFramePoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrenetFramePoint, ddl_)
      + sizeof(FrenetFramePoint::ddl_)
      - PROTOBUF_FIELD_OFFSET(FrenetFramePoint, s_)>(
          reinterpret_cast<char*>(&s_),
          reinterpret_cast<char*>(&other->s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrenetFramePoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpeedPoint::_Internal {
 public:
};

SpeedPoint::SpeedPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.basic_msgs.SpeedPoint)
}
SpeedPoint::SpeedPoint(const SpeedPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&da_) -
    reinterpret_cast<char*>(&s_)) + sizeof(da_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.basic_msgs.SpeedPoint)
}

void SpeedPoint::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&s_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&da_) -
      reinterpret_cast<char*>(&s_)) + sizeof(da_));
}

SpeedPoint::~SpeedPoint() {
  // @@protoc_insertion_point(destructor:openbot_bridge.basic_msgs.SpeedPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeedPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpeedPoint::ArenaDtor(void* object) {
  SpeedPoint* _this = reinterpret_cast< SpeedPoint* >(object);
  (void)_this;
}
void SpeedPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedPoint& SpeedPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void SpeedPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.basic_msgs.SpeedPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&da_) -
      reinterpret_cast<char*>(&s_)) + sizeof(da_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double v = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double da = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          da_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.basic_msgs.SpeedPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_t(), target);
  }

  // double v = 3;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_v(), target);
  }

  // double a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_a(), target);
  }

  // double da = 5;
  if (!(this->da() <= 0 && this->da() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_da(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.basic_msgs.SpeedPoint)
  return target;
}

size_t SpeedPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.basic_msgs.SpeedPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 8;
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 8;
  }

  // double v = 3;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 8;
  }

  // double a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 8;
  }

  // double da = 5;
  if (!(this->da() <= 0 && this->da() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.basic_msgs.SpeedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.basic_msgs.SpeedPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.basic_msgs.SpeedPoint)
    MergeFrom(*source);
  }
}

void SpeedPoint::MergeFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.basic_msgs.SpeedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s() <= 0 && from.s() >= 0)) {
    _internal_set_s(from._internal_s());
  }
  if (!(from.t() <= 0 && from.t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
  if (!(from.v() <= 0 && from.v() >= 0)) {
    _internal_set_v(from._internal_v());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
  if (!(from.da() <= 0 && from.da() >= 0)) {
    _internal_set_da(from._internal_da());
  }
}

void SpeedPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.basic_msgs.SpeedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPoint::CopyFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.basic_msgs.SpeedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPoint::IsInitialized() const {
  return true;
}

void SpeedPoint::InternalSwap(SpeedPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedPoint, da_)
      + sizeof(SpeedPoint::da_)
      - PROTOBUF_FIELD_OFFSET(SpeedPoint, s_)>(
          reinterpret_cast<char*>(&s_),
          reinterpret_cast<char*>(&other->s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PathPoint::_Internal {
 public:
};

PathPoint::PathPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.basic_msgs.PathPoint)
}
PathPoint::PathPoint(const PathPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lane_id().empty()) {
    lane_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lane_id(), 
      GetArena());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_derivative_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_derivative_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.basic_msgs.PathPoint)
}

void PathPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_derivative_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_derivative_));
}

PathPoint::~PathPoint() {
  // @@protoc_insertion_point(destructor:openbot_bridge.basic_msgs.PathPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PathPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PathPoint::ArenaDtor(void* object) {
  PathPoint* _this = reinterpret_cast< PathPoint* >(object);
  (void)_this;
}
void PathPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPoint& PathPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void PathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.basic_msgs.PathPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_.ClearToEmpty();
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_derivative_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_derivative_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double theta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double kappa = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dkappa = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          dkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ddkappa = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          ddkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string lane_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.basic_msgs.PathPoint.lane_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double x_derivative = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          x_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y_derivative = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          y_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.basic_msgs.PathPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double theta = 4;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_theta(), target);
  }

  // double kappa = 5;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_kappa(), target);
  }

  // double s = 6;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s(), target);
  }

  // double dkappa = 7;
  if (!(this->dkappa() <= 0 && this->dkappa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_dkappa(), target);
  }

  // double ddkappa = 8;
  if (!(this->ddkappa() <= 0 && this->ddkappa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_ddkappa(), target);
  }

  // string lane_id = 9;
  if (this->lane_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.basic_msgs.PathPoint.lane_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_lane_id(), target);
  }

  // double x_derivative = 10;
  if (!(this->x_derivative() <= 0 && this->x_derivative() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_x_derivative(), target);
  }

  // double y_derivative = 11;
  if (!(this->y_derivative() <= 0 && this->y_derivative() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_y_derivative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.basic_msgs.PathPoint)
  return target;
}

size_t PathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.basic_msgs.PathPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lane_id = 9;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lane_id());
  }

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double theta = 4;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 8;
  }

  // double kappa = 5;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    total_size += 1 + 8;
  }

  // double s = 6;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 8;
  }

  // double dkappa = 7;
  if (!(this->dkappa() <= 0 && this->dkappa() >= 0)) {
    total_size += 1 + 8;
  }

  // double ddkappa = 8;
  if (!(this->ddkappa() <= 0 && this->ddkappa() >= 0)) {
    total_size += 1 + 8;
  }

  // double x_derivative = 10;
  if (!(this->x_derivative() <= 0 && this->x_derivative() >= 0)) {
    total_size += 1 + 8;
  }

  // double y_derivative = 11;
  if (!(this->y_derivative() <= 0 && this->y_derivative() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.basic_msgs.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.basic_msgs.PathPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.basic_msgs.PathPoint)
    MergeFrom(*source);
  }
}

void PathPoint::MergeFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.basic_msgs.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lane_id().size() > 0) {
    _internal_set_lane_id(from._internal_lane_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
  if (!(from.kappa() <= 0 && from.kappa() >= 0)) {
    _internal_set_kappa(from._internal_kappa());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    _internal_set_s(from._internal_s());
  }
  if (!(from.dkappa() <= 0 && from.dkappa() >= 0)) {
    _internal_set_dkappa(from._internal_dkappa());
  }
  if (!(from.ddkappa() <= 0 && from.ddkappa() >= 0)) {
    _internal_set_ddkappa(from._internal_ddkappa());
  }
  if (!(from.x_derivative() <= 0 && from.x_derivative() >= 0)) {
    _internal_set_x_derivative(from._internal_x_derivative());
  }
  if (!(from.y_derivative() <= 0 && from.y_derivative() >= 0)) {
    _internal_set_y_derivative(from._internal_y_derivative());
  }
}

void PathPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.basic_msgs.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPoint::CopyFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.basic_msgs.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPoint::IsInitialized() const {
  return true;
}

void PathPoint::InternalSwap(PathPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lane_id_.Swap(&other->lane_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathPoint, y_derivative_)
      + sizeof(PathPoint::y_derivative_)
      - PROTOBUF_FIELD_OFFSET(PathPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  path_point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.basic_msgs.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_point_(from.path_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.basic_msgs.Path)
}

void Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Path_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:openbot_bridge.basic_msgs.Path)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.basic_msgs.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_point_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.basic_msgs.Path.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.basic_msgs.PathPoint path_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.basic_msgs.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.basic_msgs.Path.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .openbot_bridge.basic_msgs.PathPoint path_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_path_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.basic_msgs.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.basic_msgs.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.basic_msgs.PathPoint path_point = 2;
  total_size += 1UL * this->_internal_path_point_size();
  for (const auto& msg : this->path_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.basic_msgs.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.basic_msgs.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.basic_msgs.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.basic_msgs.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_point_.MergeFrom(from.path_point_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.basic_msgs.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.basic_msgs.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_point_.InternalSwap(&other->path_point_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrajectoryPoint::_Internal {
 public:
  static const ::openbot_bridge::basic_msgs::PathPoint& path_point(const TrajectoryPoint* msg);
  static const ::openbot_bridge::basic_msgs::GaussianInfo& gaussian_info(const TrajectoryPoint* msg);
};

const ::openbot_bridge::basic_msgs::PathPoint&
TrajectoryPoint::_Internal::path_point(const TrajectoryPoint* msg) {
  return *msg->path_point_;
}
const ::openbot_bridge::basic_msgs::GaussianInfo&
TrajectoryPoint::_Internal::gaussian_info(const TrajectoryPoint* msg) {
  return *msg->gaussian_info_;
}
TrajectoryPoint::TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.basic_msgs.TrajectoryPoint)
}
TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path_point()) {
    path_point_ = new ::openbot_bridge::basic_msgs::PathPoint(*from.path_point_);
  } else {
    path_point_ = nullptr;
  }
  if (from._internal_has_gaussian_info()) {
    gaussian_info_ = new ::openbot_bridge::basic_msgs::GaussianInfo(*from.gaussian_info_);
  } else {
    gaussian_info_ = nullptr;
  }
  ::memcpy(&v_, &from.v_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_) -
    reinterpret_cast<char*>(&v_)) + sizeof(steer_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.basic_msgs.TrajectoryPoint)
}

void TrajectoryPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&path_point_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&steer_) -
      reinterpret_cast<char*>(&path_point_)) + sizeof(steer_));
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:openbot_bridge.basic_msgs.TrajectoryPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrajectoryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete path_point_;
  if (this != internal_default_instance()) delete gaussian_info_;
}

void TrajectoryPoint::ArenaDtor(void* object) {
  TrajectoryPoint* _this = reinterpret_cast< TrajectoryPoint* >(object);
  (void)_this;
}
void TrajectoryPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectoryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryPoint& TrajectoryPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.basic_msgs.TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && path_point_ != nullptr) {
    delete path_point_;
  }
  path_point_ = nullptr;
  if (GetArena() == nullptr && gaussian_info_ != nullptr) {
    delete gaussian_info_;
  }
  gaussian_info_ = nullptr;
  ::memset(&v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_) -
      reinterpret_cast<char*>(&v_)) + sizeof(steer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.basic_msgs.PathPoint path_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double relative_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double da = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          da_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double steer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .openbot_bridge.basic_msgs.GaussianInfo gaussian_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gaussian_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.basic_msgs.TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.PathPoint path_point = 1;
  if (this->has_path_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path_point(this), target, stream);
  }

  // double v = 2;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_v(), target);
  }

  // double a = 3;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_a(), target);
  }

  // double relative_time = 4;
  if (!(this->relative_time() <= 0 && this->relative_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_relative_time(), target);
  }

  // double da = 5;
  if (!(this->da() <= 0 && this->da() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_da(), target);
  }

  // double steer = 6;
  if (!(this->steer() <= 0 && this->steer() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_steer(), target);
  }

  // .openbot_bridge.basic_msgs.GaussianInfo gaussian_info = 7;
  if (this->has_gaussian_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::gaussian_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.basic_msgs.TrajectoryPoint)
  return target;
}

size_t TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.basic_msgs.TrajectoryPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.PathPoint path_point = 1;
  if (this->has_path_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_point_);
  }

  // .openbot_bridge.basic_msgs.GaussianInfo gaussian_info = 7;
  if (this->has_gaussian_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gaussian_info_);
  }

  // double v = 2;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 8;
  }

  // double a = 3;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 8;
  }

  // double relative_time = 4;
  if (!(this->relative_time() <= 0 && this->relative_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double da = 5;
  if (!(this->da() <= 0 && this->da() >= 0)) {
    total_size += 1 + 8;
  }

  // double steer = 6;
  if (!(this->steer() <= 0 && this->steer() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.basic_msgs.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.basic_msgs.TrajectoryPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.basic_msgs.TrajectoryPoint)
    MergeFrom(*source);
  }
}

void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.basic_msgs.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path_point()) {
    _internal_mutable_path_point()->::openbot_bridge::basic_msgs::PathPoint::MergeFrom(from._internal_path_point());
  }
  if (from.has_gaussian_info()) {
    _internal_mutable_gaussian_info()->::openbot_bridge::basic_msgs::GaussianInfo::MergeFrom(from._internal_gaussian_info());
  }
  if (!(from.v() <= 0 && from.v() >= 0)) {
    _internal_set_v(from._internal_v());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
  if (!(from.relative_time() <= 0 && from.relative_time() >= 0)) {
    _internal_set_relative_time(from._internal_relative_time());
  }
  if (!(from.da() <= 0 && from.da() >= 0)) {
    _internal_set_da(from._internal_da());
  }
  if (!(from.steer() <= 0 && from.steer() >= 0)) {
    _internal_set_steer(from._internal_steer());
  }
}

void TrajectoryPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.basic_msgs.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.basic_msgs.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {
  return true;
}

void TrajectoryPoint::InternalSwap(TrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectoryPoint, steer_)
      + sizeof(TrajectoryPoint::steer_)
      - PROTOBUF_FIELD_OFFSET(TrajectoryPoint, path_point_)>(
          reinterpret_cast<char*>(&path_point_),
          reinterpret_cast<char*>(&other->path_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Trajectory::_Internal {
 public:
};

Trajectory::Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trajectory_point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.basic_msgs.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.basic_msgs.Trajectory)
}

void Trajectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trajectory_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:openbot_bridge.basic_msgs.Trajectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Trajectory::ArenaDtor(void* object) {
  Trajectory* _this = reinterpret_cast< Trajectory* >(object);
  (void)_this;
}
void Trajectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory& Trajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectory_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.basic_msgs.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.basic_msgs.Trajectory.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.basic_msgs.TrajectoryPoint trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.basic_msgs.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.basic_msgs.Trajectory.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .openbot_bridge.basic_msgs.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trajectory_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.basic_msgs.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.basic_msgs.Trajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.basic_msgs.TrajectoryPoint trajectory_point = 2;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.basic_msgs.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.basic_msgs.Trajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.basic_msgs.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.basic_msgs.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void Trajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.basic_msgs.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.basic_msgs.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VehicleMotionPoint::_Internal {
 public:
  static const ::openbot_bridge::basic_msgs::TrajectoryPoint& trajectory_point(const VehicleMotionPoint* msg);
};

const ::openbot_bridge::basic_msgs::TrajectoryPoint&
VehicleMotionPoint::_Internal::trajectory_point(const VehicleMotionPoint* msg) {
  return *msg->trajectory_point_;
}
VehicleMotionPoint::VehicleMotionPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.basic_msgs.VehicleMotionPoint)
}
VehicleMotionPoint::VehicleMotionPoint(const VehicleMotionPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trajectory_point()) {
    trajectory_point_ = new ::openbot_bridge::basic_msgs::TrajectoryPoint(*from.trajectory_point_);
  } else {
    trajectory_point_ = nullptr;
  }
  steer_ = from.steer_;
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.basic_msgs.VehicleMotionPoint)
}

void VehicleMotionPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleMotionPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_point_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&steer_) -
      reinterpret_cast<char*>(&trajectory_point_)) + sizeof(steer_));
}

VehicleMotionPoint::~VehicleMotionPoint() {
  // @@protoc_insertion_point(destructor:openbot_bridge.basic_msgs.VehicleMotionPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleMotionPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trajectory_point_;
}

void VehicleMotionPoint::ArenaDtor(void* object) {
  VehicleMotionPoint* _this = reinterpret_cast< VehicleMotionPoint* >(object);
  (void)_this;
}
void VehicleMotionPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleMotionPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleMotionPoint& VehicleMotionPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleMotionPoint_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void VehicleMotionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.basic_msgs.VehicleMotionPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && trajectory_point_ != nullptr) {
    delete trajectory_point_;
  }
  trajectory_point_ = nullptr;
  steer_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleMotionPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.basic_msgs.TrajectoryPoint trajectory_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double steer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleMotionPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.basic_msgs.VehicleMotionPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.TrajectoryPoint trajectory_point = 1;
  if (this->has_trajectory_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trajectory_point(this), target, stream);
  }

  // double steer = 2;
  if (!(this->steer() <= 0 && this->steer() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_steer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.basic_msgs.VehicleMotionPoint)
  return target;
}

size_t VehicleMotionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.basic_msgs.VehicleMotionPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.TrajectoryPoint trajectory_point = 1;
  if (this->has_trajectory_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectory_point_);
  }

  // double steer = 2;
  if (!(this->steer() <= 0 && this->steer() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleMotionPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.basic_msgs.VehicleMotionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleMotionPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleMotionPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.basic_msgs.VehicleMotionPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.basic_msgs.VehicleMotionPoint)
    MergeFrom(*source);
  }
}

void VehicleMotionPoint::MergeFrom(const VehicleMotionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.basic_msgs.VehicleMotionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trajectory_point()) {
    _internal_mutable_trajectory_point()->::openbot_bridge::basic_msgs::TrajectoryPoint::MergeFrom(from._internal_trajectory_point());
  }
  if (!(from.steer() <= 0 && from.steer() >= 0)) {
    _internal_set_steer(from._internal_steer());
  }
}

void VehicleMotionPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.basic_msgs.VehicleMotionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMotionPoint::CopyFrom(const VehicleMotionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.basic_msgs.VehicleMotionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMotionPoint::IsInitialized() const {
  return true;
}

void VehicleMotionPoint::InternalSwap(VehicleMotionPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleMotionPoint, steer_)
      + sizeof(VehicleMotionPoint::steer_)
      - PROTOBUF_FIELD_OFFSET(VehicleMotionPoint, trajectory_point_)>(
          reinterpret_cast<char*>(&trajectory_point_),
          reinterpret_cast<char*>(&other->trajectory_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleMotionPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VehicleMotion::_Internal {
 public:
};

VehicleMotion::VehicleMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vehicle_motion_point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.basic_msgs.VehicleMotion)
}
VehicleMotion::VehicleMotion(const VehicleMotion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vehicle_motion_point_(from.vehicle_motion_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.basic_msgs.VehicleMotion)
}

void VehicleMotion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleMotion_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VehicleMotion::~VehicleMotion() {
  // @@protoc_insertion_point(destructor:openbot_bridge.basic_msgs.VehicleMotion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleMotion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VehicleMotion::ArenaDtor(void* object) {
  VehicleMotion* _this = reinterpret_cast< VehicleMotion* >(object);
  (void)_this;
}
void VehicleMotion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleMotion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleMotion& VehicleMotion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleMotion_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void VehicleMotion::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.basic_msgs.VehicleMotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicle_motion_point_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleMotion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openbot_bridge.basic_msgs.VehicleMotion.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openbot_bridge.basic_msgs.VehicleMotionPoint vehicle_motion_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vehicle_motion_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleMotion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.basic_msgs.VehicleMotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openbot_bridge.basic_msgs.VehicleMotion.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .openbot_bridge.basic_msgs.VehicleMotionPoint vehicle_motion_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vehicle_motion_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vehicle_motion_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.basic_msgs.VehicleMotion)
  return target;
}

size_t VehicleMotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.basic_msgs.VehicleMotion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openbot_bridge.basic_msgs.VehicleMotionPoint vehicle_motion_point = 2;
  total_size += 1UL * this->_internal_vehicle_motion_point_size();
  for (const auto& msg : this->vehicle_motion_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleMotion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.basic_msgs.VehicleMotion)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleMotion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleMotion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.basic_msgs.VehicleMotion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.basic_msgs.VehicleMotion)
    MergeFrom(*source);
  }
}

void VehicleMotion::MergeFrom(const VehicleMotion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.basic_msgs.VehicleMotion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicle_motion_point_.MergeFrom(from.vehicle_motion_point_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void VehicleMotion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.basic_msgs.VehicleMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMotion::CopyFrom(const VehicleMotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.basic_msgs.VehicleMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMotion::IsInitialized() const {
  return true;
}

void VehicleMotion::InternalSwap(VehicleMotion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vehicle_motion_point_.InternalSwap(&other->vehicle_motion_point_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleMotion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GaussianInfo::_Internal {
 public:
};

GaussianInfo::GaussianInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.basic_msgs.GaussianInfo)
}
GaussianInfo::GaussianInfo(const GaussianInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sigma_x_, &from.sigma_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_a_) -
    reinterpret_cast<char*>(&sigma_x_)) + sizeof(theta_a_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.basic_msgs.GaussianInfo)
}

void GaussianInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&theta_a_) -
      reinterpret_cast<char*>(&sigma_x_)) + sizeof(theta_a_));
}

GaussianInfo::~GaussianInfo() {
  // @@protoc_insertion_point(destructor:openbot_bridge.basic_msgs.GaussianInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GaussianInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GaussianInfo::ArenaDtor(void* object) {
  GaussianInfo* _this = reinterpret_cast< GaussianInfo* >(object);
  (void)_this;
}
void GaussianInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GaussianInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GaussianInfo& GaussianInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GaussianInfo_openbot_5fbridge_2fbasic_5fmsgs_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void GaussianInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.basic_msgs.GaussianInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sigma_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_a_) -
      reinterpret_cast<char*>(&sigma_x_)) + sizeof(theta_a_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GaussianInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double sigma_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          sigma_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sigma_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          sigma_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double correlation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          correlation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double area_probability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          area_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ellipse_a = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ellipse_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ellipse_b = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ellipse_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double theta_a = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          theta_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GaussianInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.basic_msgs.GaussianInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double sigma_x = 1;
  if (!(this->sigma_x() <= 0 && this->sigma_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_sigma_x(), target);
  }

  // double sigma_y = 2;
  if (!(this->sigma_y() <= 0 && this->sigma_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_sigma_y(), target);
  }

  // double correlation = 3;
  if (!(this->correlation() <= 0 && this->correlation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_correlation(), target);
  }

  // double area_probability = 4;
  if (!(this->area_probability() <= 0 && this->area_probability() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_area_probability(), target);
  }

  // double ellipse_a = 5;
  if (!(this->ellipse_a() <= 0 && this->ellipse_a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ellipse_a(), target);
  }

  // double ellipse_b = 6;
  if (!(this->ellipse_b() <= 0 && this->ellipse_b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ellipse_b(), target);
  }

  // double theta_a = 7;
  if (!(this->theta_a() <= 0 && this->theta_a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_theta_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.basic_msgs.GaussianInfo)
  return target;
}

size_t GaussianInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.basic_msgs.GaussianInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double sigma_x = 1;
  if (!(this->sigma_x() <= 0 && this->sigma_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double sigma_y = 2;
  if (!(this->sigma_y() <= 0 && this->sigma_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double correlation = 3;
  if (!(this->correlation() <= 0 && this->correlation() >= 0)) {
    total_size += 1 + 8;
  }

  // double area_probability = 4;
  if (!(this->area_probability() <= 0 && this->area_probability() >= 0)) {
    total_size += 1 + 8;
  }

  // double ellipse_a = 5;
  if (!(this->ellipse_a() <= 0 && this->ellipse_a() >= 0)) {
    total_size += 1 + 8;
  }

  // double ellipse_b = 6;
  if (!(this->ellipse_b() <= 0 && this->ellipse_b() >= 0)) {
    total_size += 1 + 8;
  }

  // double theta_a = 7;
  if (!(this->theta_a() <= 0 && this->theta_a() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GaussianInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.basic_msgs.GaussianInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GaussianInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GaussianInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.basic_msgs.GaussianInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.basic_msgs.GaussianInfo)
    MergeFrom(*source);
  }
}

void GaussianInfo::MergeFrom(const GaussianInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.basic_msgs.GaussianInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.sigma_x() <= 0 && from.sigma_x() >= 0)) {
    _internal_set_sigma_x(from._internal_sigma_x());
  }
  if (!(from.sigma_y() <= 0 && from.sigma_y() >= 0)) {
    _internal_set_sigma_y(from._internal_sigma_y());
  }
  if (!(from.correlation() <= 0 && from.correlation() >= 0)) {
    _internal_set_correlation(from._internal_correlation());
  }
  if (!(from.area_probability() <= 0 && from.area_probability() >= 0)) {
    _internal_set_area_probability(from._internal_area_probability());
  }
  if (!(from.ellipse_a() <= 0 && from.ellipse_a() >= 0)) {
    _internal_set_ellipse_a(from._internal_ellipse_a());
  }
  if (!(from.ellipse_b() <= 0 && from.ellipse_b() >= 0)) {
    _internal_set_ellipse_b(from._internal_ellipse_b());
  }
  if (!(from.theta_a() <= 0 && from.theta_a() >= 0)) {
    _internal_set_theta_a(from._internal_theta_a());
  }
}

void GaussianInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.basic_msgs.GaussianInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GaussianInfo::CopyFrom(const GaussianInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.basic_msgs.GaussianInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaussianInfo::IsInitialized() const {
  return true;
}

void GaussianInfo::InternalSwap(GaussianInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GaussianInfo, theta_a_)
      + sizeof(GaussianInfo::theta_a_)
      - PROTOBUF_FIELD_OFFSET(GaussianInfo, sigma_x_)>(
          reinterpret_cast<char*>(&sigma_x_),
          reinterpret_cast<char*>(&other->sigma_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GaussianInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace basic_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openbot_bridge::basic_msgs::SLPoint* Arena::CreateMaybeMessage< ::openbot_bridge::basic_msgs::SLPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::basic_msgs::SLPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::basic_msgs::FrenetFramePoint* Arena::CreateMaybeMessage< ::openbot_bridge::basic_msgs::FrenetFramePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::basic_msgs::FrenetFramePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::basic_msgs::SpeedPoint* Arena::CreateMaybeMessage< ::openbot_bridge::basic_msgs::SpeedPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::basic_msgs::SpeedPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::basic_msgs::PathPoint* Arena::CreateMaybeMessage< ::openbot_bridge::basic_msgs::PathPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::basic_msgs::PathPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::basic_msgs::Path* Arena::CreateMaybeMessage< ::openbot_bridge::basic_msgs::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::basic_msgs::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::basic_msgs::TrajectoryPoint* Arena::CreateMaybeMessage< ::openbot_bridge::basic_msgs::TrajectoryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::basic_msgs::TrajectoryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::basic_msgs::Trajectory* Arena::CreateMaybeMessage< ::openbot_bridge::basic_msgs::Trajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::basic_msgs::Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::basic_msgs::VehicleMotionPoint* Arena::CreateMaybeMessage< ::openbot_bridge::basic_msgs::VehicleMotionPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::basic_msgs::VehicleMotionPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::basic_msgs::VehicleMotion* Arena::CreateMaybeMessage< ::openbot_bridge::basic_msgs::VehicleMotion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::basic_msgs::VehicleMotion >(arena);
}
template<> PROTOBUF_NOINLINE ::openbot_bridge::basic_msgs::GaussianInfo* Arena::CreateMaybeMessage< ::openbot_bridge::basic_msgs::GaussianInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::basic_msgs::GaussianInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
