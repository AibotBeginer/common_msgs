// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openbot_bridge/basic_msgs/vehicle_signal.proto

#include "openbot_bridge/basic_msgs/vehicle_signal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace openbot_bridge {
namespace basic_msgs {
class VehicleSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleSignal> _instance;
} _VehicleSignal_default_instance_;
}  // namespace basic_msgs
}  // namespace openbot_bridge
static void InitDefaultsscc_info_VehicleSignal_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openbot_bridge::basic_msgs::_VehicleSignal_default_instance_;
    new (ptr) ::openbot_bridge::basic_msgs::VehicleSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSignal_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleSignal_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::VehicleSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::VehicleSignal, turn_signal_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::VehicleSignal, high_beam_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::VehicleSignal, low_beam_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::VehicleSignal, horn_),
  PROTOBUF_FIELD_OFFSET(::openbot_bridge::basic_msgs::VehicleSignal, emergency_light_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openbot_bridge::basic_msgs::VehicleSignal)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openbot_bridge::basic_msgs::_VehicleSignal_default_instance_),
};

const char descriptor_table_protodef_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.openbot_bridge/basic_msgs/vehicle_sign"
  "al.proto\022\031openbot_bridge.basic_msgs\"\372\001\n\r"
  "VehicleSignal\022H\n\013turn_signal\030\001 \001(\01623.ope"
  "nbot_bridge.basic_msgs.VehicleSignal.Tur"
  "nSignal\022\021\n\thigh_beam\030\002 \001(\010\022\020\n\010low_beam\030\003"
  " \001(\010\022\014\n\004horn\030\004 \001(\010\022\027\n\017emergency_light\030\005 "
  "\001(\010\"S\n\nTurnSignal\022\r\n\tTURN_NONE\020\000\022\r\n\tTURN"
  "_LEFT\020\001\022\016\n\nTURN_RIGHT\020\002\022\027\n\023TURN_HAZARD_W"
  "ARNING\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto_sccs[1] = {
  &scc_info_VehicleSignal_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto = {
  false, false, descriptor_table_protodef_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto, "openbot_bridge/basic_msgs/vehicle_signal.proto", 336,
  &descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto_once, descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto_sccs, descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto::offsets,
  file_level_metadata_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto, 1, file_level_enum_descriptors_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto, file_level_service_descriptors_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto)), true);
namespace openbot_bridge {
namespace basic_msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleSignal_TurnSignal_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto);
  return file_level_enum_descriptors_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto[0];
}
bool VehicleSignal_TurnSignal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VehicleSignal_TurnSignal VehicleSignal::TURN_NONE;
constexpr VehicleSignal_TurnSignal VehicleSignal::TURN_LEFT;
constexpr VehicleSignal_TurnSignal VehicleSignal::TURN_RIGHT;
constexpr VehicleSignal_TurnSignal VehicleSignal::TURN_HAZARD_WARNING;
constexpr VehicleSignal_TurnSignal VehicleSignal::TurnSignal_MIN;
constexpr VehicleSignal_TurnSignal VehicleSignal::TurnSignal_MAX;
constexpr int VehicleSignal::TurnSignal_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class VehicleSignal::_Internal {
 public:
};

VehicleSignal::VehicleSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:openbot_bridge.basic_msgs.VehicleSignal)
}
VehicleSignal::VehicleSignal(const VehicleSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&turn_signal_, &from.turn_signal_,
    static_cast<size_t>(reinterpret_cast<char*>(&emergency_light_) -
    reinterpret_cast<char*>(&turn_signal_)) + sizeof(emergency_light_));
  // @@protoc_insertion_point(copy_constructor:openbot_bridge.basic_msgs.VehicleSignal)
}

void VehicleSignal::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&turn_signal_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&emergency_light_) -
      reinterpret_cast<char*>(&turn_signal_)) + sizeof(emergency_light_));
}

VehicleSignal::~VehicleSignal() {
  // @@protoc_insertion_point(destructor:openbot_bridge.basic_msgs.VehicleSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VehicleSignal::ArenaDtor(void* object) {
  VehicleSignal* _this = reinterpret_cast< VehicleSignal* >(object);
  (void)_this;
}
void VehicleSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleSignal& VehicleSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleSignal_openbot_5fbridge_2fbasic_5fmsgs_2fvehicle_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void VehicleSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:openbot_bridge.basic_msgs.VehicleSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&turn_signal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&emergency_light_) -
      reinterpret_cast<char*>(&turn_signal_)) + sizeof(emergency_light_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .openbot_bridge.basic_msgs.VehicleSignal.TurnSignal turn_signal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_turn_signal(static_cast<::openbot_bridge::basic_msgs::VehicleSignal_TurnSignal>(val));
        } else goto handle_unusual;
        continue;
      // bool high_beam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          high_beam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool low_beam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          low_beam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool horn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool emergency_light = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          emergency_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openbot_bridge.basic_msgs.VehicleSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.VehicleSignal.TurnSignal turn_signal = 1;
  if (this->turn_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_turn_signal(), target);
  }

  // bool high_beam = 2;
  if (this->high_beam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_high_beam(), target);
  }

  // bool low_beam = 3;
  if (this->low_beam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_low_beam(), target);
  }

  // bool horn = 4;
  if (this->horn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_horn(), target);
  }

  // bool emergency_light = 5;
  if (this->emergency_light() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_emergency_light(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openbot_bridge.basic_msgs.VehicleSignal)
  return target;
}

size_t VehicleSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openbot_bridge.basic_msgs.VehicleSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .openbot_bridge.basic_msgs.VehicleSignal.TurnSignal turn_signal = 1;
  if (this->turn_signal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turn_signal());
  }

  // bool high_beam = 2;
  if (this->high_beam() != 0) {
    total_size += 1 + 1;
  }

  // bool low_beam = 3;
  if (this->low_beam() != 0) {
    total_size += 1 + 1;
  }

  // bool horn = 4;
  if (this->horn() != 0) {
    total_size += 1 + 1;
  }

  // bool emergency_light = 5;
  if (this->emergency_light() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openbot_bridge.basic_msgs.VehicleSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openbot_bridge.basic_msgs.VehicleSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openbot_bridge.basic_msgs.VehicleSignal)
    MergeFrom(*source);
  }
}

void VehicleSignal::MergeFrom(const VehicleSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openbot_bridge.basic_msgs.VehicleSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.turn_signal() != 0) {
    _internal_set_turn_signal(from._internal_turn_signal());
  }
  if (from.high_beam() != 0) {
    _internal_set_high_beam(from._internal_high_beam());
  }
  if (from.low_beam() != 0) {
    _internal_set_low_beam(from._internal_low_beam());
  }
  if (from.horn() != 0) {
    _internal_set_horn(from._internal_horn());
  }
  if (from.emergency_light() != 0) {
    _internal_set_emergency_light(from._internal_emergency_light());
  }
}

void VehicleSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openbot_bridge.basic_msgs.VehicleSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSignal::CopyFrom(const VehicleSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openbot_bridge.basic_msgs.VehicleSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSignal::IsInitialized() const {
  return true;
}

void VehicleSignal::InternalSwap(VehicleSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleSignal, emergency_light_)
      + sizeof(VehicleSignal::emergency_light_)
      - PROTOBUF_FIELD_OFFSET(VehicleSignal, turn_signal_)>(
          reinterpret_cast<char*>(&turn_signal_),
          reinterpret_cast<char*>(&other->turn_signal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace basic_msgs
}  // namespace openbot_bridge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openbot_bridge::basic_msgs::VehicleSignal* Arena::CreateMaybeMessage< ::openbot_bridge::basic_msgs::VehicleSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openbot_bridge::basic_msgs::VehicleSignal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
